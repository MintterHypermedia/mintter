// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
//@ts-nocheck
/* eslint-disable */
import { grpc } from "@improbable-eng/grpc-web";
import { BrowserHeaders } from "browser-headers";
import _m0 from "protobufjs/minimal";
import { Timestamp } from "../../google/protobuf/timestamp";

/** Request for getting change info. */
export interface GetChangeInfoRequest {
  /** ID of the Change. */
  id: string;
}

/** Request to list changes. */
export interface ListChangesRequest {
  /** Required. ID of the Mintter object to list changes for. */
  objectId: string;
  /** Optional. Number of results per page. */
  pageSize: number;
  /** Optional. Token for the page to return. */
  pageToken: string;
}

/** Response with a list of changes. */
export interface ListChangesResponse {
  /** List of changes matching the request. */
  changes: ChangeInfo[];
  /** Token for the next page if there's any. */
  nextPageToken: string;
}

/** Metadata about a single Change. */
export interface ChangeInfo {
  /** ID of the Change. */
  id: string;
  /** Author of the Change. */
  author: string;
  /** Time when this change was recorded by the author. */
  createTime: Date | undefined;
}

function createBaseGetChangeInfoRequest(): GetChangeInfoRequest {
  return { id: "" };
}

export const GetChangeInfoRequest = {
  encode(message: GetChangeInfoRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetChangeInfoRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetChangeInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.id = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): GetChangeInfoRequest {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: GetChangeInfoRequest): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<GetChangeInfoRequest>, I>>(object: I): GetChangeInfoRequest {
    const message = createBaseGetChangeInfoRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseListChangesRequest(): ListChangesRequest {
  return { objectId: "", pageSize: 0, pageToken: "" };
}

export const ListChangesRequest = {
  encode(message: ListChangesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.objectId !== "") {
      writer.uint32(10).string(message.objectId);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListChangesRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListChangesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.objectId = reader.string();
          break;
        case 2:
          message.pageSize = reader.int32();
          break;
        case 3:
          message.pageToken = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): ListChangesRequest {
    return {
      objectId: isSet(object.objectId) ? String(object.objectId) : "",
      pageSize: isSet(object.pageSize) ? Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? String(object.pageToken) : "",
    };
  },

  toJSON(message: ListChangesRequest): unknown {
    const obj: any = {};
    message.objectId !== undefined && (obj.objectId = message.objectId);
    message.pageSize !== undefined && (obj.pageSize = Math.round(message.pageSize));
    message.pageToken !== undefined && (obj.pageToken = message.pageToken);
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<ListChangesRequest>, I>>(object: I): ListChangesRequest {
    const message = createBaseListChangesRequest();
    message.objectId = object.objectId ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListChangesResponse(): ListChangesResponse {
  return { changes: [], nextPageToken: "" };
}

export const ListChangesResponse = {
  encode(message: ListChangesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.changes) {
      ChangeInfo.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListChangesResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListChangesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.changes.push(ChangeInfo.decode(reader, reader.uint32()));
          break;
        case 2:
          message.nextPageToken = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): ListChangesResponse {
    return {
      changes: Array.isArray(object?.changes) ? object.changes.map((e: any) => ChangeInfo.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListChangesResponse): unknown {
    const obj: any = {};
    if (message.changes) {
      obj.changes = message.changes.map((e) => e ? ChangeInfo.toJSON(e) : undefined);
    } else {
      obj.changes = [];
    }
    message.nextPageToken !== undefined && (obj.nextPageToken = message.nextPageToken);
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<ListChangesResponse>, I>>(object: I): ListChangesResponse {
    const message = createBaseListChangesResponse();
    message.changes = object.changes?.map((e) => ChangeInfo.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseChangeInfo(): ChangeInfo {
  return { id: "", author: "", createTime: undefined };
}

export const ChangeInfo = {
  encode(message: ChangeInfo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.author !== "") {
      writer.uint32(18).string(message.author);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ChangeInfo {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChangeInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.id = reader.string();
          break;
        case 2:
          message.author = reader.string();
          break;
        case 3:
          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): ChangeInfo {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      author: isSet(object.author) ? String(object.author) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
    };
  },

  toJSON(message: ChangeInfo): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    message.author !== undefined && (obj.author = message.author);
    message.createTime !== undefined && (obj.createTime = message.createTime.toISOString());
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<ChangeInfo>, I>>(object: I): ChangeInfo {
    const message = createBaseChangeInfo();
    message.id = object.id ?? "";
    message.author = object.author ?? "";
    message.createTime = object.createTime ?? undefined;
    return message;
  },
};

/** Changes service provides information about the atomic version controlled changes of Mintter objects. */
export interface Changes {
  /** Returns information about a single change. */
  getChangeInfo(request: DeepPartial<GetChangeInfoRequest>, metadata?: grpc.Metadata): Promise<ChangeInfo>;
  /** List changes of a given object. */
  listChanges(request: DeepPartial<ListChangesRequest>, metadata?: grpc.Metadata): Promise<ListChangesResponse>;
}

export class ChangesClientImpl implements Changes {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.getChangeInfo = this.getChangeInfo.bind(this);
    this.listChanges = this.listChanges.bind(this);
  }

  getChangeInfo(request: DeepPartial<GetChangeInfoRequest>, metadata?: grpc.Metadata): Promise<ChangeInfo> {
    return this.rpc.unary(ChangesGetChangeInfoDesc, GetChangeInfoRequest.fromPartial(request), metadata);
  }

  listChanges(request: DeepPartial<ListChangesRequest>, metadata?: grpc.Metadata): Promise<ListChangesResponse> {
    return this.rpc.unary(ChangesListChangesDesc, ListChangesRequest.fromPartial(request), metadata);
  }
}

export const ChangesDesc = { serviceName: "com.mintter.documents.v1alpha.Changes" };

export const ChangesGetChangeInfoDesc: UnaryMethodDefinitionish = {
  methodName: "GetChangeInfo",
  service: ChangesDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetChangeInfoRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      return {
        ...ChangeInfo.decode(data),
        toObject() {
          return this;
        },
      };
    },
  } as any,
};

export const ChangesListChangesDesc: UnaryMethodDefinitionish = {
  methodName: "ListChanges",
  service: ChangesDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListChangesRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      return {
        ...ListChangesResponse.decode(data),
        toObject() {
          return this;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;

    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;

      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    },
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata || this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata,
        transport: this.options.transport,
        debug: this.options.debug,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message);
          } else {
            const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
            reject(err);
          }
        },
      });
    });
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = date.getTime() / 1_000;
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = t.seconds * 1_000;
  millis += t.nanos / 1_000_000;
  return new Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof Date) {
    return o;
  } else if (typeof o === "string") {
    return new Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export class GrpcWebError extends globalThis.Error {
  constructor(message: string, public code: grpc.Code, public metadata: grpc.Metadata) {
    super(message);
  }
}
