// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
//@ts-nocheck
/* eslint-disable */
import { grpc } from "@improbable-eng/grpc-web";
import { BrowserHeaders } from "browser-headers";
import _m0 from "protobufjs/minimal";
import { Empty } from "../../google/protobuf/empty";
import { Member_Role, member_RoleFromJSON, member_RoleToJSON } from "../../site/v1alpha/site";

/** Request to add a site. */
export interface AddSiteRequest {
  /** Required. Site hostname. */
  hostname: string;
  /**
   * Optional. Invite token for the site. Not needed
   * if the site already knows our Account ID.
   */
  inviteToken: string;
}

/** Request to remove a site from local server */
export interface RemoveSiteRequest {
  /** Required. Site hostname. */
  hostname: string;
}

/** Request to list configures sites. */
export interface ListSitesRequest {
  /** Optional. Number of items per page. */
  pageSize: number;
  /** Optional. Token for a specific page. */
  pageToken: string;
}

/** Response with a list of sites. */
export interface ListSitesResponse {
  /** List of sites. */
  sites: SiteConfig[];
  /** Token for the next page if any. */
  nextPageToken: string;
}

/** Local site configuration. */
export interface SiteConfig {
  /** Hostname of the site. */
  hostname: string;
  /** Our role on this site. */
  role: Member_Role;
}

function createBaseAddSiteRequest(): AddSiteRequest {
  return { hostname: "", inviteToken: "" };
}

export const AddSiteRequest = {
  encode(message: AddSiteRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.hostname !== "") {
      writer.uint32(10).string(message.hostname);
    }
    if (message.inviteToken !== "") {
      writer.uint32(18).string(message.inviteToken);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddSiteRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSiteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.hostname = reader.string();
          break;
        case 2:
          message.inviteToken = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): AddSiteRequest {
    return {
      hostname: isSet(object.hostname) ? String(object.hostname) : "",
      inviteToken: isSet(object.inviteToken) ? String(object.inviteToken) : "",
    };
  },

  toJSON(message: AddSiteRequest): unknown {
    const obj: any = {};
    message.hostname !== undefined && (obj.hostname = message.hostname);
    message.inviteToken !== undefined && (obj.inviteToken = message.inviteToken);
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<AddSiteRequest>, I>>(object: I): AddSiteRequest {
    const message = createBaseAddSiteRequest();
    message.hostname = object.hostname ?? "";
    message.inviteToken = object.inviteToken ?? "";
    return message;
  },
};

function createBaseRemoveSiteRequest(): RemoveSiteRequest {
  return { hostname: "" };
}

export const RemoveSiteRequest = {
  encode(message: RemoveSiteRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.hostname !== "") {
      writer.uint32(10).string(message.hostname);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveSiteRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveSiteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.hostname = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): RemoveSiteRequest {
    return { hostname: isSet(object.hostname) ? String(object.hostname) : "" };
  },

  toJSON(message: RemoveSiteRequest): unknown {
    const obj: any = {};
    message.hostname !== undefined && (obj.hostname = message.hostname);
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<RemoveSiteRequest>, I>>(object: I): RemoveSiteRequest {
    const message = createBaseRemoveSiteRequest();
    message.hostname = object.hostname ?? "";
    return message;
  },
};

function createBaseListSitesRequest(): ListSitesRequest {
  return { pageSize: 0, pageToken: "" };
}

export const ListSitesRequest = {
  encode(message: ListSitesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pageSize !== 0) {
      writer.uint32(8).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListSitesRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSitesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.pageSize = reader.int32();
          break;
        case 2:
          message.pageToken = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): ListSitesRequest {
    return {
      pageSize: isSet(object.pageSize) ? Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? String(object.pageToken) : "",
    };
  },

  toJSON(message: ListSitesRequest): unknown {
    const obj: any = {};
    message.pageSize !== undefined && (obj.pageSize = Math.round(message.pageSize));
    message.pageToken !== undefined && (obj.pageToken = message.pageToken);
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<ListSitesRequest>, I>>(object: I): ListSitesRequest {
    const message = createBaseListSitesRequest();
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListSitesResponse(): ListSitesResponse {
  return { sites: [], nextPageToken: "" };
}

export const ListSitesResponse = {
  encode(message: ListSitesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.sites) {
      SiteConfig.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListSitesResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSitesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sites.push(SiteConfig.decode(reader, reader.uint32()));
          break;
        case 2:
          message.nextPageToken = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): ListSitesResponse {
    return {
      sites: Array.isArray(object?.sites) ? object.sites.map((e: any) => SiteConfig.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListSitesResponse): unknown {
    const obj: any = {};
    if (message.sites) {
      obj.sites = message.sites.map((e) => e ? SiteConfig.toJSON(e) : undefined);
    } else {
      obj.sites = [];
    }
    message.nextPageToken !== undefined && (obj.nextPageToken = message.nextPageToken);
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<ListSitesResponse>, I>>(object: I): ListSitesResponse {
    const message = createBaseListSitesResponse();
    message.sites = object.sites?.map((e) => SiteConfig.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseSiteConfig(): SiteConfig {
  return { hostname: "", role: 0 };
}

export const SiteConfig = {
  encode(message: SiteConfig, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.hostname !== "") {
      writer.uint32(10).string(message.hostname);
    }
    if (message.role !== 0) {
      writer.uint32(16).int32(message.role);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SiteConfig {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSiteConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.hostname = reader.string();
          break;
        case 2:
          message.role = reader.int32() as any;
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): SiteConfig {
    return {
      hostname: isSet(object.hostname) ? String(object.hostname) : "",
      role: isSet(object.role) ? member_RoleFromJSON(object.role) : 0,
    };
  },

  toJSON(message: SiteConfig): unknown {
    const obj: any = {};
    message.hostname !== undefined && (obj.hostname = message.hostname);
    message.role !== undefined && (obj.role = member_RoleToJSON(message.role));
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<SiteConfig>, I>>(object: I): SiteConfig {
    const message = createBaseSiteConfig();
    message.hostname = object.hostname ?? "";
    message.role = object.role ?? 0;
    return message;
  },
};

/**
 * Sites API allows to configure the remote Mintter Sites inside the local app.
 * To interact with the existing site, the local daemon will expose the Site API
 * interface as well (see /proto/site/v1alpha/site.proto), requiring a gRPC metadata
 * header with the hostname of the actual site to know the endpoint where to proxy the request.
 */
export interface Sites {
  /** Adds a site configuration to the local app. */
  addSite(request: DeepPartial<AddSiteRequest>, metadata?: grpc.Metadata): Promise<SiteConfig>;
  /** Adds a site configuration to the local app. */
  removeSite(request: DeepPartial<RemoveSiteRequest>, metadata?: grpc.Metadata): Promise<Empty>;
  /** Lists configured sites. */
  listSites(request: DeepPartial<ListSitesRequest>, metadata?: grpc.Metadata): Promise<ListSitesResponse>;
}

export class SitesClientImpl implements Sites {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.addSite = this.addSite.bind(this);
    this.removeSite = this.removeSite.bind(this);
    this.listSites = this.listSites.bind(this);
  }

  addSite(request: DeepPartial<AddSiteRequest>, metadata?: grpc.Metadata): Promise<SiteConfig> {
    return this.rpc.unary(SitesAddSiteDesc, AddSiteRequest.fromPartial(request), metadata);
  }

  removeSite(request: DeepPartial<RemoveSiteRequest>, metadata?: grpc.Metadata): Promise<Empty> {
    return this.rpc.unary(SitesRemoveSiteDesc, RemoveSiteRequest.fromPartial(request), metadata);
  }

  listSites(request: DeepPartial<ListSitesRequest>, metadata?: grpc.Metadata): Promise<ListSitesResponse> {
    return this.rpc.unary(SitesListSitesDesc, ListSitesRequest.fromPartial(request), metadata);
  }
}

export const SitesDesc = { serviceName: "com.mintter.daemon.v1alpha.Sites" };

export const SitesAddSiteDesc: UnaryMethodDefinitionish = {
  methodName: "AddSite",
  service: SitesDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return AddSiteRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      return {
        ...SiteConfig.decode(data),
        toObject() {
          return this;
        },
      };
    },
  } as any,
};

export const SitesRemoveSiteDesc: UnaryMethodDefinitionish = {
  methodName: "RemoveSite",
  service: SitesDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RemoveSiteRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      return {
        ...Empty.decode(data),
        toObject() {
          return this;
        },
      };
    },
  } as any,
};

export const SitesListSitesDesc: UnaryMethodDefinitionish = {
  methodName: "ListSites",
  service: SitesDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListSitesRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      return {
        ...ListSitesResponse.decode(data),
        toObject() {
          return this;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;

    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;

      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    },
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata || this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata,
        transport: this.options.transport,
        debug: this.options.debug,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message);
          } else {
            const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
            reject(err);
          }
        },
      });
    });
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export class GrpcWebError extends globalThis.Error {
  constructor(message: string, public code: grpc.Code, public metadata: grpc.Metadata) {
    super(message);
  }
}
