load("//build:rules.bzl", "local_action")

local_action(
    name = "build_id",
    srcs = glob([
        "*.js",
        "*.json",
        "*.ts",
        "components/**",
        "editor/**",
        "pages/**",
        "public/**",
        "screens/**",
        "shared/**",
        "styles/**",
    ]),
    outs = ["build.id"],
    cmd = """$TOOL_CACHEHASH \
    -cache-file=$TARGET_OUT_DIR/build_id.cachehash.json \
    -o=$TARGET_OUT_DIR/build.id \
    -force \
    '*.js' '*.json' '*.ts' 'components/**' 'pages/**' 'public/**' 'screens/**' 'shared/**' 'styles/**' \
    '../../api/js/**'
""",
    tools = ["//build/tools:cachehash"],
    deps = [
        "//:yarn",
        "//proto:js",
    ],
)

local_action(
    name = "build",
    srcs = [],
    outs = [".next.prod/BUILD_ID"],  # NextJS build system is a non-hermetic and non-reproducible mess. So we declare only our own reproducible artifact.
    cmd = """
export NEXT_BUILD_ID=$(cat $TARGET_OUT_DIR/build.id)
yarn build
ln -s $(pwd)/.next.prod/BUILD_ID $TARGET_OUT_DIR/.next.prod/BUILD_ID
""",
    deps = [":build_id"],
)

local_action(
    name = "export",
    srcs = [],
    outs = ["out"],
    cmd = """
export NEXT_BUILD_ID=$(cat $TARGET_OUT_DIR/build.id)
rm -rf out
yarn export
cp -Rs $(pwd)/out/ $TARGET_OUT_DIR/out
""",
    dir = True,
    visibility = ["//backend:__subpackages__"],
    deps = [":build"],
)
