// @generated by protoc-gen-es v1.4.1 with parameter "target=ts,import_extension=none"
// @generated from file documents/v1alpha/comments.proto (package com.mintter.documents.v1alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { BlockNode } from "./documents_pb";

/**
 * Request to create a comment.
 *
 * @generated from message com.mintter.documents.v1alpha.CreateCommentRequest
 */
export class CreateCommentRequest extends Message<CreateCommentRequest> {
  /**
   * Required. The URI of the target hypermedia resource which is being commented.
   * It's best to use versioned URIs to propagate better context and intent,
   * even if the comments are "overlaid" onto the newer versions of the resource.
   *
   * @generated from field: string target = 1;
   */
  target = "";

  /**
   * Required. Content of the comment.
   *
   * @generated from field: repeated com.mintter.documents.v1alpha.BlockNode content = 2;
   */
  content: BlockNode[] = [];

  constructor(data?: PartialMessage<CreateCommentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.mintter.documents.v1alpha.CreateCommentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "target", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "content", kind: "message", T: BlockNode, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateCommentRequest {
    return new CreateCommentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateCommentRequest {
    return new CreateCommentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateCommentRequest {
    return new CreateCommentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateCommentRequest | PlainMessage<CreateCommentRequest> | undefined, b: CreateCommentRequest | PlainMessage<CreateCommentRequest> | undefined): boolean {
    return proto3.util.equals(CreateCommentRequest, a, b);
  }
}

/**
 * Request to create a reply.
 *
 * @generated from message com.mintter.documents.v1alpha.CreateReplyRequest
 */
export class CreateReplyRequest extends Message<CreateReplyRequest> {
  /**
   * Required. ID of the replied comment.
   *
   * @generated from field: string replied_comment = 1;
   */
  repliedComment = "";

  /**
   * Required. Content of the reply.
   *
   * @generated from field: repeated com.mintter.documents.v1alpha.BlockNode content = 2;
   */
  content: BlockNode[] = [];

  constructor(data?: PartialMessage<CreateReplyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.mintter.documents.v1alpha.CreateReplyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "replied_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "content", kind: "message", T: BlockNode, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateReplyRequest {
    return new CreateReplyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateReplyRequest {
    return new CreateReplyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateReplyRequest {
    return new CreateReplyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateReplyRequest | PlainMessage<CreateReplyRequest> | undefined, b: CreateReplyRequest | PlainMessage<CreateReplyRequest> | undefined): boolean {
    return proto3.util.equals(CreateReplyRequest, a, b);
  }
}

/**
 * Request to get a comment.
 *
 * @generated from message com.mintter.documents.v1alpha.GetCommentRequest
 */
export class GetCommentRequest extends Message<GetCommentRequest> {
  /**
   * Required. ID of the comment to retrieve.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetCommentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.mintter.documents.v1alpha.GetCommentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCommentRequest {
    return new GetCommentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCommentRequest {
    return new GetCommentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCommentRequest {
    return new GetCommentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCommentRequest | PlainMessage<GetCommentRequest> | undefined, b: GetCommentRequest | PlainMessage<GetCommentRequest> | undefined): boolean {
    return proto3.util.equals(GetCommentRequest, a, b);
  }
}

/**
 * Request to list comments.
 *
 * @generated from message com.mintter.documents.v1alpha.ListCommentsRequest
 */
export class ListCommentsRequest extends Message<ListCommentsRequest> {
  /**
   * Required. The URI of the target resource for which comments should be listed.
   *
   * @generated from field: string target = 1;
   */
  target = "";

  /**
   * Optional. Flag to omit replies from the result. By default replies are included.
   *
   * @generated from field: bool omit_replies = 2;
   */
  omitReplies = false;

  /**
   * Optional. The maximum number of comments to return.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize = 0;

  /**
   * Optional. The page token obtained from a previous request (if any).
   *
   * @generated from field: string page_token = 4;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListCommentsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.mintter.documents.v1alpha.ListCommentsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "target", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "omit_replies", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListCommentsRequest {
    return new ListCommentsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListCommentsRequest {
    return new ListCommentsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListCommentsRequest {
    return new ListCommentsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListCommentsRequest | PlainMessage<ListCommentsRequest> | undefined, b: ListCommentsRequest | PlainMessage<ListCommentsRequest> | undefined): boolean {
    return proto3.util.equals(ListCommentsRequest, a, b);
  }
}

/**
 * Response with a list of comments.
 *
 * @generated from message com.mintter.documents.v1alpha.ListCommentsResponse
 */
export class ListCommentsResponse extends Message<ListCommentsResponse> {
  /**
   * List of comments.
   *
   * @generated from field: repeated com.mintter.documents.v1alpha.Comment comments = 1;
   */
  comments: Comment[] = [];

  /**
   * Token to retrieve the next page of comments (if necessary).
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListCommentsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.mintter.documents.v1alpha.ListCommentsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "comments", kind: "message", T: Comment, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListCommentsResponse {
    return new ListCommentsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListCommentsResponse {
    return new ListCommentsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListCommentsResponse {
    return new ListCommentsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListCommentsResponse | PlainMessage<ListCommentsResponse> | undefined, b: ListCommentsResponse | PlainMessage<ListCommentsResponse> | undefined): boolean {
    return proto3.util.equals(ListCommentsResponse, a, b);
  }
}

/**
 * Comment is a unit of discussion.
 * The initial comment is posted targeting an existing hypermedia resource.
 * Replies are posted targeting the initial root comment.
 * Replies also link to some other comment they are replying to.
 *
 * @generated from message com.mintter.documents.v1alpha.Comment
 */
export class Comment extends Message<Comment> {
  /**
   * ID of the current comment.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * The URI of the target resource which the comment is attached to.
   * For initial comments this is normally a Hypermedia Document, but potentially can be anything.
   * For replies this should be the ID of the initial root comment that has started the conversation tread,
   * i.e. direct replies, and replies to replies should all have the same root comment as target.
   *
   * @generated from field: string target = 2;
   */
  target = "";

  /**
   * The ID of the comment to which this comment is a reply.
   * For initial comments this field is empty.
   *
   * @generated from field: string replied_comment = 4;
   */
  repliedComment = "";

  /**
   * Account ID of the author of the comment.
   *
   * @generated from field: string author = 5;
   */
  author = "";

  /**
   * Content of the comment.
   *
   * @generated from field: repeated com.mintter.documents.v1alpha.BlockNode content = 6;
   */
  content: BlockNode[] = [];

  /**
   * Timestamp when the comment was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 7;
   */
  createTime?: Timestamp;

  constructor(data?: PartialMessage<Comment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.mintter.documents.v1alpha.Comment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "target", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "replied_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "author", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "content", kind: "message", T: BlockNode, repeated: true },
    { no: 7, name: "create_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Comment {
    return new Comment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Comment {
    return new Comment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Comment {
    return new Comment().fromJsonString(jsonString, options);
  }

  static equals(a: Comment | PlainMessage<Comment> | undefined, b: Comment | PlainMessage<Comment> | undefined): boolean {
    return proto3.util.equals(Comment, a, b);
  }
}

