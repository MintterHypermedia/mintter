// @generated by protoc-gen-connect-es v0.13.0 with parameter "target=ts,import_extension=none"
// @generated from file documents/v1alpha/web_publishing.proto (package com.mintter.documents.v1alpha, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { AddSiteRequest, CreateInviteTokenRequest, DeleteMemberRequest, GetMemberRequest, GetPathRequest, GetPathResponse, GetSiteInfoRequest, InviteToken, ListMembersRequest, ListMembersResponse, ListSitesRequest, ListSitesResponse, ListWebPublicationRecordsRequest, ListWebPublicationRecordsResponse, ListWebPublicationsRequest, ListWebPublicationsResponse, Member, PublishDocumentRequest, PublishDocumentResponse, RedeemInviteTokenRequest, RedeemInviteTokenResponse, RemoveSiteRequest, SiteConfig, SiteInfo, UnpublishDocumentRequest, UnpublishDocumentResponse, UpdateSiteInfoRequest } from "./web_publishing_pb";
import { Empty, MethodKind } from "@bufbuild/protobuf";

/**
 * Service exposed by the local application backend for
 * configuring and managing remote Mintter Sites.
 *
 * @generated from service com.mintter.documents.v1alpha.WebPublishing
 */
export const WebPublishing = {
  typeName: "com.mintter.documents.v1alpha.WebPublishing",
  methods: {
    /**
     * Adds a site configuration to the local app backend.
     *
     * @generated from rpc com.mintter.documents.v1alpha.WebPublishing.AddSite
     */
    addSite: {
      name: "AddSite",
      I: AddSiteRequest,
      O: SiteConfig,
      kind: MethodKind.Unary,
    },
    /**
     * Removes site configuration from the local app backend.
     *
     * @generated from rpc com.mintter.documents.v1alpha.WebPublishing.RemoveSite
     */
    removeSite: {
      name: "RemoveSite",
      I: RemoveSiteRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * Lists configured sites.
     *
     * @generated from rpc com.mintter.documents.v1alpha.WebPublishing.ListSites
     */
    listSites: {
      name: "ListSites",
      I: ListSitesRequest,
      O: ListSitesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Lists web publication records for a given document among the configured web sites.
     *
     * @generated from rpc com.mintter.documents.v1alpha.WebPublishing.ListWebPublicationRecords
     */
    listWebPublicationRecords: {
      name: "ListWebPublicationRecords",
      I: ListWebPublicationRecordsRequest,
      O: ListWebPublicationRecordsResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

/**
 * API exposed by the remote server that allows
 * publishing Mintter Documents to serve them on the Web.
 * The server implementing this API is responsible for authenticating
 * callers for its administrative RPCs.
 * This API is also exposed by the local application backend, which would act
 * as a proxy to the remote web server, handling the authentication with its device private key.
 * The local application backend would require a special metadata header specifying the hostname
 * of the Mintter Site to proxy the request to.
 *
 * Metadata Header: x-mintter-site-hostname
 *
 * @generated from service com.mintter.documents.v1alpha.WebSite
 */
export const WebSite = {
  typeName: "com.mintter.documents.v1alpha.WebSite",
  methods: {
    /**
     * Creates a new invite token for registering a new member.
     * Protected. Must require authentication.
     *
     * @generated from rpc com.mintter.documents.v1alpha.WebSite.CreateInviteToken
     */
    createInviteToken: {
      name: "CreateInviteToken",
      I: CreateInviteTokenRequest,
      O: InviteToken,
      kind: MethodKind.Unary,
    },
    /**
     * Redeems a previously created invite token to register a new member.
     *
     * @generated from rpc com.mintter.documents.v1alpha.WebSite.RedeemInviteToken
     */
    redeemInviteToken: {
      name: "RedeemInviteToken",
      I: RedeemInviteTokenRequest,
      O: RedeemInviteTokenResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Gets public-facing site information.
     *
     * @generated from rpc com.mintter.documents.v1alpha.WebSite.GetSiteInfo
     */
    getSiteInfo: {
      name: "GetSiteInfo",
      I: GetSiteInfoRequest,
      O: SiteInfo,
      kind: MethodKind.Unary,
    },
    /**
     * Updates public-facing site information. Doesn't support partial updates,
     * hence all the fields must be provided.
     * Protected. Must require authentication.
     *
     * @generated from rpc com.mintter.documents.v1alpha.WebSite.UpdateSiteInfo
     */
    updateSiteInfo: {
      name: "UpdateSiteInfo",
      I: UpdateSiteInfoRequest,
      O: SiteInfo,
      kind: MethodKind.Unary,
    },
    /**
     * Lists registered members on the site.
     * May be protected or public depending on the privacy policies of the web site.
     *
     * @generated from rpc com.mintter.documents.v1alpha.WebSite.ListMembers
     */
    listMembers: {
      name: "ListMembers",
      I: ListMembersRequest,
      O: ListMembersResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Gets information about a specific member.
     * May be protected or public depending on the privacy policies of the web site.
     *
     * @generated from rpc com.mintter.documents.v1alpha.WebSite.GetMember
     */
    getMember: {
      name: "GetMember",
      I: GetMemberRequest,
      O: Member,
      kind: MethodKind.Unary,
    },
    /**
     * Deletes an existing member.
     * Protected. Must require authentication.
     *
     * @generated from rpc com.mintter.documents.v1alpha.WebSite.DeleteMember
     */
    deleteMember: {
      name: "DeleteMember",
      I: DeleteMemberRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * Publishes a Mintter Document on the remote web server along with any supporting materials.
     *
     * @generated from rpc com.mintter.documents.v1alpha.WebSite.PublishDocument
     */
    publishDocument: {
      name: "PublishDocument",
      I: PublishDocumentRequest,
      O: PublishDocumentResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Unpublishes a previously published Document.
     *
     * @generated from rpc com.mintter.documents.v1alpha.WebSite.UnpublishDocument
     */
    unpublishDocument: {
      name: "UnpublishDocument",
      I: UnpublishDocumentRequest,
      O: UnpublishDocumentResponse,
      kind: MethodKind.Unary,
    },
    /**
     * list all the published documents
     *
     * @generated from rpc com.mintter.documents.v1alpha.WebSite.ListWebPublications
     */
    listWebPublications: {
      name: "ListWebPublications",
      I: ListWebPublicationsRequest,
      O: ListWebPublicationsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Get the document published at a given path.
     *
     * @generated from rpc com.mintter.documents.v1alpha.WebSite.GetPath
     */
    getPath: {
      name: "GetPath",
      I: GetPathRequest,
      O: GetPathResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

