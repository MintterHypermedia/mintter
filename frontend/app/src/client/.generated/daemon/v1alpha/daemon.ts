// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
//@ts-nocheck
/* eslint-disable */
import Long from "long";
import { grpc } from "@improbable-eng/grpc-web";
import _m0 from "protobufjs/minimal";
import { Empty } from "../../google/protobuf/empty";
import { BrowserHeaders } from "browser-headers";
import { Timestamp } from "../../google/protobuf/timestamp";

export interface GenSeedRequest {
  /** Passphrase that will be used to encipher the seed. */
  aezeedPassphrase: string;
}

export interface GenSeedResponse {
  /**
   * The list of human-friendly words that can be used to backup the seed. These
   * words must be stored in a secret place by the user.
   */
  mnemonic: string[];
}

export interface RegisterRequest {
  mnemonic: string[];
  aezeedPassphrase: string;
}

export interface RegisterResponse {
  accountId: string;
}

export interface GetInfoRequest {}

export interface ForceSyncRequest {}

/** Info is a generic information about the running node. */
export interface Info {
  /** Account ID this node belongs to. */
  accountId: string;
  /** Peer ID assigned to this node. */
  peerId: string;
  /** Start time of the node. */
  startTime: Date | undefined;
}

function createBaseGenSeedRequest(): GenSeedRequest {
  return { aezeedPassphrase: "" };
}

export const GenSeedRequest = {
  encode(
    message: GenSeedRequest,
    writer: _m0.Writer = _m0.Writer.create()
  ): _m0.Writer {
    if (message.aezeedPassphrase !== "") {
      writer.uint32(10).string(message.aezeedPassphrase);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GenSeedRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenSeedRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.aezeedPassphrase = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): GenSeedRequest {
    return {
      aezeedPassphrase: isSet(object.aezeedPassphrase)
        ? String(object.aezeedPassphrase)
        : "",
    };
  },

  toJSON(message: GenSeedRequest): unknown {
    const obj: any = {};
    message.aezeedPassphrase !== undefined &&
      (obj.aezeedPassphrase = message.aezeedPassphrase);
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<GenSeedRequest>, I>>(
    object: I
  ): GenSeedRequest {
    const message = createBaseGenSeedRequest();
    message.aezeedPassphrase = object.aezeedPassphrase ?? "";
    return message;
  },
};

function createBaseGenSeedResponse(): GenSeedResponse {
  return { mnemonic: [] };
}

export const GenSeedResponse = {
  encode(
    message: GenSeedResponse,
    writer: _m0.Writer = _m0.Writer.create()
  ): _m0.Writer {
    for (const v of message.mnemonic) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GenSeedResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenSeedResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.mnemonic.push(reader.string());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): GenSeedResponse {
    return {
      mnemonic: Array.isArray(object?.mnemonic)
        ? object.mnemonic.map((e: any) => String(e))
        : [],
    };
  },

  toJSON(message: GenSeedResponse): unknown {
    const obj: any = {};
    if (message.mnemonic) {
      obj.mnemonic = message.mnemonic.map((e) => e);
    } else {
      obj.mnemonic = [];
    }
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<GenSeedResponse>, I>>(
    object: I
  ): GenSeedResponse {
    const message = createBaseGenSeedResponse();
    message.mnemonic = object.mnemonic?.map((e) => e) || [];
    return message;
  },
};

function createBaseRegisterRequest(): RegisterRequest {
  return { mnemonic: [], aezeedPassphrase: "" };
}

export const RegisterRequest = {
  encode(
    message: RegisterRequest,
    writer: _m0.Writer = _m0.Writer.create()
  ): _m0.Writer {
    for (const v of message.mnemonic) {
      writer.uint32(10).string(v!);
    }
    if (message.aezeedPassphrase !== "") {
      writer.uint32(18).string(message.aezeedPassphrase);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RegisterRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegisterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.mnemonic.push(reader.string());
          break;
        case 2:
          message.aezeedPassphrase = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): RegisterRequest {
    return {
      mnemonic: Array.isArray(object?.mnemonic)
        ? object.mnemonic.map((e: any) => String(e))
        : [],
      aezeedPassphrase: isSet(object.aezeedPassphrase)
        ? String(object.aezeedPassphrase)
        : "",
    };
  },

  toJSON(message: RegisterRequest): unknown {
    const obj: any = {};
    if (message.mnemonic) {
      obj.mnemonic = message.mnemonic.map((e) => e);
    } else {
      obj.mnemonic = [];
    }
    message.aezeedPassphrase !== undefined &&
      (obj.aezeedPassphrase = message.aezeedPassphrase);
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<RegisterRequest>, I>>(
    object: I
  ): RegisterRequest {
    const message = createBaseRegisterRequest();
    message.mnemonic = object.mnemonic?.map((e) => e) || [];
    message.aezeedPassphrase = object.aezeedPassphrase ?? "";
    return message;
  },
};

function createBaseRegisterResponse(): RegisterResponse {
  return { accountId: "" };
}

export const RegisterResponse = {
  encode(
    message: RegisterResponse,
    writer: _m0.Writer = _m0.Writer.create()
  ): _m0.Writer {
    if (message.accountId !== "") {
      writer.uint32(10).string(message.accountId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RegisterResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegisterResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.accountId = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): RegisterResponse {
    return {
      accountId: isSet(object.accountId) ? String(object.accountId) : "",
    };
  },

  toJSON(message: RegisterResponse): unknown {
    const obj: any = {};
    message.accountId !== undefined && (obj.accountId = message.accountId);
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<RegisterResponse>, I>>(
    object: I
  ): RegisterResponse {
    const message = createBaseRegisterResponse();
    message.accountId = object.accountId ?? "";
    return message;
  },
};

function createBaseGetInfoRequest(): GetInfoRequest {
  return {};
}

export const GetInfoRequest = {
  encode(
    _: GetInfoRequest,
    writer: _m0.Writer = _m0.Writer.create()
  ): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetInfoRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(_: any): GetInfoRequest {
    return {};
  },

  toJSON(_: GetInfoRequest): unknown {
    const obj: any = {};
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<GetInfoRequest>, I>>(
    _: I
  ): GetInfoRequest {
    const message = createBaseGetInfoRequest();
    return message;
  },
};

function createBaseForceSyncRequest(): ForceSyncRequest {
  return {};
}

export const ForceSyncRequest = {
  encode(
    _: ForceSyncRequest,
    writer: _m0.Writer = _m0.Writer.create()
  ): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ForceSyncRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseForceSyncRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(_: any): ForceSyncRequest {
    return {};
  },

  toJSON(_: ForceSyncRequest): unknown {
    const obj: any = {};
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<ForceSyncRequest>, I>>(
    _: I
  ): ForceSyncRequest {
    const message = createBaseForceSyncRequest();
    return message;
  },
};

function createBaseInfo(): Info {
  return { accountId: "", peerId: "", startTime: undefined };
}

export const Info = {
  encode(message: Info, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.accountId !== "") {
      writer.uint32(10).string(message.accountId);
    }
    if (message.peerId !== "") {
      writer.uint32(18).string(message.peerId);
    }
    if (message.startTime !== undefined) {
      Timestamp.encode(
        toTimestamp(message.startTime),
        writer.uint32(26).fork()
      ).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Info {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.accountId = reader.string();
          break;
        case 2:
          message.peerId = reader.string();
          break;
        case 3:
          message.startTime = fromTimestamp(
            Timestamp.decode(reader, reader.uint32())
          );
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): Info {
    return {
      accountId: isSet(object.accountId) ? String(object.accountId) : "",
      peerId: isSet(object.peerId) ? String(object.peerId) : "",
      startTime: isSet(object.startTime)
        ? fromJsonTimestamp(object.startTime)
        : undefined,
    };
  },

  toJSON(message: Info): unknown {
    const obj: any = {};
    message.accountId !== undefined && (obj.accountId = message.accountId);
    message.peerId !== undefined && (obj.peerId = message.peerId);
    message.startTime !== undefined &&
      (obj.startTime = message.startTime.toISOString());
    return obj;
  },

  fromPartial<I extends Exact<DeepPartial<Info>, I>>(object: I): Info {
    const message = createBaseInfo();
    message.accountId = object.accountId ?? "";
    message.peerId = object.peerId ?? "";
    message.startTime = object.startTime ?? undefined;
    return message;
  },
};

/** Daemon API encapsulates main functionality of the Mintter daemon. */
export interface Daemon {
  /**
   * Generates cryptographic seed that is used to derive Mintter Account Key.
   * It's currenly supposed to be using LND's Aezeed implementation, which solves some
   * of the issues with BIP-39. The seed is encoded as a mnemonic of 24 human-readable words.
   * The seed could be reconstructed given these words and the passphrase.
   *
   * See: https://github.com/lightningnetwork/lnd/tree/master/aezeed.
   */
  genSeed(
    request: DeepPartial<GenSeedRequest>,
    metadata?: grpc.Metadata
  ): Promise<GenSeedResponse>;
  /**
   * After generating the seed, this call is used to commit the seed and
   * create an account binding between the device and account.
   */
  register(
    request: DeepPartial<RegisterRequest>,
    metadata?: grpc.Metadata
  ): Promise<RegisterResponse>;
  /** Get generic information about the running node. */
  getInfo(
    request: DeepPartial<GetInfoRequest>,
    metadata?: grpc.Metadata
  ): Promise<Info>;
  /** Force-trigger periodic background sync of Mintter objects. */
  forceSync(
    request: DeepPartial<ForceSyncRequest>,
    metadata?: grpc.Metadata
  ): Promise<Empty>;
}

export class DaemonClientImpl implements Daemon {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.genSeed = this.genSeed.bind(this);
    this.register = this.register.bind(this);
    this.getInfo = this.getInfo.bind(this);
    this.forceSync = this.forceSync.bind(this);
  }

  genSeed(
    request: DeepPartial<GenSeedRequest>,
    metadata?: grpc.Metadata
  ): Promise<GenSeedResponse> {
    return this.rpc.unary(
      DaemonGenSeedDesc,
      GenSeedRequest.fromPartial(request),
      metadata
    );
  }

  register(
    request: DeepPartial<RegisterRequest>,
    metadata?: grpc.Metadata
  ): Promise<RegisterResponse> {
    return this.rpc.unary(
      DaemonRegisterDesc,
      RegisterRequest.fromPartial(request),
      metadata
    );
  }

  getInfo(
    request: DeepPartial<GetInfoRequest>,
    metadata?: grpc.Metadata
  ): Promise<Info> {
    return this.rpc.unary(
      DaemonGetInfoDesc,
      GetInfoRequest.fromPartial(request),
      metadata
    );
  }

  forceSync(
    request: DeepPartial<ForceSyncRequest>,
    metadata?: grpc.Metadata
  ): Promise<Empty> {
    return this.rpc.unary(
      DaemonForceSyncDesc,
      ForceSyncRequest.fromPartial(request),
      metadata
    );
  }
}

export const DaemonDesc = {
  serviceName: "com.mintter.daemon.v1alpha.Daemon",
};

export const DaemonGenSeedDesc: UnaryMethodDefinitionish = {
  methodName: "GenSeed",
  service: DaemonDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GenSeedRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      return {
        ...GenSeedResponse.decode(data),
        toObject() {
          return this;
        },
      };
    },
  } as any,
};

export const DaemonRegisterDesc: UnaryMethodDefinitionish = {
  methodName: "Register",
  service: DaemonDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return RegisterRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      return {
        ...RegisterResponse.decode(data),
        toObject() {
          return this;
        },
      };
    },
  } as any,
};

export const DaemonGetInfoDesc: UnaryMethodDefinitionish = {
  methodName: "GetInfo",
  service: DaemonDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetInfoRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      return {
        ...Info.decode(data),
        toObject() {
          return this;
        },
      };
    },
  } as any,
};

export const DaemonForceSyncDesc: UnaryMethodDefinitionish = {
  methodName: "ForceSync",
  service: DaemonDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ForceSyncRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      return {
        ...Empty.decode(data),
        toObject() {
          return this;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR
  extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined
  ): Promise<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;

    debug?: boolean;
    metadata?: grpc.Metadata;
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;

      debug?: boolean;
      metadata?: grpc.Metadata;
    }
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata =
      metadata && this.options.metadata
        ? new BrowserHeaders({
            ...this.options?.metadata.headersMap,
            ...metadata?.headersMap,
          })
        : metadata || this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata,
        transport: this.options.transport,
        debug: this.options.debug,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message);
          } else {
            const err = new Error(response.statusMessage) as any;
            err.code = response.status;
            err.metadata = response.trailers;
            reject(err);
          }
        },
      });
    });
  }
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

type DeepPartial<T> = T extends Builtin
  ? T
  : T extends Array<infer U>
  ? Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U>
  ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string }
  ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & {
      $case: T["$case"];
    }
  : T extends {}
  ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & Record<
        Exclude<keyof I, KeysOfUnion<P>>,
        never
      >;

function toTimestamp(date: Date): Timestamp {
  const seconds = date.getTime() / 1_000;
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = t.seconds * 1_000;
  millis += t.nanos / 1_000_000;
  return new Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof Date) {
    return o;
  } else if (typeof o === "string") {
    return new Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
