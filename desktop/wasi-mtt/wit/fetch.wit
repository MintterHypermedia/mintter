// This interface is a replication of the browsers `fetch` API and is designed to let guests make http requests.
// This interface might only be neede temporarily as it becomes redundant once proper socket support is stable in WASI.
//
// All functions in this interface require the extension has the FETCH permission.

use { error } from error

record duration {
    secs: u64,
    nanos: u32,
}

union timeout {
    u64,
    duration,
}

enum response-type {
  json,
  text,
  binary,
}

record fetch-options {
  method: string,
  timeout: option<timeout>,
  headers: option<list<tuple<string, string>>>,
  query: option<list<tuple<string, string>>>,
  response-type: option<response-type>,
  body: option<list<u8>>,
}

type response = u32

/// The main function used to make http requests. This is a blocking operation for the WASM guest, 
/// as it's operation will be suspended until the request resolves.
/// It returns a responde ID that can be used by the other functions in the interface to access properties of the response.
fetch: func(url: string, options: option<fetch-options>) -> result<response, error>

// These functions operate on the response ID returned by `fetch` 
// and mirror roughly the getters exposed by https://developer.mozilla.org/en-US/docs/Web/API/Response

/// The `body` property of the Response is a buffer of the body contents.
body: func(response: response) -> list<u8>

/// The `headers` property of the Response contains the headers associated with the response.
headers: func(response: response) -> list<tuple<string, string>>

/// The `ok` property of the Response contains a Boolean stating whether the response was successful (status in the range 200-299) or not.
ok: func(response: response) -> bool

/// The redirected property of the Response indicates whether or not the response is the result of a request you made which was redirected.
redirected: func(response: response) -> bool

/// The `status` property of the Response contains the HTTP status codes of the response.
///
/// For example, 200 for success, 404 if the resource could not be found.
status: func(response: response) -> u16

/// The `status-text` property of the Response contains the status message corresponding to the HTTP status code in Response status.
///
/// For example, this would be OK for a status code 200, Continue for 100, Not Found for 404.
status-text: func(response: response) -> string