name: Electron Release

on:
  push:
    branches:
      - electron-ci

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: us-east-1

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.current_time.outputs.formattedTime }}
    steps:
      - name: Get current time
        uses: srfrnk/current-time@master
        id: current_time
        with:
          format: YY.M.D
  build-binaries:
    name: Build (${{ matrix.config.os }})
    runs-on: ${{ matrix.config.os }}
    # if: startsWith(github.ref, 'refs/tags/')
    needs: get-version
    strategy:
      matrix:
        config:
          - os: macos-latest
            goarch: amd64
            target: x86_64-apple-darwin
          - os: ubuntu-latest
            goarch: amd64
            target: x86_64-unknown-linux-gnu
          # - os: windows-latest
          #   goarch: amd64
          #   target: x86_64-pc-windows-msvc
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      
      - name: 'Setup Go'
        uses: actions/setup-go@v3
        with:
          go-version: 1.19
      
      - name: 'Install native packages'
        if: matrix.config.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libayatana-appindicator3-dev librsvg2-dev patchelf
          
      - name: Setup cache Ubuntu
        uses: actions/cache@v3
        if: matrix.config.os == 'ubuntu-latest'
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Setup cache Macos
        uses: actions/cache@v3
        if: matrix.config.os == 'macos-latest'
        with:
          path: |
            ~/Library/Caches/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Setup cache Windows
        uses: actions/cache@v3
        if: matrix.config.os == 'windows-latest'
        with:
          path: |
            ~\AppData\Local\go-build
            ~\go\pkg\mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build Backend (Unix)
        if: matrix.config.os != 'windows-latest'
        run: |
          mkdir -p plz-out/bin/backend
          go build -o plz-out/bin/backend/mintterd-${{ matrix.config.target }} ./backend/cmd/mintterd
        env:
          GOARCH: ${{ matrix.config.goarch }}
          CGO_ENABLED: 1
      
      - name: Build Backend (Windows)
        if: matrix.config.os == 'windows-latest'
        run: |
          mkdir -p plz-out/bin/backend
          go build -o plz-out/bin/backend/mintterd-${{ matrix.config.target }}.exe ./backend/cmd/mintterd
        env:
          GOARCH: ${{ matrix.config.goarch }}
          CGO_ENABLED: 1

      

      - name: Import MacOS certs
        if: matrix.config.os == 'macos-latest'
        uses: apple-actions/import-codesign-certs@v2
        with: 
          p12-file-base64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
          p12-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}

      # - name: create AppImage private key file
      #   if: matrix.config.os == 'ubuntu-latest'
      #   run: |
      #     export GPG_TTY=$(tty)
      #     echo "$APPIMAGE_SIGN_PRIVKEY" | gpg --batch --import
      #   env:
      #     APPIMAGE_SIGN_PRIVKEY: '${{ secrets.APPIMAGE_SIGN_PRIVKEY }}'

      # - name: Setup flatpak
      #   if: matrix.config.os == 'ubuntu-latest' && startsWith(github.ref, 'refs/tags/')
      #   run: sudo apt install flatpak flatpak-builder elfutils
        
      - name: Install Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: "yarn"

      - name: Install Frontend Dependencies
        env:
          YARN_ENABLE_IMMUTABLE_INSTALLS: false
        run: |
          yarn set version latest
          yarn
          
      - name: Build App Package
        run: |
          TAMAGUI_TARGET=web yarn build
          TAMAGUI_TARGET=web yarn electron:publish
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: '${{ secrets.APPLE_ID_PASSWORD }}'
          APPLE_TEAM_ID: '${{ secrets.APPLE_TEAM_ID }}'
          
          # WINDOWS_PFX_FILE: '${{ steps.write_file.outputs.filePath }}'
          # WINDOWS_PFX_PASSWORD: '${{ secrets.WINDOWS_PFX_PASSWORD }}'
