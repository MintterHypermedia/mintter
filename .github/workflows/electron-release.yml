name: Electron Release

on:
  push:
    branches:
      - electron-ci

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: us-east-1

jobs:
  get-commits-month:
    runs-on: ubuntu-latest
    outputs:
      commit_count: ${{ steps.commit_count.outputs.commit_count }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Git
        run: git config --global user.name "${GITHUB_ACTOR}" && git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"

      - name: Get Commit Count
        id: commit_count
        run: |
          # Extract the current month and year
          CURRENT_MONTH=$(date -u +"%m")
          CURRENT_YEAR=$(date -u +"%Y")

          # Get commit count using GitHub API
          BRANCH_NAME="electron-ci"  # Replace with the desired branch name
          COMMIT_COUNT=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/commits?sha=${BRANCH_NAME}&since=${CURRENT_YEAR}-${CURRENT_MONTH}-01T00:00:00Z&per_page=300" | \
            jq '. | length')

          echo "commit_count=$COMMIT_COUNT" >> "$GITHUB_OUTPUT"

      - name: Use Commit Count
        run: |
          echo "Commits this month: ${{ steps.commit_count.outputs.commit_count }}"

  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.current_time.outputs.formattedTime }}
    steps:
      - name: Get current time
        uses: srfrnk/current-time@master
        id: current_time
        with:
          format: YY.M.D
  build-binaries:
    name: Build (${{ matrix.config.os }})
    runs-on: ${{ matrix.config.os }}
    # if: startsWith(github.ref, 'refs/tags/')
    needs: get-version
    strategy:
      matrix:
        config:
          - os: macos-latest
            goarch: arm64
            target: aarch64-apple-darwin
          - os: ubuntu-latest
            goarch: amd64
            target: x86_64-unknown-linux-gnu
          # - os: windows-latest
          #   goarch: amd64
          #   target: x86_64-pc-windows-msvc
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - uses: ./.github/actions/ci-setup
        with:
          matrix-os: ${{ matrix.config.os }}
          # matrix-target: ${{ matrix.config.target }}
          # matrix-goarch: ${{ matrix.config.goarch }}
          p12_file_base64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
          p12_password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}


      - name: Build Backend (Unix)
        if: matrix.config.os != 'windows-latest'
        run: |
          mkdir -p plz-out/bin/backend
          go build -o plz-out/bin/backend/mintterd-${{ matrix.config.target }} ./backend/cmd/mintterd
        env:
          GOARCH: ${{ matrix.config.goarch }}
          CGO_ENABLED: 1
      
      - name: Build Backend (Windows)
        if: matrix.config.os == 'windows-latest'
        run: |
          mkdir -p plz-out/bin/backend
          go build -o plz-out/bin/backend/mintterd-${{ matrix.config.target }}.exe ./backend/cmd/mintterd
        env:
          GOARCH: ${{ matrix.config.goarch }}
          CGO_ENABLED: 1

      # - name: create AppImage private key file
      #   if: matrix.config.os == 'ubuntu-latest'
      #   run: |
      #     export GPG_TTY=$(tty)
      #     echo "$APPIMAGE_SIGN_PRIVKEY" | gpg --batch --import
      #   env:
      #     APPIMAGE_SIGN_PRIVKEY: '${{ secrets.APPIMAGE_SIGN_PRIVKEY }}'

      # - name: Setup flatpak
      #   if: matrix.config.os == 'ubuntu-latest' && startsWith(github.ref, 'refs/tags/')
      #   run: sudo apt install flatpak flatpak-builder elfutils
          
      - name: Build App Package
        run: |
          TAMAGUI_TARGET=web yarn build
          TAMAGUI_TARGET=web yarn electron:publish
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: '${{ secrets.APPLE_ID_PASSWORD }}'
          APPLE_TEAM_ID: '${{ secrets.APPLE_TEAM_ID }}'
          TAG_PREFIX: 'desktop-nightly/${{ needs.get-version.outputs.version }}-'
          
          # WINDOWS_PFX_FILE: '${{ steps.write_file.outputs.filePath }}'
          # WINDOWS_PFX_PASSWORD: '${{ secrets.WINDOWS_PFX_PASSWORD }}'
