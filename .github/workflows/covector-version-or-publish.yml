name: version or publish

on:
  push:
    branches:
      - main

jobs:
  version-or-release:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      change: ${{ steps.covector-version.outputs.change }}
      willPublish-mintter: ${{ steps.covector-status.outputs.willPublish-mintter }}
      releaseId: ${{ steps.create_release.outputs.id }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # required for use of git history

      - name: covector status
        uses: JonasKruckenberg/covector/packages/action@patch-1
        id: covector-status
        with:
          command: "status"

      - name: git config
        if: ${{ steps.covector.outputs.status != 'No changes.' }}
        run: |
          git config --global user.name "${{ github.event.pusher.name }}"
          git config --global user.email "${{ github.event.pusher.email }}"

      - name: covector version
        uses: JonasKruckenberg/covector/packages/action@patch-1
        if: ${{ steps.covector-status.outputs.status != 'No changes.' }}
        id: covector-version
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          command: "version"
          createRelease: true

      - name: Create Pull Request With Versions Bumped
        id: cpr
        uses: peter-evans/create-pull-request@v3
        if: ${{ steps.covector-status.outputs.status != 'No changes.' }}
        with:
          title: "Publish New Versions"
          commit-message: "publish new versions"
          labels: "version updates"
          branch: "release"
          body: ${{ steps.covector-version.outputs.change }}

      - name: create release
        if: steps.covector-status.outputs.willPublish-mintter
        id: create_release
        uses: softprops/action-gh-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: mintter-v${{ steps.covector-status.outputs.version-mintter }}
          name: mintter-v${{ steps.covector-status.outputs.version-mintter }}
          body: ""
          draft: true

      - name: debug
        run: |
          echo "willPublish-mintter ${{ steps.covector-status.outputs.willPublish-mintter }}"
          echo "id ${{ steps.create_release.outputs.id }}"
          echo "upload_url ${{ steps.create_release.outputs.upload_url }}"
          echo "url ${{ steps.create_release.outputs.url }}"

  build-binaries:
    needs: version-or-release
    if: needs.version-or-release.outputs.willPublish-mintter
    timeout-minutes: 30
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            target: mintter
          - os: macos-latest
            platform: macos
            target: mintter
          - os: windows-latest
            platform: windows
            target: mintter.exe

    steps:
      - uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: 14

      - name: Install rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - name: Cache cargo dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            packages/app/src-tauri/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('packages/app/src-tauri/Cargo.lock') }}

      - name: Install webkit2gtk (ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y webkit2gtk-4.0

      - name: Install Apple certificate
        if: matrix.os == 'macos-latest'
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate
          echo -n $MACOS_CERTIFICATE | base64 --decode --output $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$MACOS_CERTIFICATE_PWD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          security find-identity -v

          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

      - name: Install app dependencies
        run: yarn

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
        with:
          projectPath: ./frontend/app
          configPath: release.tauri.conf.json
          includeDebug: true
          releaseId: ${{ needs.version-or-release.outputs.releaseId }}

  publish:
    needs: build-binaries
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # required for use of git history

      - name: git config
        run: |
          git config --global user.name "${{ github.event.pusher.name }}"
          git config --global user.email "${{ github.event.pusher.email }}"

      - name: covector publish
        uses: JonasKruckenberg/covector/packages/action@patch-1
        id: covector
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          command: "publish"
          createRelease: true
