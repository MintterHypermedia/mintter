name: Release

on:
  push:
    tags:
      - desktop/*.*.*

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-binaries:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        goarch: [amd64, arm64]
        # don't build for arm64 on linux or windows
        exclude:
          - os: ubuntu-latest
            goarch: arm64
          - os: windows-latest
            goarch: arm64
        include:
          - os: ubuntu-latest
            goarch: amd64
            rust_target: x86_64-unknown-linux-gnu
          - os: macos-latest
            goarch: amd64
            rust_target: x86_64-apple-darwin
          - os: macos-latest
            goarch: arm64
            rust_target: aarch64-apple-darwin
          - os: windows-latest
            goarch: amd64
            rust_target: x86_64-pc-windows-msvc
    steps:
      - uses: actions/checkout@v3
      - name: "Setup Rust"
        uses: actions-rs/toolchain@v1
        with:
          override: true
          profile: minimal
          toolchain: stable
          target: ${{ matrix.rust_target }}
      - uses: Swatinem/rust-cache@v1
        with:
          cache-on-failure: true
      - name: "Setup NodeJS"
        uses: actions/setup-node@v3
        with:
          cache: yarn
          node-version: 16.x
      - name: "Setup Go"
        uses: actions/setup-go@v2
        with:
          go-version: 1.18
      - name: "Install native packages"
        if: "matrix.os == 'ubuntu-latest'"
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf
      - name: "Install JavaScript dependencies"
        run: yarn
      - name: Build Backend (Unix)
        if: "matrix.os != 'windows-latest'"
        run: |
          mkdir -p plz-out/bin/backend
          go build -o plz-out/bin/backend/mintterd-${{ matrix.rust_target }} ./backend/cmd/mintterd
        env:
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 1
      - name: Build Backend (Windows)
        if: "matrix.os == 'windows-latest'"
        run: |
          mkdir -p plz-out/bin/backend
          go build -o plz-out/bin/backend/mintterd-${{ matrix.rust_target }}.exe ./backend/cmd/mintterd
        env:
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 1
      - name: create apple private key file
        if: "matrix.os == 'macos-latest'"
        run: |
          mkdir ./desktop/app/private_keys
          echo "$APPLE_API_PRIVKEY" > ./desktop/app/private_keys/AuthKey_$APPLE_API_KEY.p8
        env:
          APPLE_API_PRIVKEY: "${{ secrets.APPLE_API_PRIVKEY }}"
          APPLE_API_KEY: "${{ secrets.APPLE_API_KEY }}"
      # - name: Check workspace hack
      #   run: |
      #     cargo hakari generate --diff
      #     cargo hakari manage-deps --dry-run
      - uses: JonasKruckenberg/tauri-build@v0.1.2-beta.9
        id: tauri_build
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          ENABLE_CODE_SIGNING: "${{ secrets.APPLE_CERTIFICATE }}"
          APPLE_API_ISSUER: "${{ secrets.APPLE_API_ISSUER }}"
          APPLE_API_KEY: "${{ secrets.APPLE_API_KEY }}"
          APPLE_CERTIFICATE: "${{ secrets.APPLE_CERTIFICATE }}"
          APPLE_CERTIFICATE_PASSWORD: "${{ secrets.APPLE_CERTIFICATE_PASSWORD }}"
          APPLE_SIGNING_IDENTITY: "${{ secrets.APPLE_SIGNING_IDENTITY }}"
          TAURI_KEY_PASSWORD: "${{ secrets.TAURI_KEY_PASSWORD }}"
          TAURI_PRIVATE_KEY: "${{ secrets.TAURI_PRIVATE_KEY }}"
        with:
          configPath: release.tauri.conf.json
          projectPath: ./desktop/app
          target: ${{ matrix.rust_target }}
      - uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: "${{ join(fromJSON(steps.tauri_build.outputs.artifacts), '\n') }}"

  publish-to-github:
    needs: build-binaries
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v3
        id: download
        with:
          name: artifacts
          path: artifacts
      - name: "create release"
        uses: softprops/action-gh-release@master
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        with:
          draft: false
          files: ./artifacts/**/*

  publish-to-aws:
    needs: build-binaries
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v3
        id: download
        with:
          name: artifacts
          path: artifacts
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Upload artifacts to S3
        run: aws s3 sync ./artifacts s3://mintterreleases/ --recursive --delete
