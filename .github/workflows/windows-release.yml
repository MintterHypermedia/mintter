name: Desktop Release

on:
  push:
    branches:
      - windows-build

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: us-east-1

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps: 
      - uses: actions/checkout@v3

      - name: Run Version Script
        id: get-version
        run: |
          echo "version=$(node scripts/get-app-version.js)" >> "$GITHUB_OUTPUT"
  check-release:
    needs: [get-version]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Check Release
        id: check_release
        run: |
          RELEASE_NAME='${{ needs.get-version.outputs.version }}'

          RELEASE_EXISTS=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases" | \
            jq ".[] | select(.tag_name == \"$RELEASE_NAME\")")

          if [ -z "$RELEASE_EXISTS" ]; then
            echo "Release does not exist."
          else
            echo "Release already exists."
            exit 1
          fi
  build-binaries:
    name: Build (${{ matrix.config.os }})
    runs-on: ${{ matrix.config.os }}
    # if: startsWith(github.ref, 'refs/tags/')
    needs: [get-version, check-release]
    strategy:
      matrix:
        config:
          - os: windows-latest
            goarch: amd64
            target: x86_64-pc-windows-msvc
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - uses: ./.github/actions/ci-setup
        with:
          matrix-os: ${{ matrix.config.os }}
          # matrix-target: ${{ matrix.config.target }}
          # matrix-goarch: ${{ matrix.config.goarch }}


      - name: Build Backend (Unix)
        if: matrix.config.os != 'windows-latest'
        run: |
          mkdir -p plz-out/bin/backend
          go build -o plz-out/bin/backend/mintterd-${{ matrix.config.target }} ./backend/cmd/mintterd
        env:
          GOARCH: ${{ matrix.config.goarch }}
          CGO_ENABLED: 1
      
      - name: Build Backend (Windows)
        if: matrix.config.os == 'windows-latest'
        run: |
          mkdir -p plz-out/bin/backend
          go build -o plz-out/bin/backend/mintterd-${{ matrix.config.target }}.exe ./backend/cmd/mintterd
        env:
          GOARCH: ${{ matrix.config.goarch }}
          CGO_ENABLED: 1

      - name: Import MacOS certs
        if: matrix.config.os == 'macos-latest'
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
          p12-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}

      # - name: create AppImage private key file
      #   if: matrix.config.os == 'ubuntu-latest'
      #   run: |
      #     export GPG_TTY=$(tty)
      #     echo "$APPIMAGE_SIGN_PRIVKEY" | gpg --batch --import
      #   env:
      #     APPIMAGE_SIGN_PRIVKEY: '${{ secrets.APPIMAGE_SIGN_PRIVKEY }}'

      # - name: Setup flatpak
      #   if: matrix.config.os == 'ubuntu-latest' && startsWith(github.ref, 'refs/tags/')
      #   run: sudo apt install flatpak flatpak-builder elfutils 
          
      - name: Build App Package (Unix)
        if: matrix.config.os != 'windows-latest'
        run: |
          TAMAGUI_TARGET=web yarn desktop:make
        env:
          APP_VERSION: '${{ needs.get-version.outputs.version }}'
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: '${{ secrets.APPLE_ID_PASSWORD }}'
          APPLE_TEAM_ID: '${{ secrets.APPLE_TEAM_ID }}'

      - name: Build App Package (Win32)
        if: matrix.config.os == 'windows-latest'
        run: |
          $env:TAMAGUI_TARGET="web"
          yarn desktop:make
        env:
          APP_VERSION: '${{ needs.get-version.outputs.version }}'
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          
          # WINDOWS_PFX_FILE: '${{ steps.write_file.outputs.filePath }}'
          # WINDOWS_PFX_PASSWORD: '${{ secrets.WINDOWS_PFX_PASSWORD }}'
      
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: artifacts-${{ matrix.config.target }}
          path: frontend/apps/desktop/out/make/**/*
  
  publish-to-github:
    needs: [get-version, build-binaries]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download amd64 artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
          
      - name: 'create release'
        uses: softprops/action-gh-release@master
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          tag_name: '${{ needs.get-version.outputs.version }}'
          prerelease: false
          generate_release_notes: true
          files: ./artifacts/artifacts-*/**/*
