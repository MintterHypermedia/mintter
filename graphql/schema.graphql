"""
Built-in directive for Go's gqlgen library.
"""
directive @goModel(
  model: String
  models: [String!]
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION

"""
Built-in directive for Go's gqlgen library.
"""
directive @goField(
  forceResolver: Boolean
  name: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

"""
Lightning Network payment request encoded as a string.
Ready to be encoded as a QR code for wallets to scan and pay.
"""
scalar LightningPaymentRequest

"""
Bitcoin amount in sats.
Should be interpreted as a large-enough unsigned integer type.
"""
scalar Satoshis

"""
Top-level queries.
"""
type Query {
  """
  Information about the current user.
  """
  me: Me!
}

"""
Information about the current user.
"""
type Me {
  """
  List configured Lightning wallets.
  """
  wallets: [LightningWallet!] @goField(forceResolver: true)

  """
  Account-wide Lightning addres (lnaddress)
  """
  lnaddress: String @goField(forceResolver: true)
}

"""
Top-level mutations.
"""
type Mutation {
  """
  Configure an LndHub compatible Lightning Wallet, e.g. BlueWallet.
  """
  setupLndHubWallet(input: SetupLndHubWalletInput!): SetupLndHubWalletPayload!

  """
  Set an existing wallet to be the default one. Initially, the first configured wallet
  automatically becomes the default one.
  """
  setDefaultWallet(input: SetDefaultWalletInput!): SetDefaultWalletPayload!

  """
  Update existing wallet.
  """
  updateWallet(input: UpdateWalletInput!): UpdateWalletPayload!

  """
  Delete existing wallet.
  """
  deleteWallet(input: DeleteWalletInput!): DeleteWalletPayload!

  """
  Request an invoice from another user in order to pay them with a separate Lightning Wallet.
  The user from which the invoice is requested must be currently connected, otherwise this call will fail.
  """
  requestInvoice(input: RequestInvoiceInput!): RequestInvoicePayload!

  """
  Pay invoice with a previously configured wallet.
  """
  payInvoice(input: PayInvoiceInput!): PayInvoicePayload!
}

"""
Input to setup LndHub wallet.
"""
input SetupLndHubWalletInput {
  """
  Local name for this wallet.
  """
  name: String!

  """
  Configuration URL with credentials for an LndHub wallet.
  """
  url: String!
}

"""
Response from setting up LndHub wallet.
"""
type SetupLndHubWalletPayload {
  """
  The newly created wallet.
  """
  wallet: LndHubWallet!
}

"""
Input for setting the default wallet.
"""
input SetDefaultWalletInput {
  """
  ID of the wallet to become the default one.
  """
  id: ID!
}

"""
Response after setting default wallet.
"""
type SetDefaultWalletPayload {
  """
  The new default wallet.
  """
  wallet: LightningWallet!
}

"""
Input to update Lightning wallets.
"""
input UpdateWalletInput {
  """
  ID of the wallet to be updated.
  """
  id: ID!

  """
  New name for the wallet.
  """
  name: String!
}

"""
Response with the updated wallet.
"""
type UpdateWalletPayload {
  """
  Updated wallet.
  """
  wallet: LightningWallet!
}

"""
Input to delete a wallet.
"""
input DeleteWalletInput {
  """
  ID of the wallet to be deleted.
  """
  id: ID!
}

"""
Response after deleting a wallet.
"""
type DeleteWalletPayload {
  """
  ID of the deleted wallet.
  """
  id: ID!
}

"""
Input for requesting an invoice.
"""
input RequestInvoiceInput {
  """
  Mintter Account ID we want the invoice from. Can be self.
  """
  accountID: ID!

  """
  Amount in Satoshis the invoice should be created for.
  """
  amountSats: Satoshis!

  """
  Optional description for the invoice.
  """
  memo: String
}

"""
Response with the invoice to pay.
"""
type RequestInvoicePayload {
  """
  Payment request is a string-encoded Lightning Network Payment Request.
  It's ready to be used in a wallet app to pay.
  """
  paymentRequest: LightningPaymentRequest!
}

"""
Input to pay an invoice.
"""
input PayInvoiceInput {
  """
  Previously obtained payment request we want to pay for.
  """
  paymentRequest: LightningPaymentRequest!

  """
  Optional amount in satoshis to pay. In case this is not defined,
  The amount showed in the invoice will be paid. If amountSats is
  provided, then the invoice amount will be override. This will cause
  an error unless both amounts are the same or the invoice amount is 0.
  """
  amountSats: Satoshis

  """
  Optional ID of the wallet to pay with. Otherwise the default one will be used.
  """
  walletID: ID
}

"""
Response after paying an invoice.
"""
type PayInvoicePayload {
  """
  Wallet ID that was used to pay the invoice.
  """
  walletID: ID!
}

"""
Common interface for Lightning wallets. We support different types.
"""
interface LightningWallet {
  """
  Globally unique ID of the wallet. Public key.
  """
  id: ID!

  """
  Local-only name of the wallet. For user's convenience.
  """
  name: String!

  """
  Balance in Satoshis.
  """
  balanceSats: Satoshis!

  """
  If this wallet is the default wallet to send/receive automatic payments
  """
  isDefault: Boolean!
}

"""
Lightning wallet compatible with LndHub.
"""
type LndHubWallet implements LightningWallet {
  """
  Globally unique ID of the wallet. Since this type of wallet doesn't have unique addresses
  we decided to use the cryptographic hash of the credentials URL as an ID.
  """
  id: ID!

  """
  URL of the LndHub server this wallet is connected to.
  """
  apiURL: String!

  """
  Name of the wallet.
  """
  name: String!

  """
  Balance in Satoshis.
  """
  balanceSats: Satoshis!

  """
  If this wallet is the default wallet to send/receive automatic payments
  """
  isDefault: Boolean!
}
