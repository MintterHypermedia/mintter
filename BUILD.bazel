load("//build:rules.bzl", "executable", "local_action")

exports_files([
    "go.mod",
    "go.sum",
    "WORKSPACE",
    "tsconfig.json",
    "tsconfig.base.json",
])

local_action(
    name = "yarn",
    srcs = [
        "package.json",
        "yarn.lock",
    ],
    outs = ["node_modules/.yarn-integrity"],
    cmd = """
yarn install
ln -s $(pwd)/node_modules/.yarn-integrity $TARGET_OUT_DIR/node_modules/.yarn-integrity
""",
    visibility = ["//frontend:__subpackages__"],
)

filegroup(
    name = "go_sources",
    srcs = [
        "go.mod",
        "go.sum",
    ] + glob(
        ["backend/**/*.go"],
        exclude = ["**/*_test.go"],
    ),
)

config_setting(
    name = "darwin_amd64",
    constraint_values = [
        "@platforms//cpu:x86_64",
        "@platforms//os:macos",
    ],
)

config_setting(
    name = "darwin_arm64",
    constraint_values = [
        "@platforms//cpu:aarch64",
        "@platforms//os:macos",
    ],
)

config_setting(
    name = "linux_amd64",
    constraint_values = [
        "@platforms//cpu:x86_64",
        "@platforms//os:linux",
    ],
)

config_setting(
    name = "linux_arm64",
    constraint_values = [
        "@platforms//cpu:aarch64",
        "@platforms//os:linux",
    ],
)

config_setting(
    name = "windows_amd64",
    constraint_values = [
        "@platforms//cpu:x86_64",
        "@platforms//os:windows",
    ],
)

TARGET_PLATFORMS = [
    ("darwin", "amd64"),
    ("darwin", "arm64"),
    ("linux", "amd64"),
    ("linux", "arm64"),
    ("windows", "amd64"),
]

LLVM_TRIPLES = {
    "darwin/amd64": "x86_64-apple-darwin",
    "darwin/arm64": "aarch64-apple-darwin",
    "windows/amd64": "x86_64-pc-windows-msvc",
    "linux/amd64": "x86_64-unknown-linux-gnu",
    "linux/arm64": "aarch64-unknown-linux-gnu",
}

[
    executable(
        name = "mintterd_{}_{}".format(os, arch),
        srcs = [":go_sources"],
        out = "mintterd-{}".format(LLVM_TRIPLES[os + "/" + arch]),
        cmd = """
export GOOS={os}
export GOARCH={arch}
export CGO_ENABLED="0"
go build -o $TARGET_OUT_DIR/mintterd-{triple} ./backend/cmd/mintterd
""".format(
            os = os,
            arch = arch,
            triple = LLVM_TRIPLES[os + "/" + arch],
        ),
        tags = ["manual"],
        visibility = ["//visibility:public"],
        deps = [
            "//proto:go",
        ],
    )
    for os, arch in TARGET_PLATFORMS
]

alias(
    name = "mintterd",
    actual = select({
        ":darwin_amd64": ":mintterd_darwin_amd64",
        ":linux_amd64": ":mintterd_linux_amd64",
        ":windows_amd64": ":mintterd_windows_amd64",
        ":darwin_arm64": ":mintterd_darwin_arm64",
    }),
    visibility = ["//visibility:public"],
)

filegroup(
    name = "cross_compile",
    srcs = ["mintterd_{}_{}".format(os, arch) for os, arch in TARGET_PLATFORMS],
    tags = ["manual"],
)
