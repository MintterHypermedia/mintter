// source: daemon/v1alpha/daemon.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.com.mintter.daemon.v1alpha.DialPeerRequest', null, global);
goog.exportSymbol('proto.com.mintter.daemon.v1alpha.DialPeerResponse', null, global);
goog.exportSymbol('proto.com.mintter.daemon.v1alpha.GenSeedRequest', null, global);
goog.exportSymbol('proto.com.mintter.daemon.v1alpha.GenSeedResponse', null, global);
goog.exportSymbol('proto.com.mintter.daemon.v1alpha.RegisterRequest', null, global);
goog.exportSymbol('proto.com.mintter.daemon.v1alpha.RegisterResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.mintter.daemon.v1alpha.GenSeedRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.mintter.daemon.v1alpha.GenSeedRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.mintter.daemon.v1alpha.GenSeedRequest.displayName = 'proto.com.mintter.daemon.v1alpha.GenSeedRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.mintter.daemon.v1alpha.GenSeedResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.mintter.daemon.v1alpha.GenSeedResponse.repeatedFields_, null);
};
goog.inherits(proto.com.mintter.daemon.v1alpha.GenSeedResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.mintter.daemon.v1alpha.GenSeedResponse.displayName = 'proto.com.mintter.daemon.v1alpha.GenSeedResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.mintter.daemon.v1alpha.RegisterRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.mintter.daemon.v1alpha.RegisterRequest.repeatedFields_, null);
};
goog.inherits(proto.com.mintter.daemon.v1alpha.RegisterRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.mintter.daemon.v1alpha.RegisterRequest.displayName = 'proto.com.mintter.daemon.v1alpha.RegisterRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.mintter.daemon.v1alpha.RegisterResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.mintter.daemon.v1alpha.RegisterResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.mintter.daemon.v1alpha.RegisterResponse.displayName = 'proto.com.mintter.daemon.v1alpha.RegisterResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.mintter.daemon.v1alpha.DialPeerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.mintter.daemon.v1alpha.DialPeerRequest.repeatedFields_, null);
};
goog.inherits(proto.com.mintter.daemon.v1alpha.DialPeerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.mintter.daemon.v1alpha.DialPeerRequest.displayName = 'proto.com.mintter.daemon.v1alpha.DialPeerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.mintter.daemon.v1alpha.DialPeerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.mintter.daemon.v1alpha.DialPeerResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.mintter.daemon.v1alpha.DialPeerResponse.displayName = 'proto.com.mintter.daemon.v1alpha.DialPeerResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.mintter.daemon.v1alpha.GenSeedRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.com.mintter.daemon.v1alpha.GenSeedRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.mintter.daemon.v1alpha.GenSeedRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.mintter.daemon.v1alpha.GenSeedRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    aezeedPassphrase: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.mintter.daemon.v1alpha.GenSeedRequest}
 */
proto.com.mintter.daemon.v1alpha.GenSeedRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.mintter.daemon.v1alpha.GenSeedRequest;
  return proto.com.mintter.daemon.v1alpha.GenSeedRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.mintter.daemon.v1alpha.GenSeedRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.mintter.daemon.v1alpha.GenSeedRequest}
 */
proto.com.mintter.daemon.v1alpha.GenSeedRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAezeedPassphrase(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.mintter.daemon.v1alpha.GenSeedRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.mintter.daemon.v1alpha.GenSeedRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.mintter.daemon.v1alpha.GenSeedRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.mintter.daemon.v1alpha.GenSeedRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAezeedPassphrase();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string aezeed_passphrase = 1;
 * @return {string}
 */
proto.com.mintter.daemon.v1alpha.GenSeedRequest.prototype.getAezeedPassphrase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.mintter.daemon.v1alpha.GenSeedRequest} returns this
 */
proto.com.mintter.daemon.v1alpha.GenSeedRequest.prototype.setAezeedPassphrase = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.mintter.daemon.v1alpha.GenSeedResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.mintter.daemon.v1alpha.GenSeedResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.com.mintter.daemon.v1alpha.GenSeedResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.mintter.daemon.v1alpha.GenSeedResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.mintter.daemon.v1alpha.GenSeedResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    mnemonicList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.mintter.daemon.v1alpha.GenSeedResponse}
 */
proto.com.mintter.daemon.v1alpha.GenSeedResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.mintter.daemon.v1alpha.GenSeedResponse;
  return proto.com.mintter.daemon.v1alpha.GenSeedResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.mintter.daemon.v1alpha.GenSeedResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.mintter.daemon.v1alpha.GenSeedResponse}
 */
proto.com.mintter.daemon.v1alpha.GenSeedResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addMnemonic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.mintter.daemon.v1alpha.GenSeedResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.mintter.daemon.v1alpha.GenSeedResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.mintter.daemon.v1alpha.GenSeedResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.mintter.daemon.v1alpha.GenSeedResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMnemonicList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string mnemonic = 1;
 * @return {!Array<string>}
 */
proto.com.mintter.daemon.v1alpha.GenSeedResponse.prototype.getMnemonicList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.com.mintter.daemon.v1alpha.GenSeedResponse} returns this
 */
proto.com.mintter.daemon.v1alpha.GenSeedResponse.prototype.setMnemonicList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.com.mintter.daemon.v1alpha.GenSeedResponse} returns this
 */
proto.com.mintter.daemon.v1alpha.GenSeedResponse.prototype.addMnemonic = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.com.mintter.daemon.v1alpha.GenSeedResponse} returns this
 */
proto.com.mintter.daemon.v1alpha.GenSeedResponse.prototype.clearMnemonicList = function() {
  return this.setMnemonicList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.mintter.daemon.v1alpha.RegisterRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.mintter.daemon.v1alpha.RegisterRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.com.mintter.daemon.v1alpha.RegisterRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.mintter.daemon.v1alpha.RegisterRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.mintter.daemon.v1alpha.RegisterRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    mnemonicList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    aezeedPassphrase: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.mintter.daemon.v1alpha.RegisterRequest}
 */
proto.com.mintter.daemon.v1alpha.RegisterRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.mintter.daemon.v1alpha.RegisterRequest;
  return proto.com.mintter.daemon.v1alpha.RegisterRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.mintter.daemon.v1alpha.RegisterRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.mintter.daemon.v1alpha.RegisterRequest}
 */
proto.com.mintter.daemon.v1alpha.RegisterRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addMnemonic(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAezeedPassphrase(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.mintter.daemon.v1alpha.RegisterRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.mintter.daemon.v1alpha.RegisterRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.mintter.daemon.v1alpha.RegisterRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.mintter.daemon.v1alpha.RegisterRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMnemonicList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getAezeedPassphrase();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated string mnemonic = 1;
 * @return {!Array<string>}
 */
proto.com.mintter.daemon.v1alpha.RegisterRequest.prototype.getMnemonicList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.com.mintter.daemon.v1alpha.RegisterRequest} returns this
 */
proto.com.mintter.daemon.v1alpha.RegisterRequest.prototype.setMnemonicList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.com.mintter.daemon.v1alpha.RegisterRequest} returns this
 */
proto.com.mintter.daemon.v1alpha.RegisterRequest.prototype.addMnemonic = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.com.mintter.daemon.v1alpha.RegisterRequest} returns this
 */
proto.com.mintter.daemon.v1alpha.RegisterRequest.prototype.clearMnemonicList = function() {
  return this.setMnemonicList([]);
};


/**
 * optional string aezeed_passphrase = 2;
 * @return {string}
 */
proto.com.mintter.daemon.v1alpha.RegisterRequest.prototype.getAezeedPassphrase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.mintter.daemon.v1alpha.RegisterRequest} returns this
 */
proto.com.mintter.daemon.v1alpha.RegisterRequest.prototype.setAezeedPassphrase = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.mintter.daemon.v1alpha.RegisterResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.com.mintter.daemon.v1alpha.RegisterResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.mintter.daemon.v1alpha.RegisterResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.mintter.daemon.v1alpha.RegisterResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.mintter.daemon.v1alpha.RegisterResponse}
 */
proto.com.mintter.daemon.v1alpha.RegisterResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.mintter.daemon.v1alpha.RegisterResponse;
  return proto.com.mintter.daemon.v1alpha.RegisterResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.mintter.daemon.v1alpha.RegisterResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.mintter.daemon.v1alpha.RegisterResponse}
 */
proto.com.mintter.daemon.v1alpha.RegisterResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.mintter.daemon.v1alpha.RegisterResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.mintter.daemon.v1alpha.RegisterResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.mintter.daemon.v1alpha.RegisterResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.mintter.daemon.v1alpha.RegisterResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string account_id = 1;
 * @return {string}
 */
proto.com.mintter.daemon.v1alpha.RegisterResponse.prototype.getAccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.mintter.daemon.v1alpha.RegisterResponse} returns this
 */
proto.com.mintter.daemon.v1alpha.RegisterResponse.prototype.setAccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.mintter.daemon.v1alpha.DialPeerRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.mintter.daemon.v1alpha.DialPeerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.com.mintter.daemon.v1alpha.DialPeerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.mintter.daemon.v1alpha.DialPeerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.mintter.daemon.v1alpha.DialPeerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    addrsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.mintter.daemon.v1alpha.DialPeerRequest}
 */
proto.com.mintter.daemon.v1alpha.DialPeerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.mintter.daemon.v1alpha.DialPeerRequest;
  return proto.com.mintter.daemon.v1alpha.DialPeerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.mintter.daemon.v1alpha.DialPeerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.mintter.daemon.v1alpha.DialPeerRequest}
 */
proto.com.mintter.daemon.v1alpha.DialPeerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addAddrs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.mintter.daemon.v1alpha.DialPeerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.mintter.daemon.v1alpha.DialPeerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.mintter.daemon.v1alpha.DialPeerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.mintter.daemon.v1alpha.DialPeerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddrsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string addrs = 1;
 * @return {!Array<string>}
 */
proto.com.mintter.daemon.v1alpha.DialPeerRequest.prototype.getAddrsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.com.mintter.daemon.v1alpha.DialPeerRequest} returns this
 */
proto.com.mintter.daemon.v1alpha.DialPeerRequest.prototype.setAddrsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.com.mintter.daemon.v1alpha.DialPeerRequest} returns this
 */
proto.com.mintter.daemon.v1alpha.DialPeerRequest.prototype.addAddrs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.com.mintter.daemon.v1alpha.DialPeerRequest} returns this
 */
proto.com.mintter.daemon.v1alpha.DialPeerRequest.prototype.clearAddrsList = function() {
  return this.setAddrsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.mintter.daemon.v1alpha.DialPeerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.com.mintter.daemon.v1alpha.DialPeerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.mintter.daemon.v1alpha.DialPeerResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.mintter.daemon.v1alpha.DialPeerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.mintter.daemon.v1alpha.DialPeerResponse}
 */
proto.com.mintter.daemon.v1alpha.DialPeerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.mintter.daemon.v1alpha.DialPeerResponse;
  return proto.com.mintter.daemon.v1alpha.DialPeerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.mintter.daemon.v1alpha.DialPeerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.mintter.daemon.v1alpha.DialPeerResponse}
 */
proto.com.mintter.daemon.v1alpha.DialPeerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.mintter.daemon.v1alpha.DialPeerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.mintter.daemon.v1alpha.DialPeerResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.mintter.daemon.v1alpha.DialPeerResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.mintter.daemon.v1alpha.DialPeerResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.com.mintter.daemon.v1alpha);
