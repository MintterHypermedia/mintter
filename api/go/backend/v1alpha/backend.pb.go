// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.4
// source: backend/v1alpha/backend.proto

package backend

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GenSeedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Passphrase that will be used to encipher the seed.
	AezeedPassphrase string `protobuf:"bytes,1,opt,name=aezeed_passphrase,json=aezeedPassphrase,proto3" json:"aezeed_passphrase,omitempty"`
}

func (x *GenSeedRequest) Reset() {
	*x = GenSeedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha_backend_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenSeedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenSeedRequest) ProtoMessage() {}

func (x *GenSeedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha_backend_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenSeedRequest.ProtoReflect.Descriptor instead.
func (*GenSeedRequest) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha_backend_proto_rawDescGZIP(), []int{0}
}

func (x *GenSeedRequest) GetAezeedPassphrase() string {
	if x != nil {
		return x.AezeedPassphrase
	}
	return ""
}

type GenSeedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of human-friendly words that can be used to backup the seed. These
	// words must be stored in a secret place by the user.
	Mnemonic []string `protobuf:"bytes,1,rep,name=mnemonic,proto3" json:"mnemonic,omitempty"`
}

func (x *GenSeedResponse) Reset() {
	*x = GenSeedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha_backend_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenSeedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenSeedResponse) ProtoMessage() {}

func (x *GenSeedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha_backend_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenSeedResponse.ProtoReflect.Descriptor instead.
func (*GenSeedResponse) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha_backend_proto_rawDescGZIP(), []int{1}
}

func (x *GenSeedResponse) GetMnemonic() []string {
	if x != nil {
		return x.Mnemonic
	}
	return nil
}

type BindAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mnemonic         []string `protobuf:"bytes,1,rep,name=mnemonic,proto3" json:"mnemonic,omitempty"`
	AezeedPassphrase string   `protobuf:"bytes,2,opt,name=aezeed_passphrase,json=aezeedPassphrase,proto3" json:"aezeed_passphrase,omitempty"`
}

func (x *BindAccountRequest) Reset() {
	*x = BindAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha_backend_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindAccountRequest) ProtoMessage() {}

func (x *BindAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha_backend_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindAccountRequest.ProtoReflect.Descriptor instead.
func (*BindAccountRequest) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha_backend_proto_rawDescGZIP(), []int{2}
}

func (x *BindAccountRequest) GetMnemonic() []string {
	if x != nil {
		return x.Mnemonic
	}
	return nil
}

func (x *BindAccountRequest) GetAezeedPassphrase() string {
	if x != nil {
		return x.AezeedPassphrase
	}
	return ""
}

type BindAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *BindAccountResponse) Reset() {
	*x = BindAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha_backend_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindAccountResponse) ProtoMessage() {}

func (x *BindAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha_backend_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindAccountResponse.ProtoReflect.Descriptor instead.
func (*BindAccountResponse) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha_backend_proto_rawDescGZIP(), []int{3}
}

func (x *BindAccountResponse) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type DialPeerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of multiaddrs for the same peer ID to attempt p2p connection.
	// For example `/ip4/10.0.0.1/tcp/55000/p2p/QmDeadBeef`.
	Addrs []string `protobuf:"bytes,1,rep,name=addrs,proto3" json:"addrs,omitempty"`
}

func (x *DialPeerRequest) Reset() {
	*x = DialPeerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha_backend_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DialPeerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DialPeerRequest) ProtoMessage() {}

func (x *DialPeerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha_backend_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DialPeerRequest.ProtoReflect.Descriptor instead.
func (*DialPeerRequest) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha_backend_proto_rawDescGZIP(), []int{4}
}

func (x *DialPeerRequest) GetAddrs() []string {
	if x != nil {
		return x.Addrs
	}
	return nil
}

type DialPeerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DialPeerResponse) Reset() {
	*x = DialPeerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_v1alpha_backend_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DialPeerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DialPeerResponse) ProtoMessage() {}

func (x *DialPeerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_v1alpha_backend_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DialPeerResponse.ProtoReflect.Descriptor instead.
func (*DialPeerResponse) Descriptor() ([]byte, []int) {
	return file_backend_v1alpha_backend_proto_rawDescGZIP(), []int{5}
}

var File_backend_v1alpha_backend_proto protoreflect.FileDescriptor

var file_backend_v1alpha_backend_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x69, 0x6e, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x22, 0x3d, 0x0a, 0x0e,
	0x47, 0x65, 0x6e, 0x53, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x11, 0x61, 0x65, 0x7a, 0x65, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72,
	0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x65, 0x7a, 0x65, 0x65,
	0x64, 0x50, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x22, 0x2d, 0x0a, 0x0f, 0x47,
	0x65, 0x6e, 0x53, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x22, 0x5d, 0x0a, 0x12, 0x42, 0x69,
	0x6e, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x12, 0x2b, 0x0a, 0x11,
	0x61, 0x65, 0x7a, 0x65, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x65, 0x7a, 0x65, 0x65, 0x64, 0x50,
	0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x22, 0x34, 0x0a, 0x13, 0x42, 0x69, 0x6e,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0x27, 0x0a, 0x0f, 0x44, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x64, 0x64, 0x72, 0x73, 0x22, 0x12, 0x0a, 0x10, 0x44, 0x69, 0x61, 0x6c,
	0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xca, 0x02, 0x0a,
	0x07, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x64, 0x0a, 0x07, 0x47, 0x65, 0x6e, 0x53,
	0x65, 0x65, 0x64, 0x12, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x69, 0x6e, 0x74, 0x74, 0x65,
	0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x47, 0x65, 0x6e, 0x53, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x69, 0x6e, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47,
	0x65, 0x6e, 0x53, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70,
	0x0a, 0x0b, 0x42, 0x69, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x69, 0x6e, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x42, 0x69, 0x6e, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x69, 0x6e, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x42, 0x69, 0x6e,
	0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x67, 0x0a, 0x08, 0x44, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x65, 0x72, 0x12, 0x2c, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6d, 0x69, 0x6e, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x61, 0x6c, 0x50,
	0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x69, 0x6e, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x28, 0x5a, 0x26, 0x6d, 0x69, 0x6e,
	0x74, 0x74, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x3b, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_backend_v1alpha_backend_proto_rawDescOnce sync.Once
	file_backend_v1alpha_backend_proto_rawDescData = file_backend_v1alpha_backend_proto_rawDesc
)

func file_backend_v1alpha_backend_proto_rawDescGZIP() []byte {
	file_backend_v1alpha_backend_proto_rawDescOnce.Do(func() {
		file_backend_v1alpha_backend_proto_rawDescData = protoimpl.X.CompressGZIP(file_backend_v1alpha_backend_proto_rawDescData)
	})
	return file_backend_v1alpha_backend_proto_rawDescData
}

var file_backend_v1alpha_backend_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_backend_v1alpha_backend_proto_goTypes = []interface{}{
	(*GenSeedRequest)(nil),      // 0: com.mintter.backend.v1alpha.GenSeedRequest
	(*GenSeedResponse)(nil),     // 1: com.mintter.backend.v1alpha.GenSeedResponse
	(*BindAccountRequest)(nil),  // 2: com.mintter.backend.v1alpha.BindAccountRequest
	(*BindAccountResponse)(nil), // 3: com.mintter.backend.v1alpha.BindAccountResponse
	(*DialPeerRequest)(nil),     // 4: com.mintter.backend.v1alpha.DialPeerRequest
	(*DialPeerResponse)(nil),    // 5: com.mintter.backend.v1alpha.DialPeerResponse
}
var file_backend_v1alpha_backend_proto_depIdxs = []int32{
	0, // 0: com.mintter.backend.v1alpha.Backend.GenSeed:input_type -> com.mintter.backend.v1alpha.GenSeedRequest
	2, // 1: com.mintter.backend.v1alpha.Backend.BindAccount:input_type -> com.mintter.backend.v1alpha.BindAccountRequest
	4, // 2: com.mintter.backend.v1alpha.Backend.DialPeer:input_type -> com.mintter.backend.v1alpha.DialPeerRequest
	1, // 3: com.mintter.backend.v1alpha.Backend.GenSeed:output_type -> com.mintter.backend.v1alpha.GenSeedResponse
	3, // 4: com.mintter.backend.v1alpha.Backend.BindAccount:output_type -> com.mintter.backend.v1alpha.BindAccountResponse
	5, // 5: com.mintter.backend.v1alpha.Backend.DialPeer:output_type -> com.mintter.backend.v1alpha.DialPeerResponse
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_backend_v1alpha_backend_proto_init() }
func file_backend_v1alpha_backend_proto_init() {
	if File_backend_v1alpha_backend_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_backend_v1alpha_backend_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenSeedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha_backend_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenSeedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha_backend_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha_backend_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha_backend_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DialPeerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_v1alpha_backend_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DialPeerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_backend_v1alpha_backend_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_backend_v1alpha_backend_proto_goTypes,
		DependencyIndexes: file_backend_v1alpha_backend_proto_depIdxs,
		MessageInfos:      file_backend_v1alpha_backend_proto_msgTypes,
	}.Build()
	File_backend_v1alpha_backend_proto = out.File
	file_backend_v1alpha_backend_proto_rawDesc = nil
	file_backend_v1alpha_backend_proto_goTypes = nil
	file_backend_v1alpha_backend_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BackendClient is the client API for Backend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BackendClient interface {
	// Generates cryptographic seed that is used to derive Mintter Account Key.
	// It's currenly supposed to be using LND's Aezeed implementation, which solves some
	// of the issues with BIP-39. The seed is encoded as a mnemonic of 24 human-readable words.
	// The seed could be reconstructed given these words and the passphrase.
	//
	// See: https://github.com/lightningnetwork/lnd/tree/master/aezeed.
	GenSeed(ctx context.Context, in *GenSeedRequest, opts ...grpc.CallOption) (*GenSeedResponse, error)
	// After generating the seed, this call is used to commit the seed and
	// create an account binding between the device/peer and previously created account.
	BindAccount(ctx context.Context, in *BindAccountRequest, opts ...grpc.CallOption) (*BindAccountResponse, error)
	DialPeer(ctx context.Context, in *DialPeerRequest, opts ...grpc.CallOption) (*DialPeerResponse, error)
}

type backendClient struct {
	cc grpc.ClientConnInterface
}

func NewBackendClient(cc grpc.ClientConnInterface) BackendClient {
	return &backendClient{cc}
}

func (c *backendClient) GenSeed(ctx context.Context, in *GenSeedRequest, opts ...grpc.CallOption) (*GenSeedResponse, error) {
	out := new(GenSeedResponse)
	err := c.cc.Invoke(ctx, "/com.mintter.backend.v1alpha.Backend/GenSeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) BindAccount(ctx context.Context, in *BindAccountRequest, opts ...grpc.CallOption) (*BindAccountResponse, error) {
	out := new(BindAccountResponse)
	err := c.cc.Invoke(ctx, "/com.mintter.backend.v1alpha.Backend/BindAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) DialPeer(ctx context.Context, in *DialPeerRequest, opts ...grpc.CallOption) (*DialPeerResponse, error) {
	out := new(DialPeerResponse)
	err := c.cc.Invoke(ctx, "/com.mintter.backend.v1alpha.Backend/DialPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackendServer is the server API for Backend service.
type BackendServer interface {
	// Generates cryptographic seed that is used to derive Mintter Account Key.
	// It's currenly supposed to be using LND's Aezeed implementation, which solves some
	// of the issues with BIP-39. The seed is encoded as a mnemonic of 24 human-readable words.
	// The seed could be reconstructed given these words and the passphrase.
	//
	// See: https://github.com/lightningnetwork/lnd/tree/master/aezeed.
	GenSeed(context.Context, *GenSeedRequest) (*GenSeedResponse, error)
	// After generating the seed, this call is used to commit the seed and
	// create an account binding between the device/peer and previously created account.
	BindAccount(context.Context, *BindAccountRequest) (*BindAccountResponse, error)
	DialPeer(context.Context, *DialPeerRequest) (*DialPeerResponse, error)
}

// UnimplementedBackendServer can be embedded to have forward compatible implementations.
type UnimplementedBackendServer struct {
}

func (*UnimplementedBackendServer) GenSeed(context.Context, *GenSeedRequest) (*GenSeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenSeed not implemented")
}
func (*UnimplementedBackendServer) BindAccount(context.Context, *BindAccountRequest) (*BindAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindAccount not implemented")
}
func (*UnimplementedBackendServer) DialPeer(context.Context, *DialPeerRequest) (*DialPeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialPeer not implemented")
}

func RegisterBackendServer(s *grpc.Server, srv BackendServer) {
	s.RegisterService(&_Backend_serviceDesc, srv)
}

func _Backend_GenSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenSeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).GenSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.backend.v1alpha.Backend/GenSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).GenSeed(ctx, req.(*GenSeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_BindAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).BindAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.backend.v1alpha.Backend/BindAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).BindAccount(ctx, req.(*BindAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_DialPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DialPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).DialPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.backend.v1alpha.Backend/DialPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).DialPeer(ctx, req.(*DialPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Backend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.mintter.backend.v1alpha.Backend",
	HandlerType: (*BackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenSeed",
			Handler:    _Backend_GenSeed_Handler,
		},
		{
			MethodName: "BindAccount",
			Handler:    _Backend_BindAccount_Handler,
		},
		{
			MethodName: "DialPeer",
			Handler:    _Backend_DialPeer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend/v1alpha/backend.proto",
}
