/* eslint-disable */
import { util, configure, Writer, Reader } from "protobufjs/minimal";
import * as Long from "long";
import { grpc } from "@improbable-eng/grpc-web";
import { BrowserHeaders } from "browser-headers";

export const protobufPackage = "com.mintter";

export enum ConnectionStatus {
  /** NOT_CONNECTED - No connection and no extra information. */
  NOT_CONNECTED = 0,
  /** CONNECTED - Has an open, live connection to a peer. */
  CONNECTED = 1,
  /** CAN_CONNECT - Was recently connected to a peer, terminated gracefully. */
  CAN_CONNECT = 2,
  /** CANNOT_CONNECT - Recently attempted to connect, but failed. */
  CANNOT_CONNECT = 3,
  UNRECOGNIZED = -1,
}

export function connectionStatusFromJSON(object: any): ConnectionStatus {
  switch (object) {
    case 0:
    case "NOT_CONNECTED":
      return ConnectionStatus.NOT_CONNECTED;
    case 1:
    case "CONNECTED":
      return ConnectionStatus.CONNECTED;
    case 2:
    case "CAN_CONNECT":
      return ConnectionStatus.CAN_CONNECT;
    case 3:
    case "CANNOT_CONNECT":
      return ConnectionStatus.CANNOT_CONNECT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ConnectionStatus.UNRECOGNIZED;
  }
}

export function connectionStatusToJSON(object: ConnectionStatus): string {
  switch (object) {
    case ConnectionStatus.NOT_CONNECTED:
      return "NOT_CONNECTED";
    case ConnectionStatus.CONNECTED:
      return "CONNECTED";
    case ConnectionStatus.CAN_CONNECT:
      return "CAN_CONNECT";
    case ConnectionStatus.CANNOT_CONNECT:
      return "CANNOT_CONNECT";
    default:
      return "UNKNOWN";
  }
}

export interface GenSeedRequest {
  /** Passphrase that will be used to encipher the seed. */
  aezeedPassphrase: Uint8Array;
}

export interface GenSeedResponse {
  /**
   * The list of human-friendly words that can be used to backup the seed. These
   * words must be stored in a secret place by the user.
   */
  mnemonic: string[];
}

export interface InitProfileRequest {
  /** This is the password to encrypt the wallet data on-disk. */
  walletPassword: Uint8Array;
  /** Mnemonic words generated by GenSeed call previous. Or existing aezeed seed. */
  mnemonic: string[];
  /** Optional passphrase that was used to generate the seed. */
  aezeedPassphrase: Uint8Array;
}

export interface InitProfileResponse {}

export interface UpdateProfileRequest {
  /** Profile data to be updated. */
  profile: Profile | undefined;
}

export interface UpdateProfileResponse {
  /** Profile data after update. */
  profile: Profile | undefined;
}

export interface GetProfileRequest {
  /** Optional. Profile ID to retrieve. If empty - your own profile will return. */
  profileId: string;
}

export interface GetProfileResponse {
  /** Retrieved profile data. */
  profile: Profile | undefined;
  /** Configuration parameters that are set for this node. */
  config: Config | undefined;
}

export interface ListProfilesRequest {
  pageSize: number;
  pageToken: string;
}

export interface ListProfilesResponse {
  profiles: Profile[];
  nextPageToken: string;
}

export interface ListSuggestedProfilesRequest {
  pageSize: number;
  pageToken: string;
}

export interface ListSuggestedProfilesResponse {
  profiles: SuggestedProfile[];
  nextPageToken: string;
}

export interface GetProfileAddrsRequest {}

export interface GetProfileAddrsResponse {
  /** List of multiaddrs this node can be connected at. */
  addrs: string[];
}

export interface ConnectToPeerRequest {
  /**
   * A list of multiaddrs for the same peer ID to attempt p2p connection.
   * For example `/ip4/10.0.0.1/tcp/55000/p2p/QmDeadBeef`.
   */
  addrs: string[];
}

export interface ConnectToPeerResponse {}

export interface Profile {
  /** Libp2p peer ID. Generated by the server and can't be updated. */
  peerId: string;
  /** Mintter account ID. */
  accountId: string;
  /** Readable username or alias. Doesn't have to be unique. */
  username: string;
  /** Optional. Real email that could be publicly shared. */
  email: string;
  /** Optional. Free-form bio. Text only. */
  bio: string;
  /**
   * Output only. Connection status for the given peer. Not useful when the
   * profile is the one of our own node.
   */
  connectionStatus: ConnectionStatus;
}

export interface SuggestedProfile {
  profile: Profile | undefined;
  addrs: string[];
}

export interface Config {
  /** The URI of the primary logo image. */
  logoUri: string;
  /** The URI of the home page. */
  homePageUri: string;
}

const baseGenSeedRequest: object = {};

export const GenSeedRequest = {
  encode(message: GenSeedRequest, writer: Writer = Writer.create()): Writer {
    if (message.aezeedPassphrase.length !== 0) {
      writer.uint32(10).bytes(message.aezeedPassphrase);
    }
    return writer;
  },

  decode(input: Reader | Uint8Array, length?: number): GenSeedRequest {
    const reader = input instanceof Reader ? input : new Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = { ...baseGenSeedRequest } as GenSeedRequest;
    message.aezeedPassphrase = new Uint8Array();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.aezeedPassphrase = reader.bytes();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): GenSeedRequest {
    const message = { ...baseGenSeedRequest } as GenSeedRequest;
    message.aezeedPassphrase = new Uint8Array();
    if (
      object.aezeedPassphrase !== undefined &&
      object.aezeedPassphrase !== null
    ) {
      message.aezeedPassphrase = bytesFromBase64(object.aezeedPassphrase);
    }
    return message;
  },

  toJSON(message: GenSeedRequest): unknown {
    const obj: any = {};
    message.aezeedPassphrase !== undefined &&
      (obj.aezeedPassphrase = base64FromBytes(
        message.aezeedPassphrase !== undefined
          ? message.aezeedPassphrase
          : new Uint8Array()
      ));
    return obj;
  },

  fromPartial(object: DeepPartial<GenSeedRequest>): GenSeedRequest {
    const message = { ...baseGenSeedRequest } as GenSeedRequest;
    if (
      object.aezeedPassphrase !== undefined &&
      object.aezeedPassphrase !== null
    ) {
      message.aezeedPassphrase = object.aezeedPassphrase;
    } else {
      message.aezeedPassphrase = new Uint8Array();
    }
    return message;
  },
};

const baseGenSeedResponse: object = { mnemonic: "" };

export const GenSeedResponse = {
  encode(message: GenSeedResponse, writer: Writer = Writer.create()): Writer {
    for (const v of message.mnemonic) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: Reader | Uint8Array, length?: number): GenSeedResponse {
    const reader = input instanceof Reader ? input : new Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = { ...baseGenSeedResponse } as GenSeedResponse;
    message.mnemonic = [];
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.mnemonic.push(reader.string());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): GenSeedResponse {
    const message = { ...baseGenSeedResponse } as GenSeedResponse;
    message.mnemonic = [];
    if (object.mnemonic !== undefined && object.mnemonic !== null) {
      for (const e of object.mnemonic) {
        message.mnemonic.push(String(e));
      }
    }
    return message;
  },

  toJSON(message: GenSeedResponse): unknown {
    const obj: any = {};
    if (message.mnemonic) {
      obj.mnemonic = message.mnemonic.map((e) => e);
    } else {
      obj.mnemonic = [];
    }
    return obj;
  },

  fromPartial(object: DeepPartial<GenSeedResponse>): GenSeedResponse {
    const message = { ...baseGenSeedResponse } as GenSeedResponse;
    message.mnemonic = [];
    if (object.mnemonic !== undefined && object.mnemonic !== null) {
      for (const e of object.mnemonic) {
        message.mnemonic.push(e);
      }
    }
    return message;
  },
};

const baseInitProfileRequest: object = { mnemonic: "" };

export const InitProfileRequest = {
  encode(
    message: InitProfileRequest,
    writer: Writer = Writer.create()
  ): Writer {
    if (message.walletPassword.length !== 0) {
      writer.uint32(10).bytes(message.walletPassword);
    }
    for (const v of message.mnemonic) {
      writer.uint32(18).string(v!);
    }
    if (message.aezeedPassphrase.length !== 0) {
      writer.uint32(26).bytes(message.aezeedPassphrase);
    }
    return writer;
  },

  decode(input: Reader | Uint8Array, length?: number): InitProfileRequest {
    const reader = input instanceof Reader ? input : new Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = { ...baseInitProfileRequest } as InitProfileRequest;
    message.mnemonic = [];
    message.walletPassword = new Uint8Array();
    message.aezeedPassphrase = new Uint8Array();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.walletPassword = reader.bytes();
          break;
        case 2:
          message.mnemonic.push(reader.string());
          break;
        case 3:
          message.aezeedPassphrase = reader.bytes();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): InitProfileRequest {
    const message = { ...baseInitProfileRequest } as InitProfileRequest;
    message.mnemonic = [];
    message.walletPassword = new Uint8Array();
    message.aezeedPassphrase = new Uint8Array();
    if (object.walletPassword !== undefined && object.walletPassword !== null) {
      message.walletPassword = bytesFromBase64(object.walletPassword);
    }
    if (object.mnemonic !== undefined && object.mnemonic !== null) {
      for (const e of object.mnemonic) {
        message.mnemonic.push(String(e));
      }
    }
    if (
      object.aezeedPassphrase !== undefined &&
      object.aezeedPassphrase !== null
    ) {
      message.aezeedPassphrase = bytesFromBase64(object.aezeedPassphrase);
    }
    return message;
  },

  toJSON(message: InitProfileRequest): unknown {
    const obj: any = {};
    message.walletPassword !== undefined &&
      (obj.walletPassword = base64FromBytes(
        message.walletPassword !== undefined
          ? message.walletPassword
          : new Uint8Array()
      ));
    if (message.mnemonic) {
      obj.mnemonic = message.mnemonic.map((e) => e);
    } else {
      obj.mnemonic = [];
    }
    message.aezeedPassphrase !== undefined &&
      (obj.aezeedPassphrase = base64FromBytes(
        message.aezeedPassphrase !== undefined
          ? message.aezeedPassphrase
          : new Uint8Array()
      ));
    return obj;
  },

  fromPartial(object: DeepPartial<InitProfileRequest>): InitProfileRequest {
    const message = { ...baseInitProfileRequest } as InitProfileRequest;
    message.mnemonic = [];
    if (object.walletPassword !== undefined && object.walletPassword !== null) {
      message.walletPassword = object.walletPassword;
    } else {
      message.walletPassword = new Uint8Array();
    }
    if (object.mnemonic !== undefined && object.mnemonic !== null) {
      for (const e of object.mnemonic) {
        message.mnemonic.push(e);
      }
    }
    if (
      object.aezeedPassphrase !== undefined &&
      object.aezeedPassphrase !== null
    ) {
      message.aezeedPassphrase = object.aezeedPassphrase;
    } else {
      message.aezeedPassphrase = new Uint8Array();
    }
    return message;
  },
};

const baseInitProfileResponse: object = {};

export const InitProfileResponse = {
  encode(_: InitProfileResponse, writer: Writer = Writer.create()): Writer {
    return writer;
  },

  decode(input: Reader | Uint8Array, length?: number): InitProfileResponse {
    const reader = input instanceof Reader ? input : new Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = { ...baseInitProfileResponse } as InitProfileResponse;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(_: any): InitProfileResponse {
    const message = { ...baseInitProfileResponse } as InitProfileResponse;
    return message;
  },

  toJSON(_: InitProfileResponse): unknown {
    const obj: any = {};
    return obj;
  },

  fromPartial(_: DeepPartial<InitProfileResponse>): InitProfileResponse {
    const message = { ...baseInitProfileResponse } as InitProfileResponse;
    return message;
  },
};

const baseUpdateProfileRequest: object = {};

export const UpdateProfileRequest = {
  encode(
    message: UpdateProfileRequest,
    writer: Writer = Writer.create()
  ): Writer {
    if (message.profile !== undefined) {
      Profile.encode(message.profile, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: Reader | Uint8Array, length?: number): UpdateProfileRequest {
    const reader = input instanceof Reader ? input : new Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = { ...baseUpdateProfileRequest } as UpdateProfileRequest;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.profile = Profile.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): UpdateProfileRequest {
    const message = { ...baseUpdateProfileRequest } as UpdateProfileRequest;
    if (object.profile !== undefined && object.profile !== null) {
      message.profile = Profile.fromJSON(object.profile);
    } else {
      message.profile = undefined;
    }
    return message;
  },

  toJSON(message: UpdateProfileRequest): unknown {
    const obj: any = {};
    message.profile !== undefined &&
      (obj.profile = message.profile
        ? Profile.toJSON(message.profile)
        : undefined);
    return obj;
  },

  fromPartial(object: DeepPartial<UpdateProfileRequest>): UpdateProfileRequest {
    const message = { ...baseUpdateProfileRequest } as UpdateProfileRequest;
    if (object.profile !== undefined && object.profile !== null) {
      message.profile = Profile.fromPartial(object.profile);
    } else {
      message.profile = undefined;
    }
    return message;
  },
};

const baseUpdateProfileResponse: object = {};

export const UpdateProfileResponse = {
  encode(
    message: UpdateProfileResponse,
    writer: Writer = Writer.create()
  ): Writer {
    if (message.profile !== undefined) {
      Profile.encode(message.profile, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: Reader | Uint8Array, length?: number): UpdateProfileResponse {
    const reader = input instanceof Reader ? input : new Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = { ...baseUpdateProfileResponse } as UpdateProfileResponse;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.profile = Profile.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): UpdateProfileResponse {
    const message = { ...baseUpdateProfileResponse } as UpdateProfileResponse;
    if (object.profile !== undefined && object.profile !== null) {
      message.profile = Profile.fromJSON(object.profile);
    } else {
      message.profile = undefined;
    }
    return message;
  },

  toJSON(message: UpdateProfileResponse): unknown {
    const obj: any = {};
    message.profile !== undefined &&
      (obj.profile = message.profile
        ? Profile.toJSON(message.profile)
        : undefined);
    return obj;
  },

  fromPartial(
    object: DeepPartial<UpdateProfileResponse>
  ): UpdateProfileResponse {
    const message = { ...baseUpdateProfileResponse } as UpdateProfileResponse;
    if (object.profile !== undefined && object.profile !== null) {
      message.profile = Profile.fromPartial(object.profile);
    } else {
      message.profile = undefined;
    }
    return message;
  },
};

const baseGetProfileRequest: object = { profileId: "" };

export const GetProfileRequest = {
  encode(message: GetProfileRequest, writer: Writer = Writer.create()): Writer {
    if (message.profileId !== "") {
      writer.uint32(10).string(message.profileId);
    }
    return writer;
  },

  decode(input: Reader | Uint8Array, length?: number): GetProfileRequest {
    const reader = input instanceof Reader ? input : new Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = { ...baseGetProfileRequest } as GetProfileRequest;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.profileId = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): GetProfileRequest {
    const message = { ...baseGetProfileRequest } as GetProfileRequest;
    if (object.profileId !== undefined && object.profileId !== null) {
      message.profileId = String(object.profileId);
    } else {
      message.profileId = "";
    }
    return message;
  },

  toJSON(message: GetProfileRequest): unknown {
    const obj: any = {};
    message.profileId !== undefined && (obj.profileId = message.profileId);
    return obj;
  },

  fromPartial(object: DeepPartial<GetProfileRequest>): GetProfileRequest {
    const message = { ...baseGetProfileRequest } as GetProfileRequest;
    if (object.profileId !== undefined && object.profileId !== null) {
      message.profileId = object.profileId;
    } else {
      message.profileId = "";
    }
    return message;
  },
};

const baseGetProfileResponse: object = {};

export const GetProfileResponse = {
  encode(
    message: GetProfileResponse,
    writer: Writer = Writer.create()
  ): Writer {
    if (message.profile !== undefined) {
      Profile.encode(message.profile, writer.uint32(10).fork()).ldelim();
    }
    if (message.config !== undefined) {
      Config.encode(message.config, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: Reader | Uint8Array, length?: number): GetProfileResponse {
    const reader = input instanceof Reader ? input : new Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = { ...baseGetProfileResponse } as GetProfileResponse;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.profile = Profile.decode(reader, reader.uint32());
          break;
        case 2:
          message.config = Config.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): GetProfileResponse {
    const message = { ...baseGetProfileResponse } as GetProfileResponse;
    if (object.profile !== undefined && object.profile !== null) {
      message.profile = Profile.fromJSON(object.profile);
    } else {
      message.profile = undefined;
    }
    if (object.config !== undefined && object.config !== null) {
      message.config = Config.fromJSON(object.config);
    } else {
      message.config = undefined;
    }
    return message;
  },

  toJSON(message: GetProfileResponse): unknown {
    const obj: any = {};
    message.profile !== undefined &&
      (obj.profile = message.profile
        ? Profile.toJSON(message.profile)
        : undefined);
    message.config !== undefined &&
      (obj.config = message.config ? Config.toJSON(message.config) : undefined);
    return obj;
  },

  fromPartial(object: DeepPartial<GetProfileResponse>): GetProfileResponse {
    const message = { ...baseGetProfileResponse } as GetProfileResponse;
    if (object.profile !== undefined && object.profile !== null) {
      message.profile = Profile.fromPartial(object.profile);
    } else {
      message.profile = undefined;
    }
    if (object.config !== undefined && object.config !== null) {
      message.config = Config.fromPartial(object.config);
    } else {
      message.config = undefined;
    }
    return message;
  },
};

const baseListProfilesRequest: object = { pageSize: 0, pageToken: "" };

export const ListProfilesRequest = {
  encode(
    message: ListProfilesRequest,
    writer: Writer = Writer.create()
  ): Writer {
    if (message.pageSize !== 0) {
      writer.uint32(8).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    return writer;
  },

  decode(input: Reader | Uint8Array, length?: number): ListProfilesRequest {
    const reader = input instanceof Reader ? input : new Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = { ...baseListProfilesRequest } as ListProfilesRequest;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.pageSize = reader.int32();
          break;
        case 2:
          message.pageToken = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): ListProfilesRequest {
    const message = { ...baseListProfilesRequest } as ListProfilesRequest;
    if (object.pageSize !== undefined && object.pageSize !== null) {
      message.pageSize = Number(object.pageSize);
    } else {
      message.pageSize = 0;
    }
    if (object.pageToken !== undefined && object.pageToken !== null) {
      message.pageToken = String(object.pageToken);
    } else {
      message.pageToken = "";
    }
    return message;
  },

  toJSON(message: ListProfilesRequest): unknown {
    const obj: any = {};
    message.pageSize !== undefined && (obj.pageSize = message.pageSize);
    message.pageToken !== undefined && (obj.pageToken = message.pageToken);
    return obj;
  },

  fromPartial(object: DeepPartial<ListProfilesRequest>): ListProfilesRequest {
    const message = { ...baseListProfilesRequest } as ListProfilesRequest;
    if (object.pageSize !== undefined && object.pageSize !== null) {
      message.pageSize = object.pageSize;
    } else {
      message.pageSize = 0;
    }
    if (object.pageToken !== undefined && object.pageToken !== null) {
      message.pageToken = object.pageToken;
    } else {
      message.pageToken = "";
    }
    return message;
  },
};

const baseListProfilesResponse: object = { nextPageToken: "" };

export const ListProfilesResponse = {
  encode(
    message: ListProfilesResponse,
    writer: Writer = Writer.create()
  ): Writer {
    for (const v of message.profiles) {
      Profile.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: Reader | Uint8Array, length?: number): ListProfilesResponse {
    const reader = input instanceof Reader ? input : new Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = { ...baseListProfilesResponse } as ListProfilesResponse;
    message.profiles = [];
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.profiles.push(Profile.decode(reader, reader.uint32()));
          break;
        case 2:
          message.nextPageToken = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): ListProfilesResponse {
    const message = { ...baseListProfilesResponse } as ListProfilesResponse;
    message.profiles = [];
    if (object.profiles !== undefined && object.profiles !== null) {
      for (const e of object.profiles) {
        message.profiles.push(Profile.fromJSON(e));
      }
    }
    if (object.nextPageToken !== undefined && object.nextPageToken !== null) {
      message.nextPageToken = String(object.nextPageToken);
    } else {
      message.nextPageToken = "";
    }
    return message;
  },

  toJSON(message: ListProfilesResponse): unknown {
    const obj: any = {};
    if (message.profiles) {
      obj.profiles = message.profiles.map((e) =>
        e ? Profile.toJSON(e) : undefined
      );
    } else {
      obj.profiles = [];
    }
    message.nextPageToken !== undefined &&
      (obj.nextPageToken = message.nextPageToken);
    return obj;
  },

  fromPartial(object: DeepPartial<ListProfilesResponse>): ListProfilesResponse {
    const message = { ...baseListProfilesResponse } as ListProfilesResponse;
    message.profiles = [];
    if (object.profiles !== undefined && object.profiles !== null) {
      for (const e of object.profiles) {
        message.profiles.push(Profile.fromPartial(e));
      }
    }
    if (object.nextPageToken !== undefined && object.nextPageToken !== null) {
      message.nextPageToken = object.nextPageToken;
    } else {
      message.nextPageToken = "";
    }
    return message;
  },
};

const baseListSuggestedProfilesRequest: object = { pageSize: 0, pageToken: "" };

export const ListSuggestedProfilesRequest = {
  encode(
    message: ListSuggestedProfilesRequest,
    writer: Writer = Writer.create()
  ): Writer {
    if (message.pageSize !== 0) {
      writer.uint32(8).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    return writer;
  },

  decode(
    input: Reader | Uint8Array,
    length?: number
  ): ListSuggestedProfilesRequest {
    const reader = input instanceof Reader ? input : new Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = {
      ...baseListSuggestedProfilesRequest,
    } as ListSuggestedProfilesRequest;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.pageSize = reader.int32();
          break;
        case 2:
          message.pageToken = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): ListSuggestedProfilesRequest {
    const message = {
      ...baseListSuggestedProfilesRequest,
    } as ListSuggestedProfilesRequest;
    if (object.pageSize !== undefined && object.pageSize !== null) {
      message.pageSize = Number(object.pageSize);
    } else {
      message.pageSize = 0;
    }
    if (object.pageToken !== undefined && object.pageToken !== null) {
      message.pageToken = String(object.pageToken);
    } else {
      message.pageToken = "";
    }
    return message;
  },

  toJSON(message: ListSuggestedProfilesRequest): unknown {
    const obj: any = {};
    message.pageSize !== undefined && (obj.pageSize = message.pageSize);
    message.pageToken !== undefined && (obj.pageToken = message.pageToken);
    return obj;
  },

  fromPartial(
    object: DeepPartial<ListSuggestedProfilesRequest>
  ): ListSuggestedProfilesRequest {
    const message = {
      ...baseListSuggestedProfilesRequest,
    } as ListSuggestedProfilesRequest;
    if (object.pageSize !== undefined && object.pageSize !== null) {
      message.pageSize = object.pageSize;
    } else {
      message.pageSize = 0;
    }
    if (object.pageToken !== undefined && object.pageToken !== null) {
      message.pageToken = object.pageToken;
    } else {
      message.pageToken = "";
    }
    return message;
  },
};

const baseListSuggestedProfilesResponse: object = { nextPageToken: "" };

export const ListSuggestedProfilesResponse = {
  encode(
    message: ListSuggestedProfilesResponse,
    writer: Writer = Writer.create()
  ): Writer {
    for (const v of message.profiles) {
      SuggestedProfile.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(
    input: Reader | Uint8Array,
    length?: number
  ): ListSuggestedProfilesResponse {
    const reader = input instanceof Reader ? input : new Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = {
      ...baseListSuggestedProfilesResponse,
    } as ListSuggestedProfilesResponse;
    message.profiles = [];
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.profiles.push(
            SuggestedProfile.decode(reader, reader.uint32())
          );
          break;
        case 2:
          message.nextPageToken = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): ListSuggestedProfilesResponse {
    const message = {
      ...baseListSuggestedProfilesResponse,
    } as ListSuggestedProfilesResponse;
    message.profiles = [];
    if (object.profiles !== undefined && object.profiles !== null) {
      for (const e of object.profiles) {
        message.profiles.push(SuggestedProfile.fromJSON(e));
      }
    }
    if (object.nextPageToken !== undefined && object.nextPageToken !== null) {
      message.nextPageToken = String(object.nextPageToken);
    } else {
      message.nextPageToken = "";
    }
    return message;
  },

  toJSON(message: ListSuggestedProfilesResponse): unknown {
    const obj: any = {};
    if (message.profiles) {
      obj.profiles = message.profiles.map((e) =>
        e ? SuggestedProfile.toJSON(e) : undefined
      );
    } else {
      obj.profiles = [];
    }
    message.nextPageToken !== undefined &&
      (obj.nextPageToken = message.nextPageToken);
    return obj;
  },

  fromPartial(
    object: DeepPartial<ListSuggestedProfilesResponse>
  ): ListSuggestedProfilesResponse {
    const message = {
      ...baseListSuggestedProfilesResponse,
    } as ListSuggestedProfilesResponse;
    message.profiles = [];
    if (object.profiles !== undefined && object.profiles !== null) {
      for (const e of object.profiles) {
        message.profiles.push(SuggestedProfile.fromPartial(e));
      }
    }
    if (object.nextPageToken !== undefined && object.nextPageToken !== null) {
      message.nextPageToken = object.nextPageToken;
    } else {
      message.nextPageToken = "";
    }
    return message;
  },
};

const baseGetProfileAddrsRequest: object = {};

export const GetProfileAddrsRequest = {
  encode(_: GetProfileAddrsRequest, writer: Writer = Writer.create()): Writer {
    return writer;
  },

  decode(input: Reader | Uint8Array, length?: number): GetProfileAddrsRequest {
    const reader = input instanceof Reader ? input : new Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = { ...baseGetProfileAddrsRequest } as GetProfileAddrsRequest;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(_: any): GetProfileAddrsRequest {
    const message = { ...baseGetProfileAddrsRequest } as GetProfileAddrsRequest;
    return message;
  },

  toJSON(_: GetProfileAddrsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  fromPartial(_: DeepPartial<GetProfileAddrsRequest>): GetProfileAddrsRequest {
    const message = { ...baseGetProfileAddrsRequest } as GetProfileAddrsRequest;
    return message;
  },
};

const baseGetProfileAddrsResponse: object = { addrs: "" };

export const GetProfileAddrsResponse = {
  encode(
    message: GetProfileAddrsResponse,
    writer: Writer = Writer.create()
  ): Writer {
    for (const v of message.addrs) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: Reader | Uint8Array, length?: number): GetProfileAddrsResponse {
    const reader = input instanceof Reader ? input : new Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = {
      ...baseGetProfileAddrsResponse,
    } as GetProfileAddrsResponse;
    message.addrs = [];
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.addrs.push(reader.string());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): GetProfileAddrsResponse {
    const message = {
      ...baseGetProfileAddrsResponse,
    } as GetProfileAddrsResponse;
    message.addrs = [];
    if (object.addrs !== undefined && object.addrs !== null) {
      for (const e of object.addrs) {
        message.addrs.push(String(e));
      }
    }
    return message;
  },

  toJSON(message: GetProfileAddrsResponse): unknown {
    const obj: any = {};
    if (message.addrs) {
      obj.addrs = message.addrs.map((e) => e);
    } else {
      obj.addrs = [];
    }
    return obj;
  },

  fromPartial(
    object: DeepPartial<GetProfileAddrsResponse>
  ): GetProfileAddrsResponse {
    const message = {
      ...baseGetProfileAddrsResponse,
    } as GetProfileAddrsResponse;
    message.addrs = [];
    if (object.addrs !== undefined && object.addrs !== null) {
      for (const e of object.addrs) {
        message.addrs.push(e);
      }
    }
    return message;
  },
};

const baseConnectToPeerRequest: object = { addrs: "" };

export const ConnectToPeerRequest = {
  encode(
    message: ConnectToPeerRequest,
    writer: Writer = Writer.create()
  ): Writer {
    for (const v of message.addrs) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: Reader | Uint8Array, length?: number): ConnectToPeerRequest {
    const reader = input instanceof Reader ? input : new Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = { ...baseConnectToPeerRequest } as ConnectToPeerRequest;
    message.addrs = [];
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.addrs.push(reader.string());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): ConnectToPeerRequest {
    const message = { ...baseConnectToPeerRequest } as ConnectToPeerRequest;
    message.addrs = [];
    if (object.addrs !== undefined && object.addrs !== null) {
      for (const e of object.addrs) {
        message.addrs.push(String(e));
      }
    }
    return message;
  },

  toJSON(message: ConnectToPeerRequest): unknown {
    const obj: any = {};
    if (message.addrs) {
      obj.addrs = message.addrs.map((e) => e);
    } else {
      obj.addrs = [];
    }
    return obj;
  },

  fromPartial(object: DeepPartial<ConnectToPeerRequest>): ConnectToPeerRequest {
    const message = { ...baseConnectToPeerRequest } as ConnectToPeerRequest;
    message.addrs = [];
    if (object.addrs !== undefined && object.addrs !== null) {
      for (const e of object.addrs) {
        message.addrs.push(e);
      }
    }
    return message;
  },
};

const baseConnectToPeerResponse: object = {};

export const ConnectToPeerResponse = {
  encode(_: ConnectToPeerResponse, writer: Writer = Writer.create()): Writer {
    return writer;
  },

  decode(input: Reader | Uint8Array, length?: number): ConnectToPeerResponse {
    const reader = input instanceof Reader ? input : new Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = { ...baseConnectToPeerResponse } as ConnectToPeerResponse;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(_: any): ConnectToPeerResponse {
    const message = { ...baseConnectToPeerResponse } as ConnectToPeerResponse;
    return message;
  },

  toJSON(_: ConnectToPeerResponse): unknown {
    const obj: any = {};
    return obj;
  },

  fromPartial(_: DeepPartial<ConnectToPeerResponse>): ConnectToPeerResponse {
    const message = { ...baseConnectToPeerResponse } as ConnectToPeerResponse;
    return message;
  },
};

const baseProfile: object = {
  peerId: "",
  accountId: "",
  username: "",
  email: "",
  bio: "",
  connectionStatus: 0,
};

export const Profile = {
  encode(message: Profile, writer: Writer = Writer.create()): Writer {
    if (message.peerId !== "") {
      writer.uint32(10).string(message.peerId);
    }
    if (message.accountId !== "") {
      writer.uint32(18).string(message.accountId);
    }
    if (message.username !== "") {
      writer.uint32(26).string(message.username);
    }
    if (message.email !== "") {
      writer.uint32(34).string(message.email);
    }
    if (message.bio !== "") {
      writer.uint32(42).string(message.bio);
    }
    if (message.connectionStatus !== 0) {
      writer.uint32(48).int32(message.connectionStatus);
    }
    return writer;
  },

  decode(input: Reader | Uint8Array, length?: number): Profile {
    const reader = input instanceof Reader ? input : new Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = { ...baseProfile } as Profile;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.peerId = reader.string();
          break;
        case 2:
          message.accountId = reader.string();
          break;
        case 3:
          message.username = reader.string();
          break;
        case 4:
          message.email = reader.string();
          break;
        case 5:
          message.bio = reader.string();
          break;
        case 6:
          message.connectionStatus = reader.int32() as any;
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): Profile {
    const message = { ...baseProfile } as Profile;
    if (object.peerId !== undefined && object.peerId !== null) {
      message.peerId = String(object.peerId);
    } else {
      message.peerId = "";
    }
    if (object.accountId !== undefined && object.accountId !== null) {
      message.accountId = String(object.accountId);
    } else {
      message.accountId = "";
    }
    if (object.username !== undefined && object.username !== null) {
      message.username = String(object.username);
    } else {
      message.username = "";
    }
    if (object.email !== undefined && object.email !== null) {
      message.email = String(object.email);
    } else {
      message.email = "";
    }
    if (object.bio !== undefined && object.bio !== null) {
      message.bio = String(object.bio);
    } else {
      message.bio = "";
    }
    if (
      object.connectionStatus !== undefined &&
      object.connectionStatus !== null
    ) {
      message.connectionStatus = connectionStatusFromJSON(
        object.connectionStatus
      );
    } else {
      message.connectionStatus = 0;
    }
    return message;
  },

  toJSON(message: Profile): unknown {
    const obj: any = {};
    message.peerId !== undefined && (obj.peerId = message.peerId);
    message.accountId !== undefined && (obj.accountId = message.accountId);
    message.username !== undefined && (obj.username = message.username);
    message.email !== undefined && (obj.email = message.email);
    message.bio !== undefined && (obj.bio = message.bio);
    message.connectionStatus !== undefined &&
      (obj.connectionStatus = connectionStatusToJSON(message.connectionStatus));
    return obj;
  },

  fromPartial(object: DeepPartial<Profile>): Profile {
    const message = { ...baseProfile } as Profile;
    if (object.peerId !== undefined && object.peerId !== null) {
      message.peerId = object.peerId;
    } else {
      message.peerId = "";
    }
    if (object.accountId !== undefined && object.accountId !== null) {
      message.accountId = object.accountId;
    } else {
      message.accountId = "";
    }
    if (object.username !== undefined && object.username !== null) {
      message.username = object.username;
    } else {
      message.username = "";
    }
    if (object.email !== undefined && object.email !== null) {
      message.email = object.email;
    } else {
      message.email = "";
    }
    if (object.bio !== undefined && object.bio !== null) {
      message.bio = object.bio;
    } else {
      message.bio = "";
    }
    if (
      object.connectionStatus !== undefined &&
      object.connectionStatus !== null
    ) {
      message.connectionStatus = object.connectionStatus;
    } else {
      message.connectionStatus = 0;
    }
    return message;
  },
};

const baseSuggestedProfile: object = { addrs: "" };

export const SuggestedProfile = {
  encode(message: SuggestedProfile, writer: Writer = Writer.create()): Writer {
    if (message.profile !== undefined) {
      Profile.encode(message.profile, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.addrs) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: Reader | Uint8Array, length?: number): SuggestedProfile {
    const reader = input instanceof Reader ? input : new Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = { ...baseSuggestedProfile } as SuggestedProfile;
    message.addrs = [];
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.profile = Profile.decode(reader, reader.uint32());
          break;
        case 2:
          message.addrs.push(reader.string());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): SuggestedProfile {
    const message = { ...baseSuggestedProfile } as SuggestedProfile;
    message.addrs = [];
    if (object.profile !== undefined && object.profile !== null) {
      message.profile = Profile.fromJSON(object.profile);
    } else {
      message.profile = undefined;
    }
    if (object.addrs !== undefined && object.addrs !== null) {
      for (const e of object.addrs) {
        message.addrs.push(String(e));
      }
    }
    return message;
  },

  toJSON(message: SuggestedProfile): unknown {
    const obj: any = {};
    message.profile !== undefined &&
      (obj.profile = message.profile
        ? Profile.toJSON(message.profile)
        : undefined);
    if (message.addrs) {
      obj.addrs = message.addrs.map((e) => e);
    } else {
      obj.addrs = [];
    }
    return obj;
  },

  fromPartial(object: DeepPartial<SuggestedProfile>): SuggestedProfile {
    const message = { ...baseSuggestedProfile } as SuggestedProfile;
    message.addrs = [];
    if (object.profile !== undefined && object.profile !== null) {
      message.profile = Profile.fromPartial(object.profile);
    } else {
      message.profile = undefined;
    }
    if (object.addrs !== undefined && object.addrs !== null) {
      for (const e of object.addrs) {
        message.addrs.push(e);
      }
    }
    return message;
  },
};

const baseConfig: object = { logoUri: "", homePageUri: "" };

export const Config = {
  encode(message: Config, writer: Writer = Writer.create()): Writer {
    if (message.logoUri !== "") {
      writer.uint32(10).string(message.logoUri);
    }
    if (message.homePageUri !== "") {
      writer.uint32(18).string(message.homePageUri);
    }
    return writer;
  },

  decode(input: Reader | Uint8Array, length?: number): Config {
    const reader = input instanceof Reader ? input : new Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = { ...baseConfig } as Config;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.logoUri = reader.string();
          break;
        case 2:
          message.homePageUri = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): Config {
    const message = { ...baseConfig } as Config;
    if (object.logoUri !== undefined && object.logoUri !== null) {
      message.logoUri = String(object.logoUri);
    } else {
      message.logoUri = "";
    }
    if (object.homePageUri !== undefined && object.homePageUri !== null) {
      message.homePageUri = String(object.homePageUri);
    } else {
      message.homePageUri = "";
    }
    return message;
  },

  toJSON(message: Config): unknown {
    const obj: any = {};
    message.logoUri !== undefined && (obj.logoUri = message.logoUri);
    message.homePageUri !== undefined &&
      (obj.homePageUri = message.homePageUri);
    return obj;
  },

  fromPartial(object: DeepPartial<Config>): Config {
    const message = { ...baseConfig } as Config;
    if (object.logoUri !== undefined && object.logoUri !== null) {
      message.logoUri = object.logoUri;
    } else {
      message.logoUri = "";
    }
    if (object.homePageUri !== undefined && object.homePageUri !== null) {
      message.homePageUri = object.homePageUri;
    } else {
      message.homePageUri = "";
    }
    return message;
  },
};

export interface Mintter {
  /**
   * Generates cryptographic seed that is used to derive all the cryptographic
   * keys necessary for Mintter to work. It's currenly supposed to be using
   * LND's Aezeed implementation, that solves some of the issues with BIP-39.
   * The seed is encoded as a mnemonic of N human readable words. The seed could
   * be reconstructed given these words and the passphrase.
   *
   * See: https://github.com/lightningnetwork/lnd/tree/master/aezeed.
   */
  genSeed(
    request: DeepPartial<GenSeedRequest>,
    metadata?: grpc.Metadata
  ): Promise<GenSeedResponse>;
  /**
   * After generating the seed, this call is used to commit the seed and
   * initialize the daemon's internal profile.
   */
  initProfile(
    request: DeepPartial<InitProfileRequest>,
    metadata?: grpc.Metadata
  ): Promise<InitProfileResponse>;
  /**
   * Retrieves profile information.
   *
   * TODO(burdiyan): return plain profile here.
   */
  getProfile(
    request: DeepPartial<GetProfileRequest>,
    metadata?: grpc.Metadata
  ): Promise<GetProfileResponse>;
  /** Updates profile information. */
  updateProfile(
    request: DeepPartial<UpdateProfileRequest>,
    metadata?: grpc.Metadata
  ): Promise<UpdateProfileResponse>;
  listProfiles(
    request: DeepPartial<ListProfilesRequest>,
    metadata?: grpc.Metadata
  ): Promise<ListProfilesResponse>;
  /** List profiles of your directly connected profiles. */
  listSuggestedProfiles(
    request: DeepPartial<ListSuggestedProfilesRequest>,
    metadata?: grpc.Metadata
  ): Promise<ListSuggestedProfilesResponse>;
  /** Get network multiaddrs of the current node. */
  getProfileAddrs(
    request: DeepPartial<GetProfileAddrsRequest>,
    metadata?: grpc.Metadata
  ): Promise<GetProfileAddrsResponse>;
  /** Establish a p2p connection to another peer on the network. */
  connectToPeer(
    request: DeepPartial<ConnectToPeerRequest>,
    metadata?: grpc.Metadata
  ): Promise<ConnectToPeerResponse>;
}

export class MintterClientImpl implements Mintter {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.GenSeed = this.GenSeed.bind(this);
    this.InitProfile = this.InitProfile.bind(this);
    this.GetProfile = this.GetProfile.bind(this);
    this.UpdateProfile = this.UpdateProfile.bind(this);
    this.ListProfiles = this.ListProfiles.bind(this);
    this.ListSuggestedProfiles = this.ListSuggestedProfiles.bind(this);
    this.GetProfileAddrs = this.GetProfileAddrs.bind(this);
    this.ConnectToPeer = this.ConnectToPeer.bind(this);
  }

  GenSeed(
    request: DeepPartial<GenSeedRequest>,
    metadata?: grpc.Metadata
  ): Promise<GenSeedResponse> {
    return this.rpc.unary(
      MintterGenSeedDesc,
      GenSeedRequest.fromPartial(request),
      metadata
    );
  }

  InitProfile(
    request: DeepPartial<InitProfileRequest>,
    metadata?: grpc.Metadata
  ): Promise<InitProfileResponse> {
    return this.rpc.unary(
      MintterInitProfileDesc,
      InitProfileRequest.fromPartial(request),
      metadata
    );
  }

  GetProfile(
    request: DeepPartial<GetProfileRequest>,
    metadata?: grpc.Metadata
  ): Promise<GetProfileResponse> {
    return this.rpc.unary(
      MintterGetProfileDesc,
      GetProfileRequest.fromPartial(request),
      metadata
    );
  }

  UpdateProfile(
    request: DeepPartial<UpdateProfileRequest>,
    metadata?: grpc.Metadata
  ): Promise<UpdateProfileResponse> {
    return this.rpc.unary(
      MintterUpdateProfileDesc,
      UpdateProfileRequest.fromPartial(request),
      metadata
    );
  }

  ListProfiles(
    request: DeepPartial<ListProfilesRequest>,
    metadata?: grpc.Metadata
  ): Promise<ListProfilesResponse> {
    return this.rpc.unary(
      MintterListProfilesDesc,
      ListProfilesRequest.fromPartial(request),
      metadata
    );
  }

  ListSuggestedProfiles(
    request: DeepPartial<ListSuggestedProfilesRequest>,
    metadata?: grpc.Metadata
  ): Promise<ListSuggestedProfilesResponse> {
    return this.rpc.unary(
      MintterListSuggestedProfilesDesc,
      ListSuggestedProfilesRequest.fromPartial(request),
      metadata
    );
  }

  GetProfileAddrs(
    request: DeepPartial<GetProfileAddrsRequest>,
    metadata?: grpc.Metadata
  ): Promise<GetProfileAddrsResponse> {
    return this.rpc.unary(
      MintterGetProfileAddrsDesc,
      GetProfileAddrsRequest.fromPartial(request),
      metadata
    );
  }

  ConnectToPeer(
    request: DeepPartial<ConnectToPeerRequest>,
    metadata?: grpc.Metadata
  ): Promise<ConnectToPeerResponse> {
    return this.rpc.unary(
      MintterConnectToPeerDesc,
      ConnectToPeerRequest.fromPartial(request),
      metadata
    );
  }
}

export const MintterDesc = {
  serviceName: "com.mintter.Mintter",
};

export const MintterGenSeedDesc: UnaryMethodDefinitionish = {
  methodName: "GenSeed",
  service: MintterDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GenSeedRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      return {
        ...GenSeedResponse.decode(data),
        toObject() {
          return this;
        },
      };
    },
  } as any,
};

export const MintterInitProfileDesc: UnaryMethodDefinitionish = {
  methodName: "InitProfile",
  service: MintterDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return InitProfileRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      return {
        ...InitProfileResponse.decode(data),
        toObject() {
          return this;
        },
      };
    },
  } as any,
};

export const MintterGetProfileDesc: UnaryMethodDefinitionish = {
  methodName: "GetProfile",
  service: MintterDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetProfileRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      return {
        ...GetProfileResponse.decode(data),
        toObject() {
          return this;
        },
      };
    },
  } as any,
};

export const MintterUpdateProfileDesc: UnaryMethodDefinitionish = {
  methodName: "UpdateProfile",
  service: MintterDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return UpdateProfileRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      return {
        ...UpdateProfileResponse.decode(data),
        toObject() {
          return this;
        },
      };
    },
  } as any,
};

export const MintterListProfilesDesc: UnaryMethodDefinitionish = {
  methodName: "ListProfiles",
  service: MintterDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListProfilesRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      return {
        ...ListProfilesResponse.decode(data),
        toObject() {
          return this;
        },
      };
    },
  } as any,
};

export const MintterListSuggestedProfilesDesc: UnaryMethodDefinitionish = {
  methodName: "ListSuggestedProfiles",
  service: MintterDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ListSuggestedProfilesRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      return {
        ...ListSuggestedProfilesResponse.decode(data),
        toObject() {
          return this;
        },
      };
    },
  } as any,
};

export const MintterGetProfileAddrsDesc: UnaryMethodDefinitionish = {
  methodName: "GetProfileAddrs",
  service: MintterDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetProfileAddrsRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      return {
        ...GetProfileAddrsResponse.decode(data),
        toObject() {
          return this;
        },
      };
    },
  } as any,
};

export const MintterConnectToPeerDesc: UnaryMethodDefinitionish = {
  methodName: "ConnectToPeer",
  service: MintterDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ConnectToPeerRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      return {
        ...ConnectToPeerResponse.decode(data),
        toObject() {
          return this;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR
  extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined
  ): Promise<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;

    debug?: boolean;
    metadata?: grpc.Metadata;
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;

      debug?: boolean;
      metadata?: grpc.Metadata;
    }
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata =
      metadata && this.options.metadata
        ? new BrowserHeaders({
            ...this.options?.metadata.headersMap,
            ...metadata?.headersMap,
          })
        : metadata || this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata,
        transport: this.options.transport,
        debug: this.options.debug,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message);
          } else {
            const err = new Error(response.statusMessage) as any;
            err.code = response.status;
            err.metadata = response.trailers;
            reject(err);
          }
        },
      });
    });
  }
}

declare var self: any | undefined;
declare var window: any | undefined;
var globalThis: any = (() => {
  if (typeof globalThis !== "undefined") return globalThis;
  if (typeof self !== "undefined") return self;
  if (typeof window !== "undefined") return window;
  if (typeof global !== "undefined") return global;
  throw "Unable to locate global object";
})();

const atob: (b64: string) => string =
  globalThis.atob ||
  ((b64) => globalThis.Buffer.from(b64, "base64").toString("binary"));
function bytesFromBase64(b64: string): Uint8Array {
  const bin = atob(b64);
  const arr = new Uint8Array(bin.length);
  for (let i = 0; i < bin.length; ++i) {
    arr[i] = bin.charCodeAt(i);
  }
  return arr;
}

const btoa: (bin: string) => string =
  globalThis.btoa ||
  ((bin) => globalThis.Buffer.from(bin, "binary").toString("base64"));
function base64FromBytes(arr: Uint8Array): string {
  const bin: string[] = [];
  for (let i = 0; i < arr.byteLength; ++i) {
    bin.push(String.fromCharCode(arr[i]));
  }
  return btoa(bin.join(""));
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;
export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends Array<infer U>
  ? Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U>
  ? ReadonlyArray<DeepPartial<U>>
  : T extends {}
  ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

// If you get a compile-error about 'Constructor<Long> and ... have no overlap',
// add '--ts_proto_opt=esModuleInterop=true' as a flag when calling 'protoc'.
if (util.Long !== Long) {
  util.Long = Long as any;
  configure();
}
