def pnpm_install(
        name: str,
        srcs = [
            "package.json",
            "pnpm-workspace.yaml",
            "pnpm-lock.yaml",
        ],
        deps = [],
        labels = [],
        visibility: list = None):
    """
    Installs pnpm dependencies inside the workspace tree.

    If node_modules are deleted manually, the build system won't be aware of that,
    and builds will start failing in a weird way. The way to solve it is to run this rule with --rebuild flag
    or install the node_modules manually using pnpm.
    """

    fg = filegroup(
        name = name,
        tag = "srcs",
        srcs = srcs,
    )

    return build_rule(
        name = name,
        srcs = [fg],
        exported_deps = [fg],
        output_is_complete = False,
        building_description = "Installing pnpm dependencies...",
        outs = ["pnpm.state"],
        cmd = """
HOME=$(eval echo ~$(whoami))
TMPDIR="/tmp"
cd $WORKSPACE
$TOOLS_PNPM install
cp node_modules/.modules.yaml $OUT
""",
        tools = {
            "pnpm": [CONFIG.PNPM_TOOL],
        },
        deps = deps,
        labels = labels + ["pnpm_install"],
        visibility = visibility,
    )

def pnpm_script(
        name: str,
        srcs: list,
        script_name: str,
        pnpm_deps: str,  # Label to of of the pnpm_install target.
        outs: list,
        workdir = "./",
        deps = [],
        labels = [],
        visibility: list = None):
    """
    Runs a script defined in package.json.
    """

    def pre_build(label):
        if not has_label(pnpm_deps, "pnpm_install"):
            log.fatal("Attribute pnpm_deps must point to a pnpm_install rule")

    return build_rule(
        name = name,
        srcs = srcs,
        pre_build = pre_build,
        outs = outs,
        building_description = "Running pnpm script...",
        env = {
            "workdir": workdir,
            "script_name": script_name,
        },
        cmd = """
set -x
export HOME=$(eval echo ~$(whoami))
export PATH="$(pwd)/node_modules/.bin:$PATH"

# This is a bit of a workaround which is needed,
# because pnpm doesn't have its own binary in path
# when executing script, unlike yarn.
mkdir -p bin
cp $TOOLS_PNPM bin
export PATH="$(pwd)/bin:$PATH"

EXECROOT="$(pwd)"
ln -s $WORKSPACE/node_modules node_modules
ln -s $WORKSPACE/$PKG/$workdir/node_modules $PKG/$workdir/node_modules
cd $PKG/$workdir
pnpm run $script_name
mv $OUTS $EXECROOT
""",
        tools = {
            "pnpm": [CONFIG.PNPM_TOOL],
        },
        deps = deps + [pnpm_deps],
        labels = labels,
        visibility = visibility,
    )

def pnpm_binary(
        name: str,
        pnpm_deps: str,
        command: str = None,
        deps = [],
        visibility = None):
    return build_rule(
        name = name,
        outs = [command or name],
        binary = True,
        cmd = """
TOOL="${TOOLS_PNPM:${#WORKSPACE}+1}"
cat > $OUT <<EOF
#!/bin/sh
exec $(echo '$WORKSPACE')/$TOOL {command} $(echo '$@')
EOF
chmod +x $OUT
""".format(command = command or name),
        tools = {
            "pnpm": [CONFIG.PNPM_TOOL],
        },
        visibility = visibility,
        deps = deps + [pnpm_deps],
    )
