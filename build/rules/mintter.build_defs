def mtt_proto_codegen(srcs: list, languages: list):
    for s in srcs:
        if "//" in s or ":" in s:
            log.fatal("proto srcs can only be files")

    for lang in languages:
        if lang == "go":
            pbouts = [x.replace(".proto", ".pb.go") for x in srcs]
            grpcouts = [x.replace(".proto", "_grpc.pb.go") for x in srcs]
            generated(
                name = "go",
                srcs = srcs,
                outs = pbouts + grpcouts,
                cmd = """
$TOOLS_PROTOC -I proto \
    --plugin=protoc-gen-go=$TOOLS_PROTOC_GEN_GO \
    --plugin=protoc-gen-go-grpc=$TOOLS_PROTOC_GEN_GO_GRPC \
    --go_out=module=mintter:$WORKSPACE \
    --go-grpc_out=module=mintter,require_unimplemented_servers=false:$WORKSPACE \
    $SRCS
""",
                out_dir = "//" + package_name().replace("proto", "backend/api"),
                tools = [
                    "//build/nix:protoc",
                    "//build/tools:protoc-gen-go",
                    "//build/tools:protoc-gen-go-grpc",
                ],
            )
        elif lang == "js":
            generated(
                name = "js",
                srcs = srcs,
                outs = [x.replace(".proto", ".ts") for x in srcs],
                cmd = """
$TOOLS_PROTOC -I proto \
    --plugin=protoc-gen-ts_proto=$TOOLS_PROTOC_GEN_TS_PROTO \
    --ts_proto_opt=esModuleInterop=true \
    --ts_proto_opt=env=browser \
    --ts_proto_opt=lowerCaseServiceMethods=true \
    --ts_proto_opt=addGrpcMetadata=true \
    --ts_proto_opt=outputClientImpl=grpc-web \
    --ts_proto_opt=exportCommonSymbols=false \
    --ts_proto_out=frontend/client/.generated/ \
    $SRCS
for o in $OUTS; do
    echo "// Code generated by protoc-gen-ts_proto. DO NOT EDIT.\n//@ts-nocheck\n$(cat $o)" > $o
done
""",
                out_dir = "//" + package_name().replace("proto", "frontend/client/.generated"),
                tools = [
                    "//build/nix:protoc",
                    "//build/tools:protoc-gen-ts_proto",
                ],
            )
        else:
            log.fatal("unsupported proto lang " + lang)
