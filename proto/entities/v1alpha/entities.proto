syntax = "proto3";

package com.mintter.entities.v1alpha;

import "google/protobuf/timestamp.proto";

option go_package = "mintter/backend/genproto/entities/v1alpha;entities";

// Provides functionality to query information about Hypermedia Entities.
service Entities {
  // Gets a change by ID.
  rpc GetChange(GetChangeRequest) returns (Change);

  // Gets the DAG of changes for an entity.
  rpc GetEntityTimeline(GetEntityTimelineRequest) returns (EntityTimeline);

  // Triggers a best-effort discovery of an entity.
  rpc DiscoverEntity(DiscoverEntityRequest) returns (DiscoverEntityResponse);

  // Finds the list of local entities whose titles match the input string.
  // A fuzzy search is performed among documents, groups and accounts. 
  // For groups and documents, we match the title, while we match alias in accounts.
  rpc SearchLocalEntites(SearchLocalEntitesRequest) returns (SearchLocalEntitesResponse);
}

// Request to get a change by ID.
message GetChangeRequest {
  // ID of the change.
  string id = 1;
}

// Request to get the timeline of an entity.
message GetEntityTimelineRequest {
  // The entity ID to get the timeline for.
  string id = 1;
}

// Request to discover an entity.
message DiscoverEntityRequest {
  // Required. The entity ID to discover.
  string id = 1;

  // Optional. Version of the entity to discover.
  string version = 2;
}

// Response to discover an entity.
message DiscoverEntityResponse {
  // TODO(burdiyan): add summary of the discovery process.
  // Or maybe even make this call streaming?
}

// A change to an entity.
message Change {
  // ID of the change.
  string id = 1;

  // Author of the change.
  string author = 2;

  // Timestamp when the change was created.
  google.protobuf.Timestamp create_time = 3;

  // IDs of other changes this change depends on.
  repeated string deps = 4;

  // IDs of other changes that depend on this change.
  repeated string children = 6;

  // Indicates whether this changes comes from a trusted peer of ours.
  bool is_trusted = 5;
}

// The timeline of an entity.
message EntityTimeline {
  // The ID of the entity.
  string id = 1;

  // Account ID of the owner of the entity.
  string owner = 2;

  // The set of changes for the entity keyed by change ID.
  map<string, Change> changes = 3;

  // The sorted list of change IDs by time.
  repeated string changes_by_time = 4;

  // The set of changes that has no dependencies.
  // Normally there should only be one root,
  // but just in case it's defined as a list.
  repeated string roots = 5;

  // The set of leaf changes considering the entire DAG.
  repeated string heads = 6;

  // The set of author versions/variants sorted by timestamp.
  repeated AuthorVersion author_versions = 7;
}

// Set of heads from a given author.
message AuthorVersion {
  // Account ID of the author.
  string author = 1;

  // The set of leaf changes from that author.
  repeated string heads = 2;

  // The version string corresponding to the author's variant.
  // I.e. same as heads but concatenated with a '.' delimiter.
  string version = 3;

  // The timestamp of the author's version.
  // For compound versions the greatest timestamp is used.
  google.protobuf.Timestamp version_time = 4;
}

// A change to an entity.
message Entity {
  // EID of the entity.
  string id = 1;

  // Title of the entity, depending onf the type:
  // Alias in the case of account. 
  // Title in the case of groups and documents 
  // Empty in the case of comments.
  string title = 2;
}

// Request to 
message SearchLocalEntitesRequest {
  // Title of the entities to look for. Since we use 
  // Fuzzy search, a single title may return multiple 
  // entities.
  string title = 1;
}

// A list of entities matching the request. 
message SearchLocalEntitesResponse {
  // Entities matching the input title
  repeated Entity entities = 1;

  // Token for the next page if there's any.
  string next_page_token = 2;
}