syntax = "proto3";

package com.mintter;

option go_package = "mintter/api/go/v2;v2";

service Mintter {
  // Generates cryptographic seed that is used to derive all the cryptographic
  // keys necessary for Mintter to work. It's currenly supposed to be using
  // LND's Aezeed implementation, that solves some of the issues with BIP-39.
  // The seed is encoded as a mnemonic of N human readable words. The seed could
  // be reconstructed given these words and the passphrase.
  //
  // See: https://github.com/lightningnetwork/lnd/tree/master/aezeed.
  rpc GenSeed(GenSeedRequest) returns(GenSeedResponse);

  // After generating the seed, this call is used to commit the seed and
  // initialize the daemon's internal profile.
  rpc InitProfile(InitProfileRequest) returns(InitProfileResponse);

  // Retrieves profile information.
  //
  // TODO(burdiyan): return plain profile here.
  rpc GetProfile(GetProfileRequest) returns(GetProfileResponse);

  // Updates profile information.
  rpc UpdateProfile(UpdateProfileRequest) returns(UpdateProfileResponse);

  rpc ListProfiles(ListProfilesRequest) returns(ListProfilesResponse);

  // List profiles of your directly connected profiles.
  rpc ListSuggestedProfiles(ListSuggestedProfilesRequest)
      returns(ListSuggestedProfilesResponse);

  // Get network multiaddrs of the current node.
  rpc GetProfileAddrs(GetProfileAddrsRequest) returns(GetProfileAddrsResponse);

  // Establish a p2p connection to another peer on the network.
  rpc ConnectToPeer(ConnectToPeerRequest) returns(ConnectToPeerResponse);
}

message GenSeedRequest {
  // Passphrase that will be used to encipher the seed.
  bytes aezeed_passphrase = 1;
}

message GenSeedResponse {
  // The list of human-friendly words that can be used to backup the seed. These
  // words must be stored in a secret place by the user.
  repeated string mnemonic = 1;
}

message InitProfileRequest {
  // This is the password to encrypt the wallet data on-disk.
  bytes wallet_password = 1;

  // Mnemonic words generated by GenSeed call previous. Or existing aezeed seed.
  repeated string mnemonic = 2;

  // Optional passphrase that was used to generate the seed.
  bytes aezeed_passphrase = 3;
}

message InitProfileResponse {}

message UpdateProfileRequest {
  // Profile data to be updated.
  Profile profile = 1;
}

message UpdateProfileResponse {
  // Profile data after update.
  Profile profile = 1;
}

message GetProfileRequest {
  // Optional. Profile ID to retrieve. If empty - your own profile will return.
  string profile_id = 1;
}

message GetProfileResponse {
  // Retrieved profile data.
  Profile profile = 1;

  // Configuration parameters that are set for this node.
  Config config = 2;
}

message ListProfilesRequest {
  int32 page_size = 1;

  string page_token = 2;
}

message ListProfilesResponse {
  repeated Profile profiles = 1;

  string next_page_token = 2;
}

message ListSuggestedProfilesRequest {
  int32 page_size = 1;

  string page_token = 2;
}

message ListSuggestedProfilesResponse {
  repeated SuggestedProfile profiles = 1;

  string next_page_token = 2;
}

message GetProfileAddrsRequest {}

message GetProfileAddrsResponse {
  // List of multiaddrs this node can be connected at.
  repeated string addrs = 1;
}

message ConnectToPeerRequest {
  // A list of multiaddrs for the same peer ID to attempt p2p connection.
  // For example `/ip4/10.0.0.1/tcp/55000/p2p/QmDeadBeef`.
  repeated string addrs = 1;
}

message ConnectToPeerResponse {}

enum ConnectionStatus {
  // No connection and no extra information.
  NOT_CONNECTED = 0;

  // Has an open, live connection to a peer.
  CONNECTED = 1;

  // Was recently connected to a peer, terminated gracefully.
  CAN_CONNECT = 2;

  // Recently attempted to connect, but failed.
  CANNOT_CONNECT = 3;
}

message Profile {
  // Libp2p peer ID. Generated by the server and can't be updated.
  string peer_id = 1;

  // Mintter account ID.
  string account_id = 2;

  // Readable username or alias. Doesn't have to be unique.
  string username = 3;

  // Optional. Real email that could be publicly shared.
  string email = 4;

  // Optional. Free-form bio. Text only.
  string bio = 5;

  // Output only. Connection status for the given peer. Not useful when the
  // profile is the one of our own node.
  ConnectionStatus connection_status = 6;
}

message SuggestedProfile {
  Profile profile = 1;

  repeated string addrs = 2;
}

message Config {
  // The URI of the primary logo image.
  string logo_uri = 1;

  // The URI of the home page.
  string home_page_uri = 2;
}