syntax = "proto3";

package mintter.v2;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

option go_package = "mintter/proto/v2;v2";

service Documents {
  rpc CreateDraft(CreateDraftRequest) returns (Document);

  rpc UpdateDraft(UpdateDraftRequest) returns (UpdateDraftResponse);

  rpc PublishDraft(PublishDraftRequest) returns (PublishDraftResponse);

  rpc GetDocument(GetDocumentRequest) returns (GetDocumentResponse);

  rpc ListDocuments(ListDocumentsRequest) returns (ListDocumentsResponse);

  rpc DeleteDocument(DeleteDocumentRequest) returns (google.protobuf.Empty);
}

message CreateDraftRequest {
  // Optional. To update an already published document, create a new draft
  // specifying the version of a published version as parent.
  string parent = 1;
}

message UpdateDraftRequest {
  // Required. Full document object. Doesn't support partial updates.
  Document document = 1;

  // Optional. Set of blocks that belong to this document that has to be updated
  // or added. It's OK to send all the blocks of the document, but as an
  // optimization only the ones that have changed can be sent. Blocks that don't
  // originate from this document (i.e. transclusions) must not be sent here.
  map<string, Block> blocks = 2;
}

message UpdateDraftResponse {}

message PublishDraftRequest {
  // Version of the draft to be published. Only drafts can be published.
  // NOTICE: after publishing the draft its version effectively will be
  // forgotten and will be changed to the content-addressable ID. It will be
  // returned in the response to this request.
  string version = 1;
}

message PublishDraftResponse {
  // Immutable content-addressable version ID for the newly published document.
  string version = 1;
}

message GetDocumentRequest {
  // Optional. Globally unique version ID of the document. This is enough to
  // retrieve a published document.
  string version = 1;

  // Optional. The ID of the document. Required if version is not specified in
  // which case the currently existing draft (if any) will be returned.
  string id = 2;
}

message GetDocumentResponse {
  // Document metadata and block layout.
  Document document = 1;

  // Map of block id to blocks that are present in the document.
  map<string, Block> blocks = 2;

  // This kind of representation may allow us to implement pagination for large
  // documents in future.
}

message ListDocumentsRequest {
  // Optional. Used to limit the number of results. The default is up to the
  // server if not specified.
  int32 page_size = 1;

  // Optional. Used for pagination.
  string page_token = 2;

  // Optional. Filter by state of the document.
  PublishingState publishing_state = 3;

  // Optional. Used to filter the results by author. If empty it
  // will return current user's document.
  string author = 4;
}

message ListDocumentsResponse {
  // The items in this list will not contain the content itself to make the
  // response more light-weight. The full document with content can be obtain
  // using GetDocument method.
  repeated Document documents = 1;

  string next_page_token = 2;
}

message DeleteDocumentRequest {
  // Globally unique version of the document to be deleted from the local
  // machine. Documents that were already published and consumed by someone
  // cannot be globally deleted (which is intended).
  string version = 1;
}

message Document {
  // Required. Globally unique ID of the document. CID of the signed document
  // Permanode (a la Perkeep https://perkeep.org/doc/schema/permanode).
  string id = 1;

  // Human-friendly title of the document.
  string title = 2;

  // Subtitle of the document. Can also be a longer description or abstract.
  string subtitle = 3;

  // Output only. ID of the author of the document.
  string author = 4;

  // Output only. Version of the document if it's a published one. For drafts
  // it's empty.
  string version = 5;

  // Output only. Previous version of the document if any.
  string parent = 6;

  // Output only. Current state of the document.
  PublishingState publishing_state = 7;

  // Nested list of block references according to the document's block
  // hierarchy.
  BlockRefList block_ref_list = 8;

  // Output only. Time when the draft of this document was created for the first
  // time.
  google.protobuf.Timestamp create_time = 9;

  // Output only. Last time this document was updated.
  google.protobuf.Timestamp update_time = 10;

  // Output only. Time when this version of the document was published. Empty
  // for drafts.
  google.protobuf.Timestamp publish_time = 11;

  // next id - 12.
}

// Publishing state of the document.
enum PublishingState {
  DRAFT = 0;

  PUBLISHED = 1;
}

// Nested list of block references.
message BlockRefList {
  enum Style {
    NONE = 0;

    BULLET = 1;

    NUMBER = 2;
  }

  // List style to be used for displaying the blocks in a list. Should only
  // applied to immediate children, not recursively.
  Style style = 1;

  // List of block references, each of which may include other BlockRefList's
  // recursively.
  repeated BlockRef blocks = 2;
}

// Block reference.
message BlockRef {
  // Block ID.
  string id = 1;

  // Optional. List of children block references.
  BlockRefList block_ref_list = 3;
}

// Block is the main content element of the document.
message Block {
  // ID of the block that must be unique per document.
  string id = 1;

  // Optional. Version of the document the block was reused from. Only
  // applicable for reused blocks.
  string version = 2;

  // Actual content of the block of different types.
  oneof content {
    Paragraph paragraph = 3;

    Image image = 4;
  }
}

// Text block with its inline elements.
message Paragraph {
  // Inline elements must be displayed on the same logical line. There must be
  // at least one inline element for a valid paragraph.
  repeated InlineElement inline_elements = 1;

  // TODO(burdiyan): Here we can add paragraph styling like background colors
  // and so on.
}

message InlineElement {
  // Actual â€ ext of the paragraph.
  string text = 1;

  // Markup to be applied for the inline element.
  TextStyle text_style = 2;

  // TODO(burdiyan): Implement inline links.
}

message TextStyle {
  bool bold = 1;

  bool italic = 2;

  bool underline = 3;

  bool code = 4;
}

message Image {
  string url = 1;

  string alt_text = 2;
}