syntax = "proto3";

package com.mintter.groups.v1alpha;

option go_package = "mintter/backend/genproto/groups/v1alpha;groups";

// Service exposed by the Mintter website.
// It's exposed as a normal gRPC interface, and also over libp2p.
service Website {
  // Gets the public information about the website.
  // This information is also available as JSON over HTTP on `/.well-known/hypermedia-site`.
  rpc GetSiteInfo(GetSiteInfoRequest) returns (PublicSiteInfo);

  // Initializes the server to become a website for a specific group.
  rpc InitializeServer(InitializeServerRequest) returns (InitializeServerResponse);
}

// Request for getting the public site information.
message GetSiteInfoRequest {}

// Request for initializing the site.
message InitializeServerRequest {
  // Required. The secret provided during the site deployment process.
  // It's a trust-on-first-use, one-time-use secret that is used for the initial site setup,
  // during which the site remembers the groups that it must serve, and who is the owner of the site.
  string secret = 1;

  // Required. Account ID of the owner of the site.
  string owner_account_id = 2;

  // Required. ID of the group that should be served on this site.
  string group_id = 3;
}

// Response for initializing the site.
message InitializeServerResponse {}

// Publicly available information about the website.
message PublicSiteInfo {
  // P2P information for the website.
  PeerInfo peer_info = 1;

  // Group ID being served on the site.
  // Can be empty if site is not initialized yet.
  string group_id = 2;
}

// Peer information for P2P network.
message PeerInfo {
  // Libp2p peer ID.
  string peer_id = 1;

  // Multiaddrs for the peer,
  // without the peer ID,
  // in order to use it with libp2p AddrInfo API.
  repeated string addrs = 2;

  // Mintter Account ID of the site.
  string account_id = 3;
}
