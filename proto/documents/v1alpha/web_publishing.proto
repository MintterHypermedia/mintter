syntax = "proto3";

package com.mintter.documents.v1alpha;
import "documents/v1alpha/documents.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

option go_package = "mintter/backend/genproto/documents/v1alpha;documents";

// Service exposed by the local application backend for
// configuring and managing remote Mintter Sites.
service WebPublishing {
  // Adds a site configuration to the local app backend.
  rpc AddSite(AddSiteRequest) returns (SiteConfig);

  // Removes site configuration from the local app backend.
  rpc RemoveSite(RemoveSiteRequest) returns (google.protobuf.Empty);

  // Lists configured sites.
  rpc ListSites(ListSitesRequest) returns (ListSitesResponse);

  // Lists web publication records for a given document among the configured web sites.
  rpc ListWebPublicationRecords(ListWebPublicationRecordsRequest) returns (ListWebPublicationRecordsResponse);
}

// Request to add a site.
message AddSiteRequest {
  // Required. Site hostname.
  string hostname = 1;

  // Optional. Invite token for the site. Not needed
  // if the site already knows our Account ID.
  string invite_token = 2;
}

// Request to remove a site from the local app backend.
message RemoveSiteRequest {
  // Required. Site hostname.
  string hostname = 1;
}

// Request to list configured sites.
message ListSitesRequest {
  // Optional. Number of items per page.
  int32 page_size = 1;

  // Optional. Token for a specific page.
  string page_token = 2;
}

// Response with a list of sites.
message ListSitesResponse {
  // List of sites.
  repeated SiteConfig sites = 1;

  // Token for the next page if any.
  string next_page_token = 2;
}

// Request to a list publication records for a given document
// among the configured web sites.
message ListWebPublicationRecordsRequest {
  // Required. Document ID.
  string document_id = 1;

  // Optional. Specific version of a document.
  string version = 2;
}

// Response with a list of publication records among the web sites.
message ListWebPublicationRecordsResponse {
  repeated WebPublicationRecord publications = 1;
}

// Local site configuration.
message SiteConfig {
  // Hostname of the site.
  string hostname = 1;

  // Our role on this site.
  Member.Role role = 2;
}

// Member of the web site.
message Member {
  // Roles a member of the Mintter Site can have.
  enum Role {
    // Invalid default value.
    ROLE_UNSPECIFIED = 0;

    // Currently there can only be one owner of the site.
    OWNER = 1;

    // Editors are allowed to push content to the site.
    EDITOR = 2;
  }

  // Mintter Account ID of the member.
  string account_id = 1;

  // Member's role on the site.
  Role role = 2;
}

// Information about a Mintter Document published on a Mintter Site.
// One Document ID can be published with different versions and/or
// under different paths on a Mintter Web Site, so it can have
// multiple of these records per site.
message WebPublicationRecord {
  string document_id = 1;

  string version = 2;

  string hostname = 3;

  string path = 4;
}

// API exposed by the remote server that allows
// publishing Mintter Documents to serve them on the Web.
// The server implementing this API is responsible for authenticating
// callers for its administrative RPCs.
// This API is also exposed by the local application backend, which would act
// as a proxy to the remote web server, handling the authentication with its device private key.
// The local application backend would require a special metadata header specifying the hostname
// of the Mintter Site to proxy the request to.
//
// Metadata Header: x-mintter-site-hostname
service WebSite {
  // Creates a new invite token for registering a new member.
  // Protected. Must require authentication.
  rpc CreateInviteToken(CreateInviteTokenRequest) returns (InviteToken);

  // Redeems a previously created invite token to register a new member.
  rpc RedeemInviteToken(RedeemInviteTokenRequest) returns (RedeemInviteTokenResponse);

  // Gets public-facing site information.
  rpc GetSiteInfo(GetSiteInfoRequest) returns (SiteInfo);

  // Updates public-facing site information. Doesn't support partial updates,
  // hence all the fields must be provided.
  // Protected. Must require authentication.
  rpc UpdateSiteInfo(UpdateSiteInfoRequest) returns (SiteInfo);

  // Lists registered members on the site.
  // May be protected or public depending on the privacy policies of the web site.
  rpc ListMembers(ListMembersRequest) returns (ListMembersResponse);

  // Gets information about a specific member.
  // May be protected or public depending on the privacy policies of the web site.
  rpc GetMember(GetMemberRequest) returns (Member);

  // Deletes an existing member.
  // Protected. Must require authentication.
  rpc DeleteMember(DeleteMemberRequest) returns (google.protobuf.Empty);

  // Publishes a Mintter Document on the remote web server along with any supporting materials.
  rpc PublishDocument(PublishDocumentRequest) returns (PublishDocumentResponse);

  // Unpublishes a previously published Document.
  rpc UnpublishDocument(UnpublishDocumentRequest) returns (UnpublishDocumentResponse);

  // list all the published documents
  rpc ListWebPublications(ListWebPublicationsRequest) returns (ListWebPublicationsResponse);

  // Get the document published at a given path.
  rpc GetPath(GetPathRequest) returns (GetPathResponse);
}

// Request to create a new invite token.
message CreateInviteTokenRequest {
  // Required. The role to be associated with the new member after invite is redeemed.
  // The server might be configured to limit invites for certain roles, but it's not
  // restricted in this API definition.
  Member.Role role = 1;

  // Optional. The timestamp after which the invite token will expire if not redeemed.
  // If not provided, the server will decide the deadline based on the internal configuration.
  google.protobuf.Timestamp expire_time = 2;
}

// Request to redeem an invite token. This is the most security-sensitive request,
// because it allows to register new members on the site. The server must obtain
// and verify the relation of the communicating peer with a corresponding Mintter Account.
// After the token is redeemed, a new member on the site must be created, associating
// the Mintter Account of the caller with the role invite token was created for.
message RedeemInviteTokenRequest {
  // Value of the invite token.
  string token = 1;

}

// Response after the token is redeemed.
message RedeemInviteTokenResponse {
  // The role associated with the redeemed token
  Member.Role role = 1;

}

// Request to get the site info.
message GetSiteInfoRequest {}

// Request to update site info. Doesn't support partial updates.
message UpdateSiteInfoRequest {
  // Title of the site.
  string title = 1;

  // Description of the site.
  string description = 2;
}

// Request to list site members.
message ListMembersRequest {
  // Optional. Number of items per page.
  int32 page_size = 1;

  // Optional. Token for a specific page.
  string page_token = 2;
}

// Response listing site members.
message ListMembersResponse {
  // List of members.
  repeated Member members = 1;

  // Optional token for the next page.
  string next_page_token = 2;
}

// Request to get information about a specific member.
message GetMemberRequest {
  // Required. Mintter Account ID to get the information for.
  string account_id = 1;
}

// Request to delete an existing member.
message DeleteMemberRequest {
  // Required. Mintter Account ID of the member to be deleted.
  string account_id = 1;
}

// Request to publish a Mintter Document on a Mintter Web Site.
message PublishDocumentRequest {
  // Required. ID of the document to publish.
  string document_id = 1;

  // Required. Specific version of the document to publish.
  string version = 2;

  // Required. Path for the URL of this document on the web site.
  string path = 3;

  // List of other supporting materials that are necessary
  // to properly render the document being published.
  // Namely, originals that are transcluded (or possibly linked)
  // in the document being published.
  repeated ReferencedDocument referenced_documents = 4;
}

// Response when publishing a document.
message PublishDocumentResponse {}

// Request to unpublish a document from a site.
message UnpublishDocumentRequest {
  // Optional. Document ID to unpublish from the web site.
  // If empty then path must be provided.
  string document_id = 1;

  // Optional. Specific version to unpublish from the web site.
  // If empty, document ID or path must be provided.
  string version = 2;

  // Optional. Path to unpublish from the web site.
  // If empty, document_id must be provided.
  string path = 3;
}

// Response after unpublishing a web publication.
message UnpublishDocumentResponse {}

// Request to list documents published on a web site.
message ListWebPublicationsRequest {
  // Number of items per page.
  int32 page_size = 1;

  // Token for a specific page.
  string page_token = 2;
}

// Response of all documents published on a web site.
// A single Document ID can have multiple publication records
// under different paths, and/or with different versions.
message ListWebPublicationsResponse {
  repeated WebPublicationRecord publications = 1;
}

// Invite token is produced by the owner of the site to invite new members.
message InviteToken {
  // The value of the invite token.
  string token = 1;

  // Timestamp after which the token will not be recognized by the site.
  google.protobuf.Timestamp expire_time = 2;
}

// Public-facing information about the Mintter Site.
message SiteInfo {
  // Hostname under which this site is exposed.
  string hostname = 1;

  // Title of this site.
  string title = 2;

  // Description of this site.
  string description = 3;

  // Mintter Account ID that is configured as the owner of this site.
  string owner = 4;
}

// Response for the /.well-known discovery HTTP page.
message SiteDiscoveryConfig {
  // The addresses to connect to the remote site via p2p. In multiaddress format.
  repeated string addresses = 1;

  // Mintter Account ID of the site.
  string account_id = 2;

}

// Description of "referenced" materials that go along
// with a Mintter Document being published on a Web Site.
message ReferencedDocument {
  // Required. ID of the document.
  string document_id = 1;

  // Required. Specific version of the document.
  string version = 2;
}

message GetPathRequest {
  // Get doc by path. Empty string === home/root doc.
  string path = 1;
}

message GetPathResponse {
  // Publication
  Publication publication = 1;

}
