syntax = "proto3";

package com.mintter.documents.v1alpha;

import "documents/v1alpha/documents.proto";
import "google/protobuf/timestamp.proto";

option go_package = "mintter/backend/genproto/documents/v1alpha;documents";

// Comments service allows users to add comments to documents.
service Comments {
  // Creates a new comment.
  rpc CreateComment(CreateCommentRequest) returns (Comment);

  // Creates a new reply to an existing comment.
  rpc CreateReply(CreateReplyRequest) returns (Comment);

  // Gets a single comment by ID.
  rpc GetComment(GetCommentRequest) returns (Comment);

  // Lists comments for a given target.
  rpc ListComments(ListCommentsRequest) returns (ListCommentsResponse);
}

// Request to create a comment.
message CreateCommentRequest {
  // Required. The URI of the target hypermedia resource which is being commented.
  // It's best to use versioned URIs to propagate better context and intent,
  // even if the comments are "overlaid" onto the newer versions of the resource.
  string target = 1;

  // Required. Content of the comment.
  repeated BlockNode content = 2;
}

// Request to create a reply.
message CreateReplyRequest {
  // Required. ID of the replied comment.
  string replied_comment = 1;

  // Required. Content of the reply.
  repeated BlockNode content = 2;
}

// Request to get a comment.
message GetCommentRequest {
  // Required. ID of the comment to retrieve.
  string id = 1;
}

// Request to list comments.
message ListCommentsRequest {
  // Required. The URI of the target resource for which comments should be listed.
  string target = 1;

  // Optional. Flag to omit replies from the result. By default replies are included.
  bool omit_replies = 2;

  // Optional. The maximum number of comments to return.
  int32 page_size = 3;

  // Optional. The page token obtained from a previous request (if any).
  string page_token = 4;
}

// Response with a list of comments.
message ListCommentsResponse {
  // List of comments.
  repeated Comment comments = 1;

  // Token to retrieve the next page of comments (if necessary).
  string next_page_token = 2;
}

// Comment is a unit of discussion.
// The initial comment is posted targeting an existing hypermedia resource.
// Replies are posted targeting the initial root comment.
// Replies also link to some other comment they are replying to.
message Comment {
  // ID of the current comment.
  string id = 1;

  // The URI of the target resource which the comment is attached to.
  // For initial comments this is normally a Hypermedia Document, but potentially can be anything.
  // For replies this should be the ID of the initial root comment that has started the conversation tread,
  // i.e. direct replies, and replies to replies should all have the same root comment as target.
  string target = 2;

  // The ID of the comment to which this comment is a reply.
  // For initial comments this field is empty.
  string replied_comment = 4;

  // Account ID of the author of the comment.
  string author = 5;

  // Content of the comment.
  repeated BlockNode content = 6;

  // Timestamp when the comment was created.
  google.protobuf.Timestamp create_time = 7;
}
