syntax = "proto3";

package com.mintter.documents.v1alpha;

import "google/protobuf/empty.proto";
import "documents/v1alpha/documents.proto";

option go_package = "mintter/backend/genproto/documents/v1alpha;documents";

// Comments service provides the way to add comments to publications.
service Comments {
  // Creates a new conversation about a particular selection in a document.
  rpc CreateConversation(CreateConversationRequest) returns (Conversation);

  // Adds a comment to a previously existing conversation.
  rpc AddComment(AddCommentRequest) returns (Block);

  // Deletes an existing conversation.
  rpc DeleteConversation(DeleteConversationRequest) returns (google.protobuf.Empty);

  // Marks an existing conversation as resolved.
  rpc ResolveConversation(ResolveConversationRequest) returns (ResolveConversationResponse);

  // Deletes a comment from a conversation.
  rpc DeleteComment(DeleteCommentRequest) returns (google.protobuf.Empty);

  // Lists conversations of a particular document.
  rpc ListConversations(ListConversationsRequest) returns (ListConversationsResponse);
}

// Request to create a conversation.
message CreateConversationRequest {
  // Required. The ID of the publication for which the conversation should be created.
  string document_id = 1;

  // Required. Selected portions in the original document which are being commented on.
  // At least one element must be present.
  repeated Selector selectors = 2;

  // Required. The first comment that starts the conversation.
  Block initial_comment = 3;
}

// Request to add a comment.
message AddCommentRequest {
  // ID of the existing conversation.
  string conversation_id = 1;

  // Block corresponding to the text of the comment.
  // Using a block ID that already exists in the conversation will replace the comment.
  Block comment = 2;
}

// Request to delete a conversation.
message DeleteConversationRequest {
  // ID of the conversation to delete.
  string conversation_id = 1;
}

// Request to resolve a conversation.
message ResolveConversationRequest {
  // ID of the conversation to resolve.
  string conversation_id = 1;
}

// Response to resolve a conversation.
message ResolveConversationResponse {}

// Request to delete a comment from a conversation.
message DeleteCommentRequest {
  // Required. ID of the conversation.
  string conversation_id = 1;

  // Required. ID of the comment block to be deleted.
  string block_id = 2;
}

// Request to list conversations.
message ListConversationsRequest {
  // Required. Document ID for which conversations should be listed.
  string document_id = 1;

  // Optional. Number of results per page.
  int32 page_size = 3;

  // Optional. Token for the page to return.
  string page_token = 4;
}

// Response with a list of conversations.
message ListConversationsResponse {
  // Conversations matching the list request.
  repeated Conversation conversations = 1;

  // Token for the next page if there're any.
  string next_page_token = 2;
}

// Selector defines the selected portion of text in a given block as an open-ended interval [start, end).
// If the interval is missing, the whole block is assumed.
message Selector {
  // Required. ID of the block in the original document which is being commented on.
  string block_id = 1;

  // Required. Specific block revision which is being commented.
  string block_revision = 2;

  // Optional. Start position of the selection within the block. Expressed in Unicode Code Points.
  // If start is specified, end must be specified as well. Must be start < end.
  int32 start = 3;

  // Optional. End position of the selection within the block. Expressed in Unicode Code Points.
  // Required if start was specified. Must be greater than start if specified.
  int32 end = 4;
}

// Conversation is a set of comments anchored to a particular selection in a document.
message Conversation {
  // ID of the Conversation.
  string id = 1;

  // Selected portions of the original document which are being commented on.
  repeated Selector selectors = 2;

  // List of comments in the conversation.
  // Ordered by time.
  repeated Block comments = 3;
}
