syntax = "proto3";

package com.mintter.documents.v1alpha;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

option go_package = "mintter/backend/api/documents/v1alpha;documents";

// Drafts service exposes the functionality
service Drafts {
  // Creates a new draft with a new permanent document ID.
  rpc CreateDraft(CreateDraftRequest) returns (Document);

  // Deletes a draft by its document ID.
  rpc DeleteDraft(DeleteDraftRequest) returns (google.protobuf.Empty);

  // Gets a single draft if exists.
  rpc GetDraft(GetDraftRequest) returns (Document);

  // Updates a draft instance. Supports partial updates.
  rpc UpdateDraft(UpdateDraftRequest) returns (Document);

  // List currently stored drafts.
  rpc ListDrafts(ListDraftsRequest) returns (ListDraftsResponse);

  // Publishes a draft. I.e. draft will become a publication, and will no longer appear in drafts section.
  rpc PublishDraft(PublishDraftRequest) returns (PublishDraftResponse);
}

// Request to create a new draft.
message CreateDraftRequest {
  // Existing Document ID can be specified to update
  // previously published document. A draft will be created
  // with the content of the most recent known version.
  string existing_document_id = 1;
}

// Request to delete an existing draft.
message DeleteDraftRequest {
  // ID of the document whose draft needs to be deleted. Only one
  string document_id = 1;
}

// Request to get a single draft.
message GetDraftRequest {
  // ID of the document for which draft was previously created.
  string document_id = 1;
}

// Request to update an existing draft.
message UpdateDraftRequest {
  // Instance of the document to be updated.
  Document document = 1;
}

// Request to list stored drafts.
message ListDraftsRequest {
  // Optional. Number of results per page.
  int32 page_size = 1;

  // Optional. Token for the page to return.
  string page_token = 2;
}

// Response for listing drafts.
message ListDraftsResponse {
  // Information about drafts matching the list request.
  repeated DocumentInfo drafts = 1;

  // Token for the next page if there're any.
  string next_page_token = 2;
}

// Request to publish a draft.
message PublishDraftRequest {
  // ID of the document which current draft needs to be published.
  string document_id = 1;
}

// Response from publishing a draft.
message PublishDraftResponse {
  // Version identifier of the published document.
  string version = 1;
}

// Publications service provides access to published documents.
service Publications {
  // Gets a single publication.
  rpc GetPublication(GetPublicationRequest) returns (Publication);

  // Deletes a publication from the local node. It removes all the patches corresponding to a document.
  rpc DeletePublication(DeletePublicationRequest) returns (google.protobuf.Empty);

  // Lists stored publications. Only the most recent versions show up.
  rpc ListPublications(ListPublicationsRequest) returns (ListPublicationsResponse);
}

// Request for getting a single publication.
message GetPublicationRequest {
  // Required. ID of the published document.
  string document_id = 1;

  // Optional. Specific version of the published document. If empty, the latest one is returned.
  string version = 2;
}

// Request for deleting a publication.
message DeletePublicationRequest {
  // Document ID of the publication to be removed.
  // All versions will also be removed.
  string document_id = 1;
}

// Request for listing publications.
message ListPublicationsRequest {
  // Optional. Number of results per page. Default is defined by the server.
  int32 page_size = 1;

  // Optional. Value from next_page_token obtains from a previous response.
  string page_token = 2;
}

// Response with list of publications.
message ListPublicationsResponse {
  // List of publications matching the request.
  // Only most recent versions are returned.
  repeated DocumentInfo publications = 1;

  // Token for the next page if there're more results.
  string next_page_token = 2;
}

// State of the document after publication.
message Publication {
  // Version points to the state of the publication at some point in time.
  // It is represented as a string, although it can be a list of CIDs.
  // The order of hashes must be deterministic, which is tricky because
  // CIDs can have different base encoding when represented as a string.
  // So same hash, can have different string representations.
  // We should either define a canonical base encoding, or sort binary
  // representation of the hash portion of the CID.
  // Anyway, all these details should be opaque for consumers of this API.
  // On the other hand, if API consumers never compare versions as plain strings
  // it doesn't really matter if different version strings point to the same document.
  string version = 1;

  // Document metadata.
  Document document = 2;

  // Time when this version was published.
  google.protobuf.Timestamp publish_time = 3;
}

// Basic metadata of a document.
message DocumentInfo {
  // Permanent ID of the document.
  string id = 1;

  // Title of the document.
  string title = 1;

  // Subtitle of the document.
  string subtitle = 2;

  // Output only. Author of the document.
  string author = 3;

  // Output only. Time when document was created.
  google.protobuf.Timestamp create_time = 4;

  // Output only. Time when document was updated.
  google.protobuf.Timestamp update_time = 5;
}

// Content of a document.
message DocumentContent {
  // JSON-serialized Mintter AST.
  // It's expected to be the first child of the document root,
  // which must be of type GroupingContent.
  string json = 1;
}

// Document represents metadata and content of a draft or publication.
message Document {
  DocumentInfo info = 1;

  DocumentContent content = 2;
}