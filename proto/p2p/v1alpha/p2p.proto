syntax = "proto3";

package com.mintter.p2p.v1alpha;

option go_package = "mintter/backend/genproto/p2p/v1alpha;p2p";

// Mintter P2P API.
service P2P {
  // Handshake gets called whenever two Mintter peers connect to each other.
  // No matter who initiates the connect, this will make sure both peers exchange their information.
  rpc Handshake(HandshakeInfo) returns (HandshakeInfo);

  // Returns list of all the objects authored by the account this peer belongs to.
  // Used for syncing objects between peers. Clients are expected to periodically
  // use this call to pull the latest objects from the remote peer.
  //
  // This is a very naive syncing protocol, it returns all the objects and all the changes
  // every time. Eventually this will be improved and made more efficient.
  rpc ListObjects(ListObjectsRequest) returns (ListObjectsResponse);

  // Request a peer to issue a lightning BOLT-11 invoice
  rpc RequestInvoice(RequestInvoiceRequest) returns (RequestInvoiceResponse);

  // CreateSite tells a server which group it should serve.
  rpc CreateSite(CreateSiteRequest) returns (CreateSiteResponse);
}

message HandshakeInfo {
  // The CID of the key delegation blob.
  bytes key_delegation_cid = 1;

  // The bytes of the key delegation blob.
  bytes key_delegation_data = 2;
}

message ListObjectsRequest {
  // TODO: add some filtering options here.
  // Some ideas:
  // - Filter by account ID.
  // - Filter by object type.
  // - Send the timestamps of the last sync to avoid sending old data.
  // - etc.
}

message ListObjectsResponse {
  repeated Object objects = 1;
}

message Object {
  string id = 1;

  repeated string change_ids = 2;
}

// Request Invoice request.
message RequestInvoiceRequest {
  // The invoice amount in satoshis
  int64 amount_sats = 1;

  // Optional requested memo to be attached in the invoice
  string memo = 2;

  // True to request a hold invoice instead of a regular one. If true, then preimage_hash should be filled
  bool hold_invoice = 3;

  // Preimage hash of the requested hold invoice. If hold_invoice is set to false this field is skipped
  bytes preimage_hash = 4;
}

// Request invoice response
message RequestInvoiceResponse {
  // Text encoded BOLT-11 Invoice
  string pay_req = 1;
}

// Links a server and a group.
message CreateSiteRequest {
  // Secret link provided by the deployment script.
  string link = 1;

  // ID of the group to be served.
  string group_id = 2;

  // Optional version of the group to be served. 
  // If empty, latest version is assumed.
  string version = 3;
}

// Create site response
message CreateSiteResponse {
  // Owner of the site.
  string owner_id = 1;

  // ID of the site.
  string group_id = 2;
}