syntax = "proto3";

package com.mintter.p2p.v1alpha;

option go_package = "mintter/backend/api/p2p/v1alpha;p2p";

import "google/protobuf/empty.proto";

// Mintter P2P API.
service P2P {
  // Get basic information about the peer.
  rpc GetPeerInfo(GetPeerInfoRequest) returns (PeerInfo);

  // Get version of a specific object.
  rpc GetObjectVersion(GetObjectVersionRequest) returns (Version);

  // Exchange want lists upon initial connection.
  rpc ExchangeWantList(WantList) returns (WantList);

  // Send delta updates of our own wants.
  rpc UpdateWantList(WantList) returns (UpdateWantsResponse);

  // Notify remote peer about an updated object version.
  // Only updated PeerVersions can be included if desired.
  rpc UpdateObjectVersion(Version) returns (google.protobuf.Empty);

  // Request a peer to issue a lightning BOLT-11 invoice
  rpc RequestInvoice(RequestInvoiceRequest) returns (RequestInvoiceResponse);
}

message GetPeerInfoRequest {}

message GetObjectVersionRequest {
  string object_id = 1;
}

message UpdateWantsResponse {}

message PeerInfo {
  // Account ID this peer belongs to.
  string account_id = 1;
}

message Version {
  string object_id = 1;

  repeated PeerVersion version_vector = 2;
}

message PeerVersion {
  string peer = 1;

  string head = 2;

  uint64 seq = 3;

  uint64 lamport_time = 4;
}

// List of wanted and unwanted object IDs. Can be used as a snapshot or deltas.
message WantList {
  // List of object IDs that are wanted.
  repeated string wants = 1;

  // List of object IDs that are unwanted.
  repeated string unwants = 2;

  // Shows whether want list is a snapshot or delta update.
  bool snapshot = 3;
}

// List of wanted and unwanted object IDs. Can be used as a snapshot or deltas.
message RequestInvoiceRequest {
  // The invoice amount in satoshis
  int64 amount_sats = 1;

  // Optional requested memo to be attached in the invoice
  string memo = 2;

  // True to request a hold invoice instead of a regular one. If true, then preimage_hash should be filled
  bool hold_invoice = 3;

  // Preimage hash of the requested hold invoice. If hold_invoice is set to false this field is skipped
  bytes preimage_hash = 4;
}

message RequestInvoiceResponse {
  // Text encoded BOLT-11 Invoice
  string pay_req = 1;
}
