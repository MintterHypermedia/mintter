syntax = "proto3";

package com.mintter.p2p.v1alpha;

option go_package = "mintter/backend/genproto/p2p/v1alpha;p2p";

// Mintter P2P API.
service P2P {
  // Handshake gets called whenever two Mintter peers connect to each other.
  // No matter who initiates the connect, this will make sure both peers exchange their information.
  rpc Handshake(HandshakeInfo) returns (HandshakeInfo);

  // Returns list of all the objects authored by the account this peer belongs to.
  // Used for syncing objects between peers. Clients are expected to periodically
  // use this call to pull the latest objects from the remote peer.
  rpc ListObjects(ListObjectsRequest) returns (ListObjectsResponse);

  // Get basic information about the peer.
  rpc GetPeerInfo(GetPeerInfoRequest) returns (PeerInfo);

  // Request a peer to issue a lightning BOLT-11 invoice
  rpc RequestInvoice(RequestInvoiceRequest) returns (RequestInvoiceResponse);
}

message HandshakeInfo {
  // Account ID this peer belongs to.
  string account_id = 1;

  // Account Mintter Object ID.
  string account_object_id = 2;

  // Version of the Account Object this peer belongs to.
  string version = 3;
}

message ListObjectsRequest {
  // TODO: add some filtering options here.
  // Some ideas:
  // - Filter by account ID.
  // - Filter by object type.
  // - Send the timestamps of the last sync to avoid sending old data.
  // - etc.
}

message ListObjectsResponse {
  repeated Object objects = 1;
}

message Object {
  string id = 1;

  repeated Version version_set = 2;
}

message Version {
  string account_id = 1;

  string device_id = 2;

  string version = 3;

  // TODO: implement signed versions to allow clients to distinguish between first-party and third-party state.
}

message GetPeerInfoRequest {}

message PeerInfo {
  // Account ID this peer belongs to.
  string account_id = 1;
}

// List of wanted and unwanted object IDs. Can be used as a snapshot or deltas.
message RequestInvoiceRequest {
  // The invoice amount in satoshis
  int64 amount_sats = 1;

  // Optional requested memo to be attached in the invoice
  string memo = 2;

  // True to request a hold invoice instead of a regular one. If true, then preimage_hash should be filled
  bool hold_invoice = 3;

  // Preimage hash of the requested hold invoice. If hold_invoice is set to false this field is skipped
  bytes preimage_hash = 4;
}

message RequestInvoiceResponse {
  // Text encoded BOLT-11 Invoice
  string pay_req = 1;
}
