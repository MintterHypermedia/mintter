syntax = "proto3";

package com.mintter;

option go_package = "proto";

service Mintter {
  // Generate cryptographic seed that is used to derive all the cryptographic
  // keys necessary for Mintter to work. It's currenly supposed to be using
  // LND's Aezeed implementation, that solves some of the issues with BIP-39.
  // The seed is encoded as a mnemonic of N human readable words. The seed could
  // be reconstructed given these words and the passphrase.
  //
  // See: https://github.com/lightningnetwork/lnd/tree/master/aezeed.
  rpc GenSeed(GenSeedRequest) returns (GenSeedResponse) {}

  // InitWallet is used to commit the previously generated seed and initialize
  // the daemon's internal wallet (master key).
  rpc InitWallet(InitWalletRequest) returns (InitWalletResponse) {}
}

message GenSeedRequest {
  // Passphrase that will be used to encipher the seed.
  bytes aezeed_passphrase = 1;
}

message GenSeedResponse {
  // The list of human-friendly words that can be used to backup the seed. These
  // words must be stored in a secret place by the user.
  repeated string mnemonic = 1;

  // Raw bytes of the seed encrypted with the passphraze.
  bytes enciphered_seed = 2;
}

message InitWalletRequest {
  // This is the password to encrypt the wallet data on-disk.
  bytes wallet_password = 1;

  // Mnemonic words generated by GenSeed call previous. Or existing aezeed seed.
  repeated string mnemonic = 2;

  // Optional passphrase that was used to generate the seed.
  bytes aezeed_passphrase = 3;
}

message InitWalletResponse {}