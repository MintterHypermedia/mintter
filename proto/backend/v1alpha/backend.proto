syntax = "proto3";

package com.mintter.backend.v1alpha;

// import "google/protobuf/timestamp.proto";
// import "google/protobuf/empty.proto";

option go_package = "mintter/api/go/backend/v1alpha;backend";

// Backend API encapsulates main functionality of the Mintter daemon.
service Backend {
  // Generates cryptographic seed that is used to derive Mintter Account Key.
  // It's currenly supposed to be using LND's Aezeed implementation, which solves some
  // of the issues with BIP-39. The seed is encoded as a mnemonic of 24 human-readable words.
  // The seed could be reconstructed given these words and the passphrase.
  //
  // See: https://github.com/lightningnetwork/lnd/tree/master/aezeed.
  rpc GenSeed(GenSeedRequest) returns (GenSeedResponse);

  // After generating the seed, this call is used to commit the seed and
  // create an account binding between the device/peer and previously created account.
  rpc BindAccount(BindAccountRequest) returns (BindAccountResponse);

  rpc DialPeer(DialPeerRequest) returns (DialPeerResponse);
}

message GenSeedRequest {
  // Passphrase that will be used to encipher the seed.
  string aezeed_passphrase = 1;
}

message GenSeedResponse {
  // The list of human-friendly words that can be used to backup the seed. These
  // words must be stored in a secret place by the user.
  repeated string mnemonic = 1;
}

message BindAccountRequest {
  repeated string mnemonic = 1;

  string aezeed_passphrase = 2;
}

message BindAccountResponse {
  string account_id = 1;
}

message DialPeerRequest {
  // A list of multiaddrs for the same peer ID to attempt p2p connection.
  // For example `/ip4/10.0.0.1/tcp/55000/p2p/QmDeadBeef`.
  repeated string addrs = 1;
}

message DialPeerResponse {}