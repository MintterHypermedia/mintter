syntax = "proto3";

package com.seed.daemon.v1alpha;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

option go_package = "seed/backend/genproto/daemon/v1alpha;daemon";

// Daemon API encapsulates main functionality of the Seed daemon.
service Daemon {
  // Generates a set of mnemonic words used to derive Seed Account Key, and the underlying
  // seed lndhub wallet. The cipher schema is BIP-39 and the entropy is encoded as a
  // mnemonic of 12-24 human-readable english words.
  // The seed could be reconstructed given these words and the passphrase.
  rpc GenMnemonic(GenMnemonicRequest) returns (GenMnemonicResponse);

  // After generating the seed, this call is used to commit the seed and
  // create an account binding between the device and account.
  rpc Register(RegisterRequest) returns (RegisterResponse);

  // Get generic information about the running node.
  rpc GetInfo(GetInfoRequest) returns (Info);

  // Force-trigger periodic background sync of Seed objects.
  rpc ForceSync(ForceSyncRequest) returns (google.protobuf.Empty);
}

message GenMnemonicRequest {
  // Number of mnemonic words to encode the seed
  uint32 mnemonics_length = 1;
}

message GenMnemonicResponse {
  // The list of human-friendly words that can be used to backup the seed. These
  // words must be stored in a secret place by the user.
  repeated string mnemonic = 1;
}

message RegisterRequest {
  repeated string mnemonic = 1;

  string passphrase = 2;
}

message RegisterResponse {
  string account_id = 1;
}

message GetInfoRequest {}

message ForceSyncRequest {}

// Info is a generic information about the running node.
message Info {
  // Account ID this node belongs to.
  string account_id = 1;

  // Libp2p Peer ID in CID form (a.k.a. Device ID) assigned to this node.
  string device_id = 2;

  // Start time of the node.
  google.protobuf.Timestamp start_time = 3;
}
