// Code generated by protoc-gen-go. DO NOT EDIT.
// source: documents.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CreateDraftRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateDraftRequest) Reset()         { *m = CreateDraftRequest{} }
func (m *CreateDraftRequest) String() string { return proto.CompactTextString(m) }
func (*CreateDraftRequest) ProtoMessage()    {}
func (*CreateDraftRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_37d3647adf041676, []int{0}
}

func (m *CreateDraftRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateDraftRequest.Unmarshal(m, b)
}
func (m *CreateDraftRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateDraftRequest.Marshal(b, m, deterministic)
}
func (m *CreateDraftRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateDraftRequest.Merge(m, src)
}
func (m *CreateDraftRequest) XXX_Size() int {
	return xxx_messageInfo_CreateDraftRequest.Size(m)
}
func (m *CreateDraftRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateDraftRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateDraftRequest proto.InternalMessageInfo

type GetDraftRequest struct {
	// The ID of the document of the draft.
	DocumentId           string   `protobuf:"bytes,1,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDraftRequest) Reset()         { *m = GetDraftRequest{} }
func (m *GetDraftRequest) String() string { return proto.CompactTextString(m) }
func (*GetDraftRequest) ProtoMessage()    {}
func (*GetDraftRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_37d3647adf041676, []int{1}
}

func (m *GetDraftRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDraftRequest.Unmarshal(m, b)
}
func (m *GetDraftRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDraftRequest.Marshal(b, m, deterministic)
}
func (m *GetDraftRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDraftRequest.Merge(m, src)
}
func (m *GetDraftRequest) XXX_Size() int {
	return xxx_messageInfo_GetDraftRequest.Size(m)
}
func (m *GetDraftRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDraftRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDraftRequest proto.InternalMessageInfo

func (m *GetDraftRequest) GetDocumentId() string {
	if m != nil {
		return m.DocumentId
	}
	return ""
}

type ListDraftsRequest struct {
	PageSize             int32    `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken            string   `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListDraftsRequest) Reset()         { *m = ListDraftsRequest{} }
func (m *ListDraftsRequest) String() string { return proto.CompactTextString(m) }
func (*ListDraftsRequest) ProtoMessage()    {}
func (*ListDraftsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_37d3647adf041676, []int{2}
}

func (m *ListDraftsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListDraftsRequest.Unmarshal(m, b)
}
func (m *ListDraftsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListDraftsRequest.Marshal(b, m, deterministic)
}
func (m *ListDraftsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDraftsRequest.Merge(m, src)
}
func (m *ListDraftsRequest) XXX_Size() int {
	return xxx_messageInfo_ListDraftsRequest.Size(m)
}
func (m *ListDraftsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDraftsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListDraftsRequest proto.InternalMessageInfo

func (m *ListDraftsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListDraftsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListDraftsResponse struct {
	// List of existing drafts. The returned list will not include content to make
	// the request less expensive. Get the full draft including content by
	// invoking GetDraft.
	Drafts []*Draft `protobuf:"bytes,1,rep,name=drafts,proto3" json:"drafts,omitempty"`
	// If this is empty, there're no more results.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListDraftsResponse) Reset()         { *m = ListDraftsResponse{} }
func (m *ListDraftsResponse) String() string { return proto.CompactTextString(m) }
func (*ListDraftsResponse) ProtoMessage()    {}
func (*ListDraftsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_37d3647adf041676, []int{3}
}

func (m *ListDraftsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListDraftsResponse.Unmarshal(m, b)
}
func (m *ListDraftsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListDraftsResponse.Marshal(b, m, deterministic)
}
func (m *ListDraftsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDraftsResponse.Merge(m, src)
}
func (m *ListDraftsResponse) XXX_Size() int {
	return xxx_messageInfo_ListDraftsResponse.Size(m)
}
func (m *ListDraftsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDraftsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListDraftsResponse proto.InternalMessageInfo

func (m *ListDraftsResponse) GetDrafts() []*Draft {
	if m != nil {
		return m.Drafts
	}
	return nil
}

func (m *ListDraftsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type DeleteDraftRequest struct {
	// The ID of the document the draft belongs to.
	DocumentId           string   `protobuf:"bytes,1,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteDraftRequest) Reset()         { *m = DeleteDraftRequest{} }
func (m *DeleteDraftRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteDraftRequest) ProtoMessage()    {}
func (*DeleteDraftRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_37d3647adf041676, []int{4}
}

func (m *DeleteDraftRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteDraftRequest.Unmarshal(m, b)
}
func (m *DeleteDraftRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteDraftRequest.Marshal(b, m, deterministic)
}
func (m *DeleteDraftRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteDraftRequest.Merge(m, src)
}
func (m *DeleteDraftRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteDraftRequest.Size(m)
}
func (m *DeleteDraftRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteDraftRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteDraftRequest proto.InternalMessageInfo

func (m *DeleteDraftRequest) GetDocumentId() string {
	if m != nil {
		return m.DocumentId
	}
	return ""
}

type PublishDraftRequest struct {
	// ID of the document of which ongoing draft is going to be published.
	DocumentId           string   `protobuf:"bytes,1,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishDraftRequest) Reset()         { *m = PublishDraftRequest{} }
func (m *PublishDraftRequest) String() string { return proto.CompactTextString(m) }
func (*PublishDraftRequest) ProtoMessage()    {}
func (*PublishDraftRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_37d3647adf041676, []int{5}
}

func (m *PublishDraftRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishDraftRequest.Unmarshal(m, b)
}
func (m *PublishDraftRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishDraftRequest.Marshal(b, m, deterministic)
}
func (m *PublishDraftRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishDraftRequest.Merge(m, src)
}
func (m *PublishDraftRequest) XXX_Size() int {
	return xxx_messageInfo_PublishDraftRequest.Size(m)
}
func (m *PublishDraftRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishDraftRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublishDraftRequest proto.InternalMessageInfo

func (m *PublishDraftRequest) GetDocumentId() string {
	if m != nil {
		return m.DocumentId
	}
	return ""
}

type GetPublicationRequest struct {
	// ID of the publication to retrieve.
	PublicationId        string   `protobuf:"bytes,1,opt,name=publication_id,json=publicationId,proto3" json:"publication_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPublicationRequest) Reset()         { *m = GetPublicationRequest{} }
func (m *GetPublicationRequest) String() string { return proto.CompactTextString(m) }
func (*GetPublicationRequest) ProtoMessage()    {}
func (*GetPublicationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_37d3647adf041676, []int{6}
}

func (m *GetPublicationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPublicationRequest.Unmarshal(m, b)
}
func (m *GetPublicationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPublicationRequest.Marshal(b, m, deterministic)
}
func (m *GetPublicationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPublicationRequest.Merge(m, src)
}
func (m *GetPublicationRequest) XXX_Size() int {
	return xxx_messageInfo_GetPublicationRequest.Size(m)
}
func (m *GetPublicationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPublicationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPublicationRequest proto.InternalMessageInfo

func (m *GetPublicationRequest) GetPublicationId() string {
	if m != nil {
		return m.PublicationId
	}
	return ""
}

type ListPublicationsRequest struct {
	PageSize             int32    `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken            string   `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListPublicationsRequest) Reset()         { *m = ListPublicationsRequest{} }
func (m *ListPublicationsRequest) String() string { return proto.CompactTextString(m) }
func (*ListPublicationsRequest) ProtoMessage()    {}
func (*ListPublicationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_37d3647adf041676, []int{7}
}

func (m *ListPublicationsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPublicationsRequest.Unmarshal(m, b)
}
func (m *ListPublicationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPublicationsRequest.Marshal(b, m, deterministic)
}
func (m *ListPublicationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPublicationsRequest.Merge(m, src)
}
func (m *ListPublicationsRequest) XXX_Size() int {
	return xxx_messageInfo_ListPublicationsRequest.Size(m)
}
func (m *ListPublicationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPublicationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListPublicationsRequest proto.InternalMessageInfo

func (m *ListPublicationsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListPublicationsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListPublicationsResponse struct {
	// List of publications.
	Publications []*Publication `protobuf:"bytes,1,rep,name=publications,proto3" json:"publications,omitempty"`
	// If this is empty, there're no more results.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListPublicationsResponse) Reset()         { *m = ListPublicationsResponse{} }
func (m *ListPublicationsResponse) String() string { return proto.CompactTextString(m) }
func (*ListPublicationsResponse) ProtoMessage()    {}
func (*ListPublicationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_37d3647adf041676, []int{8}
}

func (m *ListPublicationsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPublicationsResponse.Unmarshal(m, b)
}
func (m *ListPublicationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPublicationsResponse.Marshal(b, m, deterministic)
}
func (m *ListPublicationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPublicationsResponse.Merge(m, src)
}
func (m *ListPublicationsResponse) XXX_Size() int {
	return xxx_messageInfo_ListPublicationsResponse.Size(m)
}
func (m *ListPublicationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPublicationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListPublicationsResponse proto.InternalMessageInfo

func (m *ListPublicationsResponse) GetPublications() []*Publication {
	if m != nil {
		return m.Publications
	}
	return nil
}

func (m *ListPublicationsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type GetSectionRequest struct {
	// The id of the section to retrieve.
	SectionId            string   `protobuf:"bytes,1,opt,name=section_id,json=sectionId,proto3" json:"section_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSectionRequest) Reset()         { *m = GetSectionRequest{} }
func (m *GetSectionRequest) String() string { return proto.CompactTextString(m) }
func (*GetSectionRequest) ProtoMessage()    {}
func (*GetSectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_37d3647adf041676, []int{9}
}

func (m *GetSectionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSectionRequest.Unmarshal(m, b)
}
func (m *GetSectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSectionRequest.Marshal(b, m, deterministic)
}
func (m *GetSectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSectionRequest.Merge(m, src)
}
func (m *GetSectionRequest) XXX_Size() int {
	return xxx_messageInfo_GetSectionRequest.Size(m)
}
func (m *GetSectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSectionRequest proto.InternalMessageInfo

func (m *GetSectionRequest) GetSectionId() string {
	if m != nil {
		return m.SectionId
	}
	return ""
}

type BatchGetSectionsRequest struct {
	// List of section ids to retrieve.
	SectionIds           []string `protobuf:"bytes,1,rep,name=section_ids,json=sectionIds,proto3" json:"section_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchGetSectionsRequest) Reset()         { *m = BatchGetSectionsRequest{} }
func (m *BatchGetSectionsRequest) String() string { return proto.CompactTextString(m) }
func (*BatchGetSectionsRequest) ProtoMessage()    {}
func (*BatchGetSectionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_37d3647adf041676, []int{10}
}

func (m *BatchGetSectionsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchGetSectionsRequest.Unmarshal(m, b)
}
func (m *BatchGetSectionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchGetSectionsRequest.Marshal(b, m, deterministic)
}
func (m *BatchGetSectionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchGetSectionsRequest.Merge(m, src)
}
func (m *BatchGetSectionsRequest) XXX_Size() int {
	return xxx_messageInfo_BatchGetSectionsRequest.Size(m)
}
func (m *BatchGetSectionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchGetSectionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BatchGetSectionsRequest proto.InternalMessageInfo

func (m *BatchGetSectionsRequest) GetSectionIds() []string {
	if m != nil {
		return m.SectionIds
	}
	return nil
}

type BatchGetSectionsResponse struct {
	// List of sections.
	Sections             []*Section `protobuf:"bytes,1,rep,name=sections,proto3" json:"sections,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *BatchGetSectionsResponse) Reset()         { *m = BatchGetSectionsResponse{} }
func (m *BatchGetSectionsResponse) String() string { return proto.CompactTextString(m) }
func (*BatchGetSectionsResponse) ProtoMessage()    {}
func (*BatchGetSectionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_37d3647adf041676, []int{11}
}

func (m *BatchGetSectionsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchGetSectionsResponse.Unmarshal(m, b)
}
func (m *BatchGetSectionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchGetSectionsResponse.Marshal(b, m, deterministic)
}
func (m *BatchGetSectionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchGetSectionsResponse.Merge(m, src)
}
func (m *BatchGetSectionsResponse) XXX_Size() int {
	return xxx_messageInfo_BatchGetSectionsResponse.Size(m)
}
func (m *BatchGetSectionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchGetSectionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BatchGetSectionsResponse proto.InternalMessageInfo

func (m *BatchGetSectionsResponse) GetSections() []*Section {
	if m != nil {
		return m.Sections
	}
	return nil
}

// Draft is a working document that is being written to become a publication.
// After being published Draft becomes a Publication. Both Drafts and
// Publications are just list of Sections.
//
// TODO(burdiyan): We will have to get back to this when we start dealing with
// transclusions of third-party sections.
type Draft struct {
	// Output only. Cannot be updated.
	DocumentId string `protobuf:"bytes,1,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	// Title of the document.
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// Brief description of the content.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. Cannot be updated.
	Author string `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`
	// List of sections this draft is composed of.
	Sections []*Section `protobuf:"bytes,5,rep,name=sections,proto3" json:"sections,omitempty"`
	// Output only. Time when draft was created.
	CreateTime *timestamp.Timestamp `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. Time when draft was updated last time.
	UpdateTime           *timestamp.Timestamp `protobuf:"bytes,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Draft) Reset()         { *m = Draft{} }
func (m *Draft) String() string { return proto.CompactTextString(m) }
func (*Draft) ProtoMessage()    {}
func (*Draft) Descriptor() ([]byte, []int) {
	return fileDescriptor_37d3647adf041676, []int{12}
}

func (m *Draft) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Draft.Unmarshal(m, b)
}
func (m *Draft) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Draft.Marshal(b, m, deterministic)
}
func (m *Draft) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Draft.Merge(m, src)
}
func (m *Draft) XXX_Size() int {
	return xxx_messageInfo_Draft.Size(m)
}
func (m *Draft) XXX_DiscardUnknown() {
	xxx_messageInfo_Draft.DiscardUnknown(m)
}

var xxx_messageInfo_Draft proto.InternalMessageInfo

func (m *Draft) GetDocumentId() string {
	if m != nil {
		return m.DocumentId
	}
	return ""
}

func (m *Draft) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Draft) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Draft) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *Draft) GetSections() []*Section {
	if m != nil {
		return m.Sections
	}
	return nil
}

func (m *Draft) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *Draft) GetUpdateTime() *timestamp.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

type Section struct {
	// Output only. The ID of the document this section originally belongs to.
	DocumentId string `protobuf:"bytes,1,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	// Optional. Title of the section.
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// Optional. Brief description of the content of the section.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. Author of the section.
	Author string `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`
	// Markdown content of the section.
	Body string `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
	// Output only. Time when section was created.
	CreateTime           *timestamp.Timestamp `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Section) Reset()         { *m = Section{} }
func (m *Section) String() string { return proto.CompactTextString(m) }
func (*Section) ProtoMessage()    {}
func (*Section) Descriptor() ([]byte, []int) {
	return fileDescriptor_37d3647adf041676, []int{13}
}

func (m *Section) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Section.Unmarshal(m, b)
}
func (m *Section) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Section.Marshal(b, m, deterministic)
}
func (m *Section) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Section.Merge(m, src)
}
func (m *Section) XXX_Size() int {
	return xxx_messageInfo_Section.Size(m)
}
func (m *Section) XXX_DiscardUnknown() {
	xxx_messageInfo_Section.DiscardUnknown(m)
}

var xxx_messageInfo_Section proto.InternalMessageInfo

func (m *Section) GetDocumentId() string {
	if m != nil {
		return m.DocumentId
	}
	return ""
}

func (m *Section) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Section) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Section) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *Section) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *Section) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

// Immutable snapshot of a document that is available to the public.
type Publication struct {
	// Output only. Content addressable identifier of this publication.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Output only. Cannot be updated.
	DocumentId string `protobuf:"bytes,2,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	// Title of the document.
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// Brief description of the content.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. Cannot be updated.
	Author string `protobuf:"bytes,5,opt,name=author,proto3" json:"author,omitempty"`
	// ID of the previous version.
	Previous string `protobuf:"bytes,6,opt,name=previous,proto3" json:"previous,omitempty"`
	// List of sections this draft is composed of.
	Sections []string `protobuf:"bytes,7,rep,name=sections,proto3" json:"sections,omitempty"`
	// Output only. Time when draft was initially created.
	CreateTime *timestamp.Timestamp `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. Time when document was published.
	PublishTime          *timestamp.Timestamp `protobuf:"bytes,9,opt,name=publish_time,json=publishTime,proto3" json:"publish_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Publication) Reset()         { *m = Publication{} }
func (m *Publication) String() string { return proto.CompactTextString(m) }
func (*Publication) ProtoMessage()    {}
func (*Publication) Descriptor() ([]byte, []int) {
	return fileDescriptor_37d3647adf041676, []int{14}
}

func (m *Publication) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Publication.Unmarshal(m, b)
}
func (m *Publication) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Publication.Marshal(b, m, deterministic)
}
func (m *Publication) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Publication.Merge(m, src)
}
func (m *Publication) XXX_Size() int {
	return xxx_messageInfo_Publication.Size(m)
}
func (m *Publication) XXX_DiscardUnknown() {
	xxx_messageInfo_Publication.DiscardUnknown(m)
}

var xxx_messageInfo_Publication proto.InternalMessageInfo

func (m *Publication) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Publication) GetDocumentId() string {
	if m != nil {
		return m.DocumentId
	}
	return ""
}

func (m *Publication) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Publication) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Publication) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *Publication) GetPrevious() string {
	if m != nil {
		return m.Previous
	}
	return ""
}

func (m *Publication) GetSections() []string {
	if m != nil {
		return m.Sections
	}
	return nil
}

func (m *Publication) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *Publication) GetPublishTime() *timestamp.Timestamp {
	if m != nil {
		return m.PublishTime
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateDraftRequest)(nil), "com.mintter.CreateDraftRequest")
	proto.RegisterType((*GetDraftRequest)(nil), "com.mintter.GetDraftRequest")
	proto.RegisterType((*ListDraftsRequest)(nil), "com.mintter.ListDraftsRequest")
	proto.RegisterType((*ListDraftsResponse)(nil), "com.mintter.ListDraftsResponse")
	proto.RegisterType((*DeleteDraftRequest)(nil), "com.mintter.DeleteDraftRequest")
	proto.RegisterType((*PublishDraftRequest)(nil), "com.mintter.PublishDraftRequest")
	proto.RegisterType((*GetPublicationRequest)(nil), "com.mintter.GetPublicationRequest")
	proto.RegisterType((*ListPublicationsRequest)(nil), "com.mintter.ListPublicationsRequest")
	proto.RegisterType((*ListPublicationsResponse)(nil), "com.mintter.ListPublicationsResponse")
	proto.RegisterType((*GetSectionRequest)(nil), "com.mintter.GetSectionRequest")
	proto.RegisterType((*BatchGetSectionsRequest)(nil), "com.mintter.BatchGetSectionsRequest")
	proto.RegisterType((*BatchGetSectionsResponse)(nil), "com.mintter.BatchGetSectionsResponse")
	proto.RegisterType((*Draft)(nil), "com.mintter.Draft")
	proto.RegisterType((*Section)(nil), "com.mintter.Section")
	proto.RegisterType((*Publication)(nil), "com.mintter.Publication")
}

func init() {
	proto.RegisterFile("documents.proto", fileDescriptor_37d3647adf041676)
}

var fileDescriptor_37d3647adf041676 = []byte{
	// 759 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x55, 0xd2, 0x3a, 0x89, 0xc7, 0xfd, 0xa0, 0x4b, 0x69, 0x2d, 0x97, 0x92, 0xc8, 0xa2, 0xa8,
	0xe2, 0xe0, 0xa2, 0x54, 0x70, 0x80, 0xc2, 0x21, 0x14, 0xaa, 0xa2, 0x02, 0x55, 0x5a, 0x2e, 0x5c,
	0x22, 0xd7, 0xde, 0x36, 0x16, 0x49, 0x6c, 0xbc, 0xeb, 0x8a, 0xf6, 0xc4, 0x8f, 0xe1, 0x97, 0x70,
	0xe5, 0x27, 0x71, 0x41, 0xbb, 0x5e, 0xdb, 0x6b, 0x3b, 0x1f, 0xad, 0x40, 0x9c, 0x12, 0xbf, 0x99,
	0xb7, 0x9e, 0x79, 0x3b, 0x9e, 0x07, 0xcb, 0xae, 0xef, 0x44, 0x43, 0x3c, 0xa2, 0xc4, 0x0a, 0x42,
	0x9f, 0xfa, 0x48, 0x73, 0xfc, 0xa1, 0x35, 0xf4, 0x46, 0x94, 0xe2, 0xd0, 0x68, 0x5e, 0xf8, 0xfe,
	0xc5, 0x00, 0xef, 0xf0, 0xd0, 0x59, 0x74, 0xbe, 0x43, 0xbd, 0x21, 0x26, 0xd4, 0x1e, 0x06, 0x71,
	0xb6, 0xb1, 0x51, 0x4c, 0xc0, 0xc3, 0x80, 0x5e, 0xc5, 0x41, 0x73, 0x15, 0xd0, 0xeb, 0x10, 0xdb,
	0x14, 0xef, 0x87, 0xf6, 0x39, 0xed, 0xe2, 0xaf, 0x11, 0x26, 0xd4, 0x6c, 0xc3, 0xf2, 0x01, 0xa6,
	0x32, 0x84, 0x9a, 0xa0, 0x25, 0x65, 0xf4, 0x3c, 0x57, 0xaf, 0xb4, 0x2a, 0xdb, 0x6a, 0x17, 0x12,
	0xe8, 0xd0, 0x35, 0x3f, 0xc2, 0xca, 0x91, 0x47, 0x62, 0x12, 0x49, 0x58, 0x1b, 0xa0, 0x06, 0xf6,
	0x05, 0xee, 0x11, 0xef, 0x1a, 0x73, 0x8e, 0xd2, 0x6d, 0x30, 0xe0, 0xc4, 0xbb, 0xc6, 0x68, 0x13,
	0x80, 0x07, 0xa9, 0xff, 0x05, 0x8f, 0xf4, 0x2a, 0x3f, 0x91, 0xa7, 0x9f, 0x32, 0xc0, 0xec, 0x03,
	0x92, 0x0f, 0x24, 0x81, 0x3f, 0x22, 0x18, 0x3d, 0x86, 0x9a, 0xcb, 0x11, 0xbd, 0xd2, 0x9a, 0xdb,
	0xd6, 0xda, 0xc8, 0x92, 0xc4, 0xb0, 0xe2, 0x92, 0x45, 0x06, 0x7a, 0x04, 0xcb, 0x23, 0xfc, 0x8d,
	0xf6, 0x4a, 0x6f, 0x59, 0x64, 0xf0, 0x71, 0xfa, 0xa6, 0xa7, 0x80, 0xf6, 0xf1, 0x00, 0xe7, 0x45,
	0x98, 0xdd, 0xf1, 0x33, 0xb8, 0x7b, 0x1c, 0x9d, 0x0d, 0x3c, 0xd2, 0xbf, 0x1d, 0xef, 0x15, 0xdc,
	0x3b, 0xc0, 0x94, 0x53, 0x1d, 0x9b, 0x7a, 0xfe, 0x28, 0x61, 0x6e, 0xc1, 0x52, 0x90, 0xa1, 0x19,
	0x79, 0x51, 0x42, 0x0f, 0x5d, 0xf3, 0x13, 0xac, 0x33, 0x61, 0xa4, 0x03, 0xfe, 0x89, 0xde, 0xdf,
	0x2b, 0xa0, 0x97, 0xcf, 0x15, 0xb2, 0xef, 0xc1, 0x82, 0x54, 0x44, 0x22, 0xbe, 0x9e, 0x13, 0x5f,
	0xee, 0x28, 0x97, 0x7d, 0xe3, 0x8b, 0x68, 0xc3, 0xca, 0x01, 0xa6, 0x27, 0xd8, 0x91, 0x55, 0xd9,
	0x04, 0x20, 0x31, 0x92, 0x29, 0xa2, 0x0a, 0xe4, 0xd0, 0x35, 0x9f, 0xc3, 0x7a, 0xc7, 0xa6, 0x4e,
	0x3f, 0x23, 0x12, 0xe9, 0x26, 0x32, 0x66, 0x5c, 0xb3, 0xda, 0x85, 0x94, 0x4a, 0xcc, 0x23, 0xd0,
	0xcb, 0x5c, 0xd1, 0xf1, 0x13, 0x68, 0x88, 0xcc, 0xa4, 0xdb, 0xd5, 0x5c, 0xb7, 0x49, 0x95, 0x69,
	0x96, 0xf9, 0xa3, 0x0a, 0x0a, 0x9f, 0x84, 0x99, 0x23, 0x80, 0x56, 0x41, 0xa1, 0x1e, 0x1d, 0x60,
	0x21, 0x43, 0xfc, 0x80, 0x5a, 0xa0, 0xb9, 0x98, 0x38, 0xa1, 0x17, 0xb0, 0x03, 0xf5, 0x39, 0x1e,
	0x93, 0x21, 0xb4, 0x06, 0x35, 0x3b, 0xa2, 0x7d, 0x3f, 0xd4, 0xe7, 0x79, 0x50, 0x3c, 0xe5, 0x8a,
	0x55, 0x6e, 0x52, 0x2c, 0x7a, 0x01, 0x9a, 0xc3, 0x3f, 0xfc, 0x1e, 0xdb, 0x17, 0x7a, 0xad, 0x55,
	0xd9, 0xd6, 0xda, 0x86, 0x15, 0xef, 0x0a, 0x2b, 0xd9, 0x15, 0xd6, 0x69, 0xb2, 0x4c, 0xba, 0x10,
	0xa7, 0x33, 0x80, 0x91, 0xa3, 0xc0, 0x4d, 0xc9, 0xf5, 0xd9, 0xe4, 0x38, 0x9d, 0x01, 0xe6, 0xaf,
	0x0a, 0xd4, 0x45, 0x3d, 0xff, 0x5f, 0x28, 0x04, 0xf3, 0x67, 0xbe, 0x7b, 0xa5, 0x2b, 0x1c, 0xe5,
	0xff, 0xff, 0x4a, 0x0a, 0xf3, 0x67, 0x15, 0x34, 0x69, 0xf0, 0xd1, 0x12, 0x54, 0xd3, 0x46, 0xaa,
	0x9e, 0x5b, 0xec, 0xb0, 0x3a, 0xb9, 0xc3, 0xb9, 0x29, 0x1d, 0xce, 0x4f, 0xeb, 0x50, 0xc9, 0x75,
	0x68, 0x40, 0x23, 0x08, 0xf1, 0xa5, 0xe7, 0x47, 0x84, 0xb7, 0xa2, 0x76, 0xd3, 0x67, 0x16, 0x4b,
	0xc7, 0xa4, 0xce, 0xbf, 0x86, 0x89, 0x03, 0xd1, 0xb8, 0xd5, 0x40, 0xbc, 0x14, 0xeb, 0x81, 0xf4,
	0x63, 0xb6, 0x3a, 0x93, 0xad, 0x89, 0x7c, 0x86, 0xb4, 0x7f, 0x2b, 0xa0, 0xee, 0x27, 0x26, 0x87,
	0x3a, 0xa0, 0x49, 0x9e, 0x84, 0x9a, 0xb9, 0x49, 0x2e, 0xbb, 0x95, 0x31, 0xc6, 0x02, 0xd0, 0x1e,
	0x34, 0x12, 0x07, 0x43, 0xf7, 0x73, 0xf1, 0x82, 0xb1, 0x8d, 0x65, 0xbf, 0x07, 0xc8, 0xac, 0x07,
	0x3d, 0xc8, 0x65, 0x94, 0x4c, 0xce, 0x68, 0x4e, 0x8c, 0x8b, 0x55, 0xb2, 0x0b, 0xea, 0x89, 0x7d,
	0x29, 0xda, 0x19, 0xf3, 0xbe, 0xb1, 0x35, 0xbc, 0x05, 0x4d, 0x32, 0xa5, 0x82, 0x0a, 0x65, 0xbb,
	0x32, 0xd6, 0x4a, 0x62, 0xbf, 0x61, 0x3e, 0x8f, 0xde, 0xc1, 0x82, 0xec, 0x52, 0xa8, 0x55, 0xde,
	0xd9, 0x79, 0x03, 0x33, 0x26, 0x6e, 0x75, 0xf4, 0x01, 0x96, 0xf2, 0xce, 0x85, 0xcc, 0xa2, 0xb6,
	0x65, 0x5b, 0x9b, 0x72, 0x5e, 0x0f, 0xee, 0x14, 0x1d, 0x07, 0x3d, 0x2c, 0xa9, 0x39, 0xc6, 0xe8,
	0x8c, 0xad, 0x19, 0x59, 0x42, 0xf9, 0x0e, 0x40, 0xb6, 0xdb, 0x0b, 0x17, 0x59, 0x72, 0x1a, 0x63,
	0xec, 0xce, 0x64, 0x45, 0x16, 0x4d, 0xa2, 0x50, 0xe4, 0x04, 0xff, 0x29, 0x14, 0x39, 0xc9, 0x69,
	0x3a, 0xf5, 0xcf, 0x4a, 0x7c, 0x67, 0x35, 0xfe, 0xb3, 0xfb, 0x27, 0x00, 0x00, 0xff, 0xff, 0x59,
	0xf9, 0xf9, 0xec, 0xf1, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DocumentsClient is the client API for Documents service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DocumentsClient interface {
	CreateDraft(ctx context.Context, in *CreateDraftRequest, opts ...grpc.CallOption) (*Draft, error)
	GetDraft(ctx context.Context, in *GetDraftRequest, opts ...grpc.CallOption) (*Draft, error)
	ListDrafts(ctx context.Context, in *ListDraftsRequest, opts ...grpc.CallOption) (*ListDraftsResponse, error)
	// Save current state of the draft. It will replace fields that are non output
	// only. ID is required to identify the draft. Draft must have been created
	// previously using CreateDraft.
	SaveDraft(ctx context.Context, in *Draft, opts ...grpc.CallOption) (*Draft, error)
	DeleteDraft(ctx context.Context, in *DeleteDraftRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Publish the latest draft of a given document ID.
	PublishDraft(ctx context.Context, in *PublishDraftRequest, opts ...grpc.CallOption) (*Publication, error)
	GetPublication(ctx context.Context, in *GetPublicationRequest, opts ...grpc.CallOption) (*Publication, error)
	ListPublications(ctx context.Context, in *ListPublicationsRequest, opts ...grpc.CallOption) (*ListPublicationsResponse, error)
	GetSection(ctx context.Context, in *GetSectionRequest, opts ...grpc.CallOption) (*Section, error)
	BatchGetSections(ctx context.Context, in *BatchGetSectionsRequest, opts ...grpc.CallOption) (*BatchGetSectionsResponse, error)
}

type documentsClient struct {
	cc grpc.ClientConnInterface
}

func NewDocumentsClient(cc grpc.ClientConnInterface) DocumentsClient {
	return &documentsClient{cc}
}

func (c *documentsClient) CreateDraft(ctx context.Context, in *CreateDraftRequest, opts ...grpc.CallOption) (*Draft, error) {
	out := new(Draft)
	err := c.cc.Invoke(ctx, "/com.mintter.Documents/CreateDraft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsClient) GetDraft(ctx context.Context, in *GetDraftRequest, opts ...grpc.CallOption) (*Draft, error) {
	out := new(Draft)
	err := c.cc.Invoke(ctx, "/com.mintter.Documents/GetDraft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsClient) ListDrafts(ctx context.Context, in *ListDraftsRequest, opts ...grpc.CallOption) (*ListDraftsResponse, error) {
	out := new(ListDraftsResponse)
	err := c.cc.Invoke(ctx, "/com.mintter.Documents/ListDrafts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsClient) SaveDraft(ctx context.Context, in *Draft, opts ...grpc.CallOption) (*Draft, error) {
	out := new(Draft)
	err := c.cc.Invoke(ctx, "/com.mintter.Documents/SaveDraft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsClient) DeleteDraft(ctx context.Context, in *DeleteDraftRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/com.mintter.Documents/DeleteDraft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsClient) PublishDraft(ctx context.Context, in *PublishDraftRequest, opts ...grpc.CallOption) (*Publication, error) {
	out := new(Publication)
	err := c.cc.Invoke(ctx, "/com.mintter.Documents/PublishDraft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsClient) GetPublication(ctx context.Context, in *GetPublicationRequest, opts ...grpc.CallOption) (*Publication, error) {
	out := new(Publication)
	err := c.cc.Invoke(ctx, "/com.mintter.Documents/GetPublication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsClient) ListPublications(ctx context.Context, in *ListPublicationsRequest, opts ...grpc.CallOption) (*ListPublicationsResponse, error) {
	out := new(ListPublicationsResponse)
	err := c.cc.Invoke(ctx, "/com.mintter.Documents/ListPublications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsClient) GetSection(ctx context.Context, in *GetSectionRequest, opts ...grpc.CallOption) (*Section, error) {
	out := new(Section)
	err := c.cc.Invoke(ctx, "/com.mintter.Documents/GetSection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsClient) BatchGetSections(ctx context.Context, in *BatchGetSectionsRequest, opts ...grpc.CallOption) (*BatchGetSectionsResponse, error) {
	out := new(BatchGetSectionsResponse)
	err := c.cc.Invoke(ctx, "/com.mintter.Documents/BatchGetSections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DocumentsServer is the server API for Documents service.
type DocumentsServer interface {
	CreateDraft(context.Context, *CreateDraftRequest) (*Draft, error)
	GetDraft(context.Context, *GetDraftRequest) (*Draft, error)
	ListDrafts(context.Context, *ListDraftsRequest) (*ListDraftsResponse, error)
	// Save current state of the draft. It will replace fields that are non output
	// only. ID is required to identify the draft. Draft must have been created
	// previously using CreateDraft.
	SaveDraft(context.Context, *Draft) (*Draft, error)
	DeleteDraft(context.Context, *DeleteDraftRequest) (*empty.Empty, error)
	// Publish the latest draft of a given document ID.
	PublishDraft(context.Context, *PublishDraftRequest) (*Publication, error)
	GetPublication(context.Context, *GetPublicationRequest) (*Publication, error)
	ListPublications(context.Context, *ListPublicationsRequest) (*ListPublicationsResponse, error)
	GetSection(context.Context, *GetSectionRequest) (*Section, error)
	BatchGetSections(context.Context, *BatchGetSectionsRequest) (*BatchGetSectionsResponse, error)
}

// UnimplementedDocumentsServer can be embedded to have forward compatible implementations.
type UnimplementedDocumentsServer struct {
}

func (*UnimplementedDocumentsServer) CreateDraft(ctx context.Context, req *CreateDraftRequest) (*Draft, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDraft not implemented")
}
func (*UnimplementedDocumentsServer) GetDraft(ctx context.Context, req *GetDraftRequest) (*Draft, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDraft not implemented")
}
func (*UnimplementedDocumentsServer) ListDrafts(ctx context.Context, req *ListDraftsRequest) (*ListDraftsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDrafts not implemented")
}
func (*UnimplementedDocumentsServer) SaveDraft(ctx context.Context, req *Draft) (*Draft, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveDraft not implemented")
}
func (*UnimplementedDocumentsServer) DeleteDraft(ctx context.Context, req *DeleteDraftRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDraft not implemented")
}
func (*UnimplementedDocumentsServer) PublishDraft(ctx context.Context, req *PublishDraftRequest) (*Publication, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishDraft not implemented")
}
func (*UnimplementedDocumentsServer) GetPublication(ctx context.Context, req *GetPublicationRequest) (*Publication, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublication not implemented")
}
func (*UnimplementedDocumentsServer) ListPublications(ctx context.Context, req *ListPublicationsRequest) (*ListPublicationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPublications not implemented")
}
func (*UnimplementedDocumentsServer) GetSection(ctx context.Context, req *GetSectionRequest) (*Section, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSection not implemented")
}
func (*UnimplementedDocumentsServer) BatchGetSections(ctx context.Context, req *BatchGetSectionsRequest) (*BatchGetSectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetSections not implemented")
}

func RegisterDocumentsServer(s *grpc.Server, srv DocumentsServer) {
	s.RegisterService(&_Documents_serviceDesc, srv)
}

func _Documents_CreateDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDraftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServer).CreateDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.Documents/CreateDraft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServer).CreateDraft(ctx, req.(*CreateDraftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Documents_GetDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDraftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServer).GetDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.Documents/GetDraft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServer).GetDraft(ctx, req.(*GetDraftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Documents_ListDrafts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDraftsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServer).ListDrafts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.Documents/ListDrafts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServer).ListDrafts(ctx, req.(*ListDraftsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Documents_SaveDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Draft)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServer).SaveDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.Documents/SaveDraft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServer).SaveDraft(ctx, req.(*Draft))
	}
	return interceptor(ctx, in, info, handler)
}

func _Documents_DeleteDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDraftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServer).DeleteDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.Documents/DeleteDraft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServer).DeleteDraft(ctx, req.(*DeleteDraftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Documents_PublishDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishDraftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServer).PublishDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.Documents/PublishDraft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServer).PublishDraft(ctx, req.(*PublishDraftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Documents_GetPublication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServer).GetPublication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.Documents/GetPublication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServer).GetPublication(ctx, req.(*GetPublicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Documents_ListPublications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPublicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServer).ListPublications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.Documents/ListPublications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServer).ListPublications(ctx, req.(*ListPublicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Documents_GetSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServer).GetSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.Documents/GetSection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServer).GetSection(ctx, req.(*GetSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Documents_BatchGetSections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetSectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServer).BatchGetSections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.Documents/BatchGetSections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServer).BatchGetSections(ctx, req.(*BatchGetSectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Documents_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.mintter.Documents",
	HandlerType: (*DocumentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDraft",
			Handler:    _Documents_CreateDraft_Handler,
		},
		{
			MethodName: "GetDraft",
			Handler:    _Documents_GetDraft_Handler,
		},
		{
			MethodName: "ListDrafts",
			Handler:    _Documents_ListDrafts_Handler,
		},
		{
			MethodName: "SaveDraft",
			Handler:    _Documents_SaveDraft_Handler,
		},
		{
			MethodName: "DeleteDraft",
			Handler:    _Documents_DeleteDraft_Handler,
		},
		{
			MethodName: "PublishDraft",
			Handler:    _Documents_PublishDraft_Handler,
		},
		{
			MethodName: "GetPublication",
			Handler:    _Documents_GetPublication_Handler,
		},
		{
			MethodName: "ListPublications",
			Handler:    _Documents_ListPublications_Handler,
		},
		{
			MethodName: "GetSection",
			Handler:    _Documents_GetSection_Handler,
		},
		{
			MethodName: "BatchGetSections",
			Handler:    _Documents_BatchGetSections_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "documents.proto",
}
