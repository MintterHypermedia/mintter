// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mintter.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GenSeedRequest struct {
	// Passphrase that will be used to encipher the seed.
	AezeedPassphrase     []byte   `protobuf:"bytes,1,opt,name=aezeed_passphrase,json=aezeedPassphrase,proto3" json:"aezeed_passphrase,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenSeedRequest) Reset()         { *m = GenSeedRequest{} }
func (m *GenSeedRequest) String() string { return proto.CompactTextString(m) }
func (*GenSeedRequest) ProtoMessage()    {}
func (*GenSeedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_459271e8c06255ea, []int{0}
}

func (m *GenSeedRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenSeedRequest.Unmarshal(m, b)
}
func (m *GenSeedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenSeedRequest.Marshal(b, m, deterministic)
}
func (m *GenSeedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenSeedRequest.Merge(m, src)
}
func (m *GenSeedRequest) XXX_Size() int {
	return xxx_messageInfo_GenSeedRequest.Size(m)
}
func (m *GenSeedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GenSeedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GenSeedRequest proto.InternalMessageInfo

func (m *GenSeedRequest) GetAezeedPassphrase() []byte {
	if m != nil {
		return m.AezeedPassphrase
	}
	return nil
}

type GenSeedResponse struct {
	// The list of human-friendly words that can be used to backup the seed. These
	// words must be stored in a secret place by the user.
	Mnemonic             []string `protobuf:"bytes,1,rep,name=mnemonic,proto3" json:"mnemonic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenSeedResponse) Reset()         { *m = GenSeedResponse{} }
func (m *GenSeedResponse) String() string { return proto.CompactTextString(m) }
func (*GenSeedResponse) ProtoMessage()    {}
func (*GenSeedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_459271e8c06255ea, []int{1}
}

func (m *GenSeedResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenSeedResponse.Unmarshal(m, b)
}
func (m *GenSeedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenSeedResponse.Marshal(b, m, deterministic)
}
func (m *GenSeedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenSeedResponse.Merge(m, src)
}
func (m *GenSeedResponse) XXX_Size() int {
	return xxx_messageInfo_GenSeedResponse.Size(m)
}
func (m *GenSeedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GenSeedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GenSeedResponse proto.InternalMessageInfo

func (m *GenSeedResponse) GetMnemonic() []string {
	if m != nil {
		return m.Mnemonic
	}
	return nil
}

type InitProfileRequest struct {
	// This is the password to encrypt the wallet data on-disk.
	WalletPassword []byte `protobuf:"bytes,1,opt,name=wallet_password,json=walletPassword,proto3" json:"wallet_password,omitempty"`
	// Mnemonic words generated by GenSeed call previous. Or existing aezeed seed.
	Mnemonic []string `protobuf:"bytes,2,rep,name=mnemonic,proto3" json:"mnemonic,omitempty"`
	// Optional passphrase that was used to generate the seed.
	AezeedPassphrase     []byte   `protobuf:"bytes,3,opt,name=aezeed_passphrase,json=aezeedPassphrase,proto3" json:"aezeed_passphrase,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InitProfileRequest) Reset()         { *m = InitProfileRequest{} }
func (m *InitProfileRequest) String() string { return proto.CompactTextString(m) }
func (*InitProfileRequest) ProtoMessage()    {}
func (*InitProfileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_459271e8c06255ea, []int{2}
}

func (m *InitProfileRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InitProfileRequest.Unmarshal(m, b)
}
func (m *InitProfileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InitProfileRequest.Marshal(b, m, deterministic)
}
func (m *InitProfileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitProfileRequest.Merge(m, src)
}
func (m *InitProfileRequest) XXX_Size() int {
	return xxx_messageInfo_InitProfileRequest.Size(m)
}
func (m *InitProfileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InitProfileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InitProfileRequest proto.InternalMessageInfo

func (m *InitProfileRequest) GetWalletPassword() []byte {
	if m != nil {
		return m.WalletPassword
	}
	return nil
}

func (m *InitProfileRequest) GetMnemonic() []string {
	if m != nil {
		return m.Mnemonic
	}
	return nil
}

func (m *InitProfileRequest) GetAezeedPassphrase() []byte {
	if m != nil {
		return m.AezeedPassphrase
	}
	return nil
}

type InitProfileResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InitProfileResponse) Reset()         { *m = InitProfileResponse{} }
func (m *InitProfileResponse) String() string { return proto.CompactTextString(m) }
func (*InitProfileResponse) ProtoMessage()    {}
func (*InitProfileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_459271e8c06255ea, []int{3}
}

func (m *InitProfileResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InitProfileResponse.Unmarshal(m, b)
}
func (m *InitProfileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InitProfileResponse.Marshal(b, m, deterministic)
}
func (m *InitProfileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitProfileResponse.Merge(m, src)
}
func (m *InitProfileResponse) XXX_Size() int {
	return xxx_messageInfo_InitProfileResponse.Size(m)
}
func (m *InitProfileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InitProfileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InitProfileResponse proto.InternalMessageInfo

type UpdateProfileRequest struct {
	// Profile data to be updated.
	Profile              *Profile `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateProfileRequest) Reset()         { *m = UpdateProfileRequest{} }
func (m *UpdateProfileRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateProfileRequest) ProtoMessage()    {}
func (*UpdateProfileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_459271e8c06255ea, []int{4}
}

func (m *UpdateProfileRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateProfileRequest.Unmarshal(m, b)
}
func (m *UpdateProfileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateProfileRequest.Marshal(b, m, deterministic)
}
func (m *UpdateProfileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateProfileRequest.Merge(m, src)
}
func (m *UpdateProfileRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateProfileRequest.Size(m)
}
func (m *UpdateProfileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateProfileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateProfileRequest proto.InternalMessageInfo

func (m *UpdateProfileRequest) GetProfile() *Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

type UpdateProfileResponse struct {
	// Profile data after update.
	Profile              *Profile `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateProfileResponse) Reset()         { *m = UpdateProfileResponse{} }
func (m *UpdateProfileResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateProfileResponse) ProtoMessage()    {}
func (*UpdateProfileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_459271e8c06255ea, []int{5}
}

func (m *UpdateProfileResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateProfileResponse.Unmarshal(m, b)
}
func (m *UpdateProfileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateProfileResponse.Marshal(b, m, deterministic)
}
func (m *UpdateProfileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateProfileResponse.Merge(m, src)
}
func (m *UpdateProfileResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateProfileResponse.Size(m)
}
func (m *UpdateProfileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateProfileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateProfileResponse proto.InternalMessageInfo

func (m *UpdateProfileResponse) GetProfile() *Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

type GetProfileRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetProfileRequest) Reset()         { *m = GetProfileRequest{} }
func (m *GetProfileRequest) String() string { return proto.CompactTextString(m) }
func (*GetProfileRequest) ProtoMessage()    {}
func (*GetProfileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_459271e8c06255ea, []int{6}
}

func (m *GetProfileRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetProfileRequest.Unmarshal(m, b)
}
func (m *GetProfileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetProfileRequest.Marshal(b, m, deterministic)
}
func (m *GetProfileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProfileRequest.Merge(m, src)
}
func (m *GetProfileRequest) XXX_Size() int {
	return xxx_messageInfo_GetProfileRequest.Size(m)
}
func (m *GetProfileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProfileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetProfileRequest proto.InternalMessageInfo

type GetProfileResponse struct {
	// Retrieved profile data.
	Profile              *Profile `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetProfileResponse) Reset()         { *m = GetProfileResponse{} }
func (m *GetProfileResponse) String() string { return proto.CompactTextString(m) }
func (*GetProfileResponse) ProtoMessage()    {}
func (*GetProfileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_459271e8c06255ea, []int{7}
}

func (m *GetProfileResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetProfileResponse.Unmarshal(m, b)
}
func (m *GetProfileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetProfileResponse.Marshal(b, m, deterministic)
}
func (m *GetProfileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProfileResponse.Merge(m, src)
}
func (m *GetProfileResponse) XXX_Size() int {
	return xxx_messageInfo_GetProfileResponse.Size(m)
}
func (m *GetProfileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProfileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetProfileResponse proto.InternalMessageInfo

func (m *GetProfileResponse) GetProfile() *Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

type Profile struct {
	// Libp2p peer ID. Generated by the server and can't be updated.
	PeerId string `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	// Readable username or alias. Doesn't have to be unique.
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// Optional. Real email that could be publically shared.
	Email string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	// Optional. Free-form bio. Text only.
	Bio                  string   `protobuf:"bytes,4,opt,name=bio,proto3" json:"bio,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Profile) Reset()         { *m = Profile{} }
func (m *Profile) String() string { return proto.CompactTextString(m) }
func (*Profile) ProtoMessage()    {}
func (*Profile) Descriptor() ([]byte, []int) {
	return fileDescriptor_459271e8c06255ea, []int{8}
}

func (m *Profile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Profile.Unmarshal(m, b)
}
func (m *Profile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Profile.Marshal(b, m, deterministic)
}
func (m *Profile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Profile.Merge(m, src)
}
func (m *Profile) XXX_Size() int {
	return xxx_messageInfo_Profile.Size(m)
}
func (m *Profile) XXX_DiscardUnknown() {
	xxx_messageInfo_Profile.DiscardUnknown(m)
}

var xxx_messageInfo_Profile proto.InternalMessageInfo

func (m *Profile) GetPeerId() string {
	if m != nil {
		return m.PeerId
	}
	return ""
}

func (m *Profile) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Profile) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Profile) GetBio() string {
	if m != nil {
		return m.Bio
	}
	return ""
}

func init() {
	proto.RegisterType((*GenSeedRequest)(nil), "com.mintter.GenSeedRequest")
	proto.RegisterType((*GenSeedResponse)(nil), "com.mintter.GenSeedResponse")
	proto.RegisterType((*InitProfileRequest)(nil), "com.mintter.InitProfileRequest")
	proto.RegisterType((*InitProfileResponse)(nil), "com.mintter.InitProfileResponse")
	proto.RegisterType((*UpdateProfileRequest)(nil), "com.mintter.UpdateProfileRequest")
	proto.RegisterType((*UpdateProfileResponse)(nil), "com.mintter.UpdateProfileResponse")
	proto.RegisterType((*GetProfileRequest)(nil), "com.mintter.GetProfileRequest")
	proto.RegisterType((*GetProfileResponse)(nil), "com.mintter.GetProfileResponse")
	proto.RegisterType((*Profile)(nil), "com.mintter.Profile")
}

func init() {
	proto.RegisterFile("mintter.proto", fileDescriptor_459271e8c06255ea)
}

var fileDescriptor_459271e8c06255ea = []byte{
	// 395 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0xcd, 0x4e, 0xf2, 0x50,
	0x10, 0xfd, 0x0a, 0x1f, 0x54, 0x06, 0xf9, 0x1b, 0x20, 0x36, 0xd5, 0x08, 0x76, 0x23, 0x89, 0xb1,
	0x0b, 0x5c, 0xbb, 0x31, 0x06, 0xc2, 0xc2, 0x48, 0x6a, 0x4c, 0x8c, 0x1b, 0x52, 0xe8, 0x10, 0x9b,
	0xb4, 0xbd, 0xb5, 0x2d, 0x21, 0xf1, 0x01, 0x7c, 0x3e, 0x1f, 0xc9, 0x70, 0xfb, 0x23, 0xb7, 0x82,
	0x89, 0xae, 0xda, 0x39, 0x33, 0xf7, 0xcc, 0xc9, 0xb9, 0xe7, 0x42, 0xcd, 0xb5, 0xbd, 0x28, 0xa2,
	0x40, 0xf7, 0x03, 0x16, 0x31, 0xac, 0x2e, 0x98, 0xab, 0x27, 0x90, 0x76, 0x0d, 0xf5, 0x31, 0x79,
	0x0f, 0x44, 0x96, 0x41, 0xaf, 0x2b, 0x0a, 0x23, 0xbc, 0x80, 0x96, 0x49, 0x6f, 0x44, 0xd6, 0xcc,
	0x37, 0xc3, 0xd0, 0x7f, 0x09, 0xcc, 0x90, 0x14, 0xa9, 0x2f, 0x0d, 0x0e, 0x8d, 0x66, 0xdc, 0x98,
	0x66, 0xb8, 0x76, 0x09, 0x8d, 0xec, 0x78, 0xe8, 0x33, 0x2f, 0x24, 0x54, 0xe1, 0xc0, 0xf5, 0xc8,
	0x65, 0x9e, 0xbd, 0x50, 0xa4, 0x7e, 0x71, 0x50, 0x31, 0xb2, 0x5a, 0x7b, 0x97, 0x00, 0x27, 0x9e,
	0x1d, 0x4d, 0x03, 0xb6, 0xb4, 0x1d, 0x4a, 0x57, 0x9e, 0x43, 0x63, 0x6d, 0x3a, 0x0e, 0x45, 0x7c,
	0xe5, 0x9a, 0x05, 0x56, 0xb2, 0xb0, 0x1e, 0xc3, 0xd3, 0x04, 0x15, 0xb8, 0x0b, 0x22, 0xf7, 0x6e,
	0xdd, 0xc5, 0x3d, 0xba, 0xbb, 0xd0, 0x16, 0x74, 0xc4, 0xda, 0xb5, 0x11, 0x74, 0x1e, 0x7d, 0xcb,
	0x8c, 0x28, 0x27, 0x50, 0x07, 0xd9, 0x8f, 0x11, 0x2e, 0xac, 0x3a, 0xec, 0xe8, 0x5b, 0x26, 0xea,
	0xe9, 0x74, 0x3a, 0xa4, 0x8d, 0xa1, 0x9b, 0xe3, 0x49, 0xcc, 0xf9, 0x2d, 0x51, 0x1b, 0x5a, 0x63,
	0xca, 0xd9, 0xa5, 0xdd, 0x02, 0x6e, 0x83, 0x7f, 0xa4, 0x5e, 0x82, 0x9c, 0x60, 0x78, 0x04, 0xb2,
	0x4f, 0x14, 0xcc, 0xec, 0xd8, 0xf7, 0x8a, 0x51, 0xde, 0x94, 0x13, 0xee, 0xf7, 0x2a, 0xa4, 0xc0,
	0x33, 0x5d, 0x52, 0x0a, 0xbc, 0x93, 0xd5, 0xd8, 0x81, 0x12, 0xb9, 0xa6, 0xed, 0x70, 0x8f, 0x2b,
	0x46, 0x5c, 0x60, 0x13, 0x8a, 0x73, 0x9b, 0x29, 0xff, 0x39, 0xb6, 0xf9, 0x1d, 0x7e, 0x14, 0x40,
	0xbe, 0x8b, 0x45, 0xe0, 0x08, 0xe4, 0x24, 0x2e, 0x78, 0x2c, 0xa8, 0x13, 0x33, 0xa8, 0x9e, 0xec,
	0x6e, 0x26, 0xb7, 0xf4, 0x0f, 0x0d, 0xa8, 0x6e, 0x5d, 0x1f, 0xf6, 0x84, 0xf1, 0xef, 0x01, 0x53,
	0xfb, 0xfb, 0x07, 0x32, 0xce, 0x7b, 0x80, 0x2f, 0x57, 0xf1, 0x34, 0xa7, 0x20, 0xcf, 0xd8, 0xdb,
	0xdb, 0xcf, 0x08, 0x9f, 0xa0, 0x26, 0x84, 0x00, 0xcf, 0x84, 0x33, 0xbb, 0x82, 0xa6, 0x6a, 0x3f,
	0x8d, 0xa4, 0xcc, 0x37, 0xf2, 0x73, 0x89, 0x3f, 0xe5, 0x79, 0x99, 0x7f, 0xae, 0x3e, 0x03, 0x00,
	0x00, 0xff, 0xff, 0x2f, 0x32, 0x2c, 0x9b, 0xe2, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MintterClient is the client API for Mintter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MintterClient interface {
	// Generates cryptographic seed that is used to derive all the cryptographic
	// keys necessary for Mintter to work. It's currenly supposed to be using
	// LND's Aezeed implementation, that solves some of the issues with BIP-39.
	// The seed is encoded as a mnemonic of N human readable words. The seed could
	// be reconstructed given these words and the passphrase.
	//
	// See: https://github.com/lightningnetwork/lnd/tree/master/aezeed.
	GenSeed(ctx context.Context, in *GenSeedRequest, opts ...grpc.CallOption) (*GenSeedResponse, error)
	// After generating the seed, this call is used to commit the seed and
	// initialize the daemon's internal profile.
	InitProfile(ctx context.Context, in *InitProfileRequest, opts ...grpc.CallOption) (*InitProfileResponse, error)
	// Retrieves profile information.
	GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error)
	// Updates profile information.
	UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error)
}

type mintterClient struct {
	cc grpc.ClientConnInterface
}

func NewMintterClient(cc grpc.ClientConnInterface) MintterClient {
	return &mintterClient{cc}
}

func (c *mintterClient) GenSeed(ctx context.Context, in *GenSeedRequest, opts ...grpc.CallOption) (*GenSeedResponse, error) {
	out := new(GenSeedResponse)
	err := c.cc.Invoke(ctx, "/com.mintter.Mintter/GenSeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mintterClient) InitProfile(ctx context.Context, in *InitProfileRequest, opts ...grpc.CallOption) (*InitProfileResponse, error) {
	out := new(InitProfileResponse)
	err := c.cc.Invoke(ctx, "/com.mintter.Mintter/InitProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mintterClient) GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error) {
	out := new(GetProfileResponse)
	err := c.cc.Invoke(ctx, "/com.mintter.Mintter/GetProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mintterClient) UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error) {
	out := new(UpdateProfileResponse)
	err := c.cc.Invoke(ctx, "/com.mintter.Mintter/UpdateProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MintterServer is the server API for Mintter service.
type MintterServer interface {
	// Generates cryptographic seed that is used to derive all the cryptographic
	// keys necessary for Mintter to work. It's currenly supposed to be using
	// LND's Aezeed implementation, that solves some of the issues with BIP-39.
	// The seed is encoded as a mnemonic of N human readable words. The seed could
	// be reconstructed given these words and the passphrase.
	//
	// See: https://github.com/lightningnetwork/lnd/tree/master/aezeed.
	GenSeed(context.Context, *GenSeedRequest) (*GenSeedResponse, error)
	// After generating the seed, this call is used to commit the seed and
	// initialize the daemon's internal profile.
	InitProfile(context.Context, *InitProfileRequest) (*InitProfileResponse, error)
	// Retrieves profile information.
	GetProfile(context.Context, *GetProfileRequest) (*GetProfileResponse, error)
	// Updates profile information.
	UpdateProfile(context.Context, *UpdateProfileRequest) (*UpdateProfileResponse, error)
}

// UnimplementedMintterServer can be embedded to have forward compatible implementations.
type UnimplementedMintterServer struct {
}

func (*UnimplementedMintterServer) GenSeed(ctx context.Context, req *GenSeedRequest) (*GenSeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenSeed not implemented")
}
func (*UnimplementedMintterServer) InitProfile(ctx context.Context, req *InitProfileRequest) (*InitProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitProfile not implemented")
}
func (*UnimplementedMintterServer) GetProfile(ctx context.Context, req *GetProfileRequest) (*GetProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (*UnimplementedMintterServer) UpdateProfile(ctx context.Context, req *UpdateProfileRequest) (*UpdateProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}

func RegisterMintterServer(s *grpc.Server, srv MintterServer) {
	s.RegisterService(&_Mintter_serviceDesc, srv)
}

func _Mintter_GenSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenSeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MintterServer).GenSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.Mintter/GenSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MintterServer).GenSeed(ctx, req.(*GenSeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mintter_InitProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MintterServer).InitProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.Mintter/InitProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MintterServer).InitProfile(ctx, req.(*InitProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mintter_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MintterServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.Mintter/GetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MintterServer).GetProfile(ctx, req.(*GetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mintter_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MintterServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.Mintter/UpdateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MintterServer).UpdateProfile(ctx, req.(*UpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mintter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.mintter.Mintter",
	HandlerType: (*MintterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenSeed",
			Handler:    _Mintter_GenSeed_Handler,
		},
		{
			MethodName: "InitProfile",
			Handler:    _Mintter_InitProfile_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _Mintter_GetProfile_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _Mintter_UpdateProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mintter.proto",
}
