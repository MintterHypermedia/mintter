// Code generated by sqlitegen. DO NOT EDIT.

package lndhubsql

import (
	"errors"
	"fmt"

	"crawshaw.io/sqlite"
	"mintter/backend/db/sqlitegen"
)

var _ = errors.New

type getLoginResult struct {
	WalletsLogin []byte
}

func getLogin(conn *sqlite.Conn, walletsID string) (getLoginResult, error) {
	const query = `SELECT wallets.login FROM wallets WHERE wallets.id = :walletsID`

	var out getLoginResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetText(":walletsID", walletsID)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("getLogin: more than one result return for a single-kind query")
		}

		out.WalletsLogin = stmt.ColumnBytes(0)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: getLogin: %w", err)
	}

	return out, err
}

type getPasswordResult struct {
	WalletsPassword []byte
}

func getPassword(conn *sqlite.Conn, walletsID string) (getPasswordResult, error) {
	const query = `SELECT wallets.password FROM wallets WHERE wallets.id = :walletsID`

	var out getPasswordResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetText(":walletsID", walletsID)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("getPassword: more than one result return for a single-kind query")
		}

		out.WalletsPassword = stmt.ColumnBytes(0)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: getPassword: %w", err)
	}

	return out, err
}

type getTokenResult struct {
	WalletsToken []byte
}

func getToken(conn *sqlite.Conn, walletsID string) (getTokenResult, error) {
	const query = `SELECT wallets.token FROM wallets WHERE wallets.id = :walletsID`

	var out getTokenResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetText(":walletsID", walletsID)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("getToken: more than one result return for a single-kind query")
		}

		out.WalletsToken = stmt.ColumnBytes(0)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: getToken: %w", err)
	}

	return out, err
}
