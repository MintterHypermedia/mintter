// Code generated by sqlitegen. DO NOT EDIT.

package sitesql

import (
	"errors"
	"fmt"

	"crawshaw.io/sqlite"
	"mintter/backend/pkg/sqlitegen"
)

var _ = errors.New

func SetServedGroupID(conn *sqlite.Conn, link string) error {
	const query = `INSERT OR REPLACE INTO kv (key, value)
VALUES ('site_group_id', :link)`

	before := func(stmt *sqlite.Stmt) {
		stmt.SetText(":link", link)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: SetServedGroupID: %w", err)
	}

	return err
}

type GetServedGroupIDResult struct {
	KVValue string
}

func GetServedGroupID(conn *sqlite.Conn) (GetServedGroupIDResult, error) {
	const query = `SELECT kv.value FROM kv WHERE kv.key ='site_group_id'`

	var out GetServedGroupIDResult

	before := func(stmt *sqlite.Stmt) {
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("GetServedGroupID: more than one result return for a single-kind query")
		}

		out.KVValue = stmt.ColumnText(0)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: GetServedGroupID: %w", err)
	}

	return out, err
}

func SetSiteRegistrationLink(conn *sqlite.Conn, link string) error {
	const query = `INSERT OR REPLACE INTO kv (key, value)
VALUES ('site_registration_link', :link)`

	before := func(stmt *sqlite.Stmt) {
		stmt.SetText(":link", link)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: SetSiteRegistrationLink: %w", err)
	}

	return err
}

type GetSiteRegistrationLinkResult struct {
	KVValue string
}

func GetSiteRegistrationLink(conn *sqlite.Conn) (GetSiteRegistrationLinkResult, error) {
	const query = `SELECT kv.value FROM kv WHERE kv.key ='site_registration_link'`

	var out GetSiteRegistrationLinkResult

	before := func(stmt *sqlite.Stmt) {
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("GetSiteRegistrationLink: more than one result return for a single-kind query")
		}

		out.KVValue = stmt.ColumnText(0)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: GetSiteRegistrationLink: %w", err)
	}

	return out, err
}
