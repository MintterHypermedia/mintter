// Code generated by sqlitegen. DO NOT EDIT.

package vcssql

import (
	"errors"
	"fmt"

	"crawshaw.io/sqlite"
	"mintter/backend/db/sqlitegen"
)

var _ = errors.New

type AccountsLookupPKResult struct {
	AccountsID int64
}

func AccountsLookupPK(conn *sqlite.Conn, accountsMultihash []byte) (AccountsLookupPKResult, error) {
	const query = `SELECT accounts.id
FROM accounts
WHERE accounts.multihash = :accountsMultihash`

	var out AccountsLookupPKResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetBytes(":accountsMultihash", accountsMultihash)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("AccountsLookupPK: more than one result return for a single-kind query")
		}

		out.AccountsID = stmt.ColumnInt64(0)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: AccountsLookupPK: %w", err)
	}

	return out, err
}

type AccountsInsertPKResult struct {
	AccountsID int64
}

func AccountsInsertPK(conn *sqlite.Conn, accountsMultihash []byte) (AccountsInsertPKResult, error) {
	const query = `INSERT INTO accounts (multihash)
VALUES (:accountsMultihash) RETURNING accounts.id`

	var out AccountsInsertPKResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetBytes(":accountsMultihash", accountsMultihash)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("AccountsInsertPK: more than one result return for a single-kind query")
		}

		out.AccountsID = stmt.ColumnInt64(0)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: AccountsInsertPK: %w", err)
	}

	return out, err
}

type AccountsGetForDeviceResult struct {
	AccountsID        int64
	AccountsMultihash []byte
}

func AccountsGetForDevice(conn *sqlite.Conn, devicesMultihash []byte) (AccountsGetForDeviceResult, error) {
	const query = `SELECT accounts.id, accounts.multihash
FROM accounts
JOIN account_devices ON account_devices.account_id = accounts.id
WHERE account_devices.device_id = COALESCE((SELECT devices.id FROM devices WHERE devices.multihash = :devicesMultihash LIMIT 1), -1000)`

	var out AccountsGetForDeviceResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetBytes(":devicesMultihash", devicesMultihash)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("AccountsGetForDevice: more than one result return for a single-kind query")
		}

		out.AccountsID = stmt.ColumnInt64(0)
		out.AccountsMultihash = stmt.ColumnBytes(1)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: AccountsGetForDevice: %w", err)
	}

	return out, err
}

type AccountsListResult struct {
	AccountsID        int64
	AccountsMultihash []byte
}

func AccountsList(conn *sqlite.Conn, ownAccountMultihash []byte) ([]AccountsListResult, error) {
	const query = `SELECT accounts.id, accounts.multihash
FROM accounts
WHERE accounts.multihash != :ownAccountMultihash`

	var out []AccountsListResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetBytes(":ownAccountMultihash", ownAccountMultihash)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		out = append(out, AccountsListResult{
			AccountsID:        stmt.ColumnInt64(0),
			AccountsMultihash: stmt.ColumnBytes(1),
		})

		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: AccountsList: %w", err)
	}

	return out, err
}

func ContentLinksInsert(conn *sqlite.Conn, contentLinksSourceDocumentID int64, contentLinksSourceBlockID string, contentLinksSourceChangeID int64, contentLinksSourceVersion string, contentLinksTargetDocumentID int64, contentLinksTargetBlockID string, contentLinksTargetVersion string) error {
	const query = `INSERT OR IGNORE INTO content_links (source_document_id, source_block_id, source_change_id, source_version, target_document_id, target_block_id, target_version)
VALUES (:contentLinksSourceDocumentID, :contentLinksSourceBlockID, :contentLinksSourceChangeID, :contentLinksSourceVersion, :contentLinksTargetDocumentID, :contentLinksTargetBlockID, :contentLinksTargetVersion)`

	before := func(stmt *sqlite.Stmt) {
		stmt.SetInt64(":contentLinksSourceDocumentID", contentLinksSourceDocumentID)
		stmt.SetText(":contentLinksSourceBlockID", contentLinksSourceBlockID)
		stmt.SetInt64(":contentLinksSourceChangeID", contentLinksSourceChangeID)
		stmt.SetText(":contentLinksSourceVersion", contentLinksSourceVersion)
		stmt.SetInt64(":contentLinksTargetDocumentID", contentLinksTargetDocumentID)
		stmt.SetText(":contentLinksTargetBlockID", contentLinksTargetBlockID)
		stmt.SetText(":contentLinksTargetVersion", contentLinksTargetVersion)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: ContentLinksInsert: %w", err)
	}

	return err
}

type BacklinksListByTargetDocumentResult struct {
	SourceDocumentMultihash   []byte
	ContentLinksSourceBlockID string
	ContentLinksSourceVersion string
	TargetDocumentMultihash   []byte
	ContentLinksTargetBlockID string
	ContentLinksTargetVersion string
}

func BacklinksListByTargetDocument(conn *sqlite.Conn, targetDocumentID int64, depth int64) ([]BacklinksListByTargetDocumentResult, error) {
	const query = `WITH RECURSIVE parent AS (SELECT content_links.*, 0 AS level FROM content_links WHERE content_links.target_document_id = :targetDocumentID UNION ALL SELECT content_links.*, parent.level + 1 AS child_level FROM content_links, parent WHERE parent.source_document_id = content_links.target_document_id AND child_level <= :depth ORDER BY child_level) SELECT s.multihash, content_links.source_block_id, content_links.source_version, t.multihash, content_links.target_block_id, content_links.target_version FROM parent AS content_links JOIN ipfs_blocks s ON s.id = content_links.source_document_id JOIN ipfs_blocks t on t.id = content_links.target_document_id WHERE content_links.source_document_id != :targetDocumentID`

	var out []BacklinksListByTargetDocumentResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetInt64(":targetDocumentID", targetDocumentID)
		stmt.SetInt64(":depth", depth)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		out = append(out, BacklinksListByTargetDocumentResult{
			SourceDocumentMultihash:   stmt.ColumnBytes(0),
			ContentLinksSourceBlockID: stmt.ColumnText(1),
			ContentLinksSourceVersion: stmt.ColumnText(2),
			TargetDocumentMultihash:   stmt.ColumnBytes(3),
			ContentLinksTargetBlockID: stmt.ColumnText(4),
			ContentLinksTargetVersion: stmt.ColumnText(5),
		})

		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: BacklinksListByTargetDocument: %w", err)
	}

	return out, err
}

func ContentLinksDelete(conn *sqlite.Conn, contentLinksSourceDocumentID int64, contentLinksSourceBlockID string, contentLinksSourceChangeID int64) error {
	const query = `DELETE FROM content_links
WHERE content_links.source_document_id = :contentLinksSourceDocumentID
AND content_links.source_block_id = :contentLinksSourceBlockID
AND content_links.source_change_id = :contentLinksSourceChangeID`

	before := func(stmt *sqlite.Stmt) {
		stmt.SetInt64(":contentLinksSourceDocumentID", contentLinksSourceDocumentID)
		stmt.SetText(":contentLinksSourceBlockID", contentLinksSourceBlockID)
		stmt.SetInt64(":contentLinksSourceChangeID", contentLinksSourceChangeID)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: ContentLinksDelete: %w", err)
	}

	return err
}

type DevicesLookupPKResult struct {
	DevicesID int64
}

func DevicesLookupPK(conn *sqlite.Conn, devicesMultihash []byte) (DevicesLookupPKResult, error) {
	const query = `SELECT devices.id
FROM devices
WHERE devices.multihash = :devicesMultihash`

	var out DevicesLookupPKResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetBytes(":devicesMultihash", devicesMultihash)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("DevicesLookupPK: more than one result return for a single-kind query")
		}

		out.DevicesID = stmt.ColumnInt64(0)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: DevicesLookupPK: %w", err)
	}

	return out, err
}

type DevicesInsertPKResult struct {
	DevicesID int64
}

func DevicesInsertPK(conn *sqlite.Conn, devicesMultihash []byte) (DevicesInsertPKResult, error) {
	const query = `INSERT INTO devices (multihash)
VALUES (:devicesMultihash) RETURNING devices.id`

	var out DevicesInsertPKResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetBytes(":devicesMultihash", devicesMultihash)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("DevicesInsertPK: more than one result return for a single-kind query")
		}

		out.DevicesID = stmt.ColumnInt64(0)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: DevicesInsertPK: %w", err)
	}

	return out, err
}

func AccountDevicesInsertOrIgnore(conn *sqlite.Conn, accountDevicesAccountID int64, accountDevicesDeviceID int64) error {
	const query = `INSERT OR IGNORE INTO account_devices (account_id, device_id) VALUES (:accountDevicesAccountID, :accountDevicesDeviceID)`

	before := func(stmt *sqlite.Stmt) {
		stmt.SetInt64(":accountDevicesAccountID", accountDevicesAccountID)
		stmt.SetInt64(":accountDevicesDeviceID", accountDevicesDeviceID)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: AccountDevicesInsertOrIgnore: %w", err)
	}

	return err
}

func AccountDevicesUpdateDelegation(conn *sqlite.Conn, accountDevicesDelegationID int64, accountDevicesAccountID int64, accountDevicesDeviceID int64) error {
	const query = `UPDATE account_devices
SET delegation_id = :accountDevicesDelegationID
WHERE account_id = :accountDevicesAccountID
AND device_id = :accountDevicesDeviceID
`

	before := func(stmt *sqlite.Stmt) {
		stmt.SetInt64(":accountDevicesDelegationID", accountDevicesDelegationID)
		stmt.SetInt64(":accountDevicesAccountID", accountDevicesAccountID)
		stmt.SetInt64(":accountDevicesDeviceID", accountDevicesDeviceID)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: AccountDevicesUpdateDelegation: %w", err)
	}

	return err
}

type AccountDevicesListResult struct {
	DevicesMultihash  []byte
	AccountsMultihash []byte
}

func AccountDevicesList(conn *sqlite.Conn) ([]AccountDevicesListResult, error) {
	const query = `SELECT devices.multihash, accounts.multihash
FROM account_devices
JOIN accounts ON accounts.id = account_devices.account_id JOIN devices ON devices.id = account_devices.device_id`

	var out []AccountDevicesListResult

	before := func(stmt *sqlite.Stmt) {
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		out = append(out, AccountDevicesListResult{
			DevicesMultihash:  stmt.ColumnBytes(0),
			AccountsMultihash: stmt.ColumnBytes(1),
		})

		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: AccountDevicesList: %w", err)
	}

	return out, err
}

type DevicesListResult struct {
	DevicesMultihash        []byte
	AccountDevicesDeviceID  int64
	AccountDevicesAccountID int64
}

func DevicesList(conn *sqlite.Conn) ([]DevicesListResult, error) {
	const query = `SELECT devices.multihash, account_devices.device_id, account_devices.account_id
FROM account_devices
JOIN devices ON devices.id = account_devices.device_id`

	var out []DevicesListResult

	before := func(stmt *sqlite.Stmt) {
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		out = append(out, DevicesListResult{
			DevicesMultihash:        stmt.ColumnBytes(0),
			AccountDevicesDeviceID:  stmt.ColumnInt64(1),
			AccountDevicesAccountID: stmt.ColumnInt64(2),
		})

		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: DevicesList: %w", err)
	}

	return out, err
}

type IPFSBlocksLookupPKResult struct {
	IPFSBlocksID int64
}

func IPFSBlocksLookupPK(conn *sqlite.Conn, ipfsBlocksMultihash []byte) (IPFSBlocksLookupPKResult, error) {
	const query = `SELECT ipfs_blocks.id
FROM ipfs_blocks
WHERE ipfs_blocks.multihash = :ipfsBlocksMultihash
`

	var out IPFSBlocksLookupPKResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetBytes(":ipfsBlocksMultihash", ipfsBlocksMultihash)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("IPFSBlocksLookupPK: more than one result return for a single-kind query")
		}

		out.IPFSBlocksID = stmt.ColumnInt64(0)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: IPFSBlocksLookupPK: %w", err)
	}

	return out, err
}

type IPFSBlocksLookupCIDResult struct {
	IPFSBlocksID        int64
	IPFSBlocksCodec     int64
	IPFSBlocksMultihash []byte
}

func IPFSBlocksLookupCID(conn *sqlite.Conn, ipfsBlocksID int64) (IPFSBlocksLookupCIDResult, error) {
	const query = `SELECT ipfs_blocks.id, ipfs_blocks.codec, ipfs_blocks.multihash
FROM ipfs_blocks
WHERE ipfs_blocks.id = :ipfsBlocksID
`

	var out IPFSBlocksLookupCIDResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetInt64(":ipfsBlocksID", ipfsBlocksID)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("IPFSBlocksLookupCID: more than one result return for a single-kind query")
		}

		out.IPFSBlocksID = stmt.ColumnInt64(0)
		out.IPFSBlocksCodec = stmt.ColumnInt64(1)
		out.IPFSBlocksMultihash = stmt.ColumnBytes(2)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: IPFSBlocksLookupCID: %w", err)
	}

	return out, err
}

func IPFSBlocksInsert(conn *sqlite.Conn, ipfsBlocksID int64, ipfsBlocksMultihash []byte, ipfsBlocksCodec int64, ipfsBlocksData []byte, ipfsBlocksSize int64) error {
	const query = `INSERT INTO ipfs_blocks (id, multihash, codec, data, size)
VALUES (:ipfsBlocksID, :ipfsBlocksMultihash, :ipfsBlocksCodec, :ipfsBlocksData, :ipfsBlocksSize)`

	before := func(stmt *sqlite.Stmt) {
		stmt.SetInt64(":ipfsBlocksID", ipfsBlocksID)
		stmt.SetBytes(":ipfsBlocksMultihash", ipfsBlocksMultihash)
		stmt.SetInt64(":ipfsBlocksCodec", ipfsBlocksCodec)
		stmt.SetBytes(":ipfsBlocksData", ipfsBlocksData)
		stmt.SetInt64(":ipfsBlocksSize", ipfsBlocksSize)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: IPFSBlocksInsert: %w", err)
	}

	return err
}

type IPFSBlocksUpsertResult struct {
	IPFSBlocksID int64
}

func IPFSBlocksUpsert(conn *sqlite.Conn, ipfsBlocksMultihash []byte, ipfsBlocksCodec int64, ipfsBlocksData []byte, ipfsBlocksSize int64) (IPFSBlocksUpsertResult, error) {
	const query = `INSERT INTO ipfs_blocks (multihash, codec, data, size)
VALUES (:ipfsBlocksMultihash, :ipfsBlocksCodec, :ipfsBlocksData, :ipfsBlocksSize)
ON CONFLICT (multihash)
DO UPDATE SET codec = excluded.codec, data = excluded.data, size = excluded.size
WHERE size = -1
RETURNING ipfs_blocks.id`

	var out IPFSBlocksUpsertResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetBytes(":ipfsBlocksMultihash", ipfsBlocksMultihash)
		stmt.SetInt64(":ipfsBlocksCodec", ipfsBlocksCodec)
		stmt.SetBytes(":ipfsBlocksData", ipfsBlocksData)
		stmt.SetInt64(":ipfsBlocksSize", ipfsBlocksSize)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("IPFSBlocksUpsert: more than one result return for a single-kind query")
		}

		out.IPFSBlocksID = stmt.ColumnInt64(0)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: IPFSBlocksUpsert: %w", err)
	}

	return out, err
}

type IPFSBlocksListValidResult struct {
	IPFSBlocksID        int64
	IPFSBlocksMultihash []byte
	IPFSBlocksCodec     int64
}

func IPFSBlocksListValid(conn *sqlite.Conn) ([]IPFSBlocksListValidResult, error) {
	const query = `SELECT ipfs_blocks.id, ipfs_blocks.multihash, ipfs_blocks.codec
FROM ipfs_blocks
WHERE ipfs_blocks.size >= 0`

	var out []IPFSBlocksListValidResult

	before := func(stmt *sqlite.Stmt) {
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		out = append(out, IPFSBlocksListValidResult{
			IPFSBlocksID:        stmt.ColumnInt64(0),
			IPFSBlocksMultihash: stmt.ColumnBytes(1),
			IPFSBlocksCodec:     stmt.ColumnInt64(2),
		})

		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: IPFSBlocksListValid: %w", err)
	}

	return out, err
}

type IPFSBlocksHasResult struct {
	Has int64
}

func IPFSBlocksHas(conn *sqlite.Conn, ipfsBlocksMultihash []byte) (IPFSBlocksHasResult, error) {
	const query = `SELECT 1 AS has
FROM ipfs_blocks
WHERE ipfs_blocks.multihash = :ipfsBlocksMultihash
AND ipfs_blocks.size >= 0`

	var out IPFSBlocksHasResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetBytes(":ipfsBlocksMultihash", ipfsBlocksMultihash)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("IPFSBlocksHas: more than one result return for a single-kind query")
		}

		out.Has = stmt.ColumnInt64(0)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: IPFSBlocksHas: %w", err)
	}

	return out, err
}

type IPFSBlocksGetResult struct {
	IPFSBlocksID        int64
	IPFSBlocksMultihash []byte
	IPFSBlocksCodec     int64
	IPFSBlocksData      []byte
	IPFSBlocksSize      int64
}

func IPFSBlocksGet(conn *sqlite.Conn, ipfsBlocksMultihash []byte) (IPFSBlocksGetResult, error) {
	const query = `SELECT ipfs_blocks.id, ipfs_blocks.multihash, ipfs_blocks.codec, ipfs_blocks.data, ipfs_blocks.size
FROM ipfs_blocks
WHERE ipfs_blocks.multihash = :ipfsBlocksMultihash AND ipfs_blocks.size >= 0`

	var out IPFSBlocksGetResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetBytes(":ipfsBlocksMultihash", ipfsBlocksMultihash)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("IPFSBlocksGet: more than one result return for a single-kind query")
		}

		out.IPFSBlocksID = stmt.ColumnInt64(0)
		out.IPFSBlocksMultihash = stmt.ColumnBytes(1)
		out.IPFSBlocksCodec = stmt.ColumnInt64(2)
		out.IPFSBlocksData = stmt.ColumnBytes(3)
		out.IPFSBlocksSize = stmt.ColumnInt64(4)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: IPFSBlocksGet: %w", err)
	}

	return out, err
}

type IPFSBlocksGetSizeResult struct {
	IPFSBlocksID   int64
	IPFSBlocksSize int64
}

func IPFSBlocksGetSize(conn *sqlite.Conn, ipfsBlocksMultihash []byte) (IPFSBlocksGetSizeResult, error) {
	const query = `SELECT ipfs_blocks.id, ipfs_blocks.size
FROM ipfs_blocks
WHERE ipfs_blocks.multihash = :ipfsBlocksMultihash AND ipfs_blocks.size >= 0`

	var out IPFSBlocksGetSizeResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetBytes(":ipfsBlocksMultihash", ipfsBlocksMultihash)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("IPFSBlocksGetSize: more than one result return for a single-kind query")
		}

		out.IPFSBlocksID = stmt.ColumnInt64(0)
		out.IPFSBlocksSize = stmt.ColumnInt64(1)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: IPFSBlocksGetSize: %w", err)
	}

	return out, err
}

type IPFSBlocksDeleteResult struct {
	IPFSBlocksID int64
}

func IPFSBlocksDelete(conn *sqlite.Conn, ipfsBlocksMultihash []byte) (IPFSBlocksDeleteResult, error) {
	const query = `DELETE FROM ipfs_blocks
WHERE ipfs_blocks.multihash = :ipfsBlocksMultihash
RETURNING ipfs_blocks.id`

	var out IPFSBlocksDeleteResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetBytes(":ipfsBlocksMultihash", ipfsBlocksMultihash)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("IPFSBlocksDelete: more than one result return for a single-kind query")
		}

		out.IPFSBlocksID = stmt.ColumnInt64(0)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: IPFSBlocksDelete: %w", err)
	}

	return out, err
}

func IPFSBlocksDeleteByID(conn *sqlite.Conn, ipfsBlocksID int64) error {
	const query = `DELETE FROM ipfs_blocks
WHERE ipfs_blocks.id = :ipfsBlocksID`

	before := func(stmt *sqlite.Stmt) {
		stmt.SetInt64(":ipfsBlocksID", ipfsBlocksID)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: IPFSBlocksDeleteByID: %w", err)
	}

	return err
}

type IPFSBlocksGetHashResult struct {
	IPFSBlocksCodec     int64
	IPFSBlocksMultihash []byte
}

func IPFSBlocksGetHash(conn *sqlite.Conn, ipfsBlocksID int64) (IPFSBlocksGetHashResult, error) {
	const query = `SELECT ipfs_blocks.codec, ipfs_blocks.multihash
FROM ipfs_blocks
WHERE ipfs_blocks.id = :ipfsBlocksID
LIMIT 1`

	var out IPFSBlocksGetHashResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetInt64(":ipfsBlocksID", ipfsBlocksID)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("IPFSBlocksGetHash: more than one result return for a single-kind query")
		}

		out.IPFSBlocksCodec = stmt.ColumnInt64(0)
		out.IPFSBlocksMultihash = stmt.ColumnBytes(1)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: IPFSBlocksGetHash: %w", err)
	}

	return out, err
}

func IPFSBlocksUpdate(conn *sqlite.Conn, ipfsBlocksMultihash []byte) error {
	const query = `UPDATE ipfs_blocks
SET (data, size) = ()
WHERE ipfs_blocks.multihash = :ipfsBlocksMultihash
AND ipfs_blocks.size = -1`

	before := func(stmt *sqlite.Stmt) {
		stmt.SetBytes(":ipfsBlocksMultihash", ipfsBlocksMultihash)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: IPFSBlocksUpdate: %w", err)
	}

	return err
}

type IPFSBlocksNewIDResult struct {
	Seq int64
}

func IPFSBlocksNewID(conn *sqlite.Conn) (IPFSBlocksNewIDResult, error) {
	const query = `UPDATE sqlite_sequence
SET seq = seq + 1
WHERE name = 'ipfs_blocks'
RETURNING seq`

	var out IPFSBlocksNewIDResult

	before := func(stmt *sqlite.Stmt) {
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("IPFSBlocksNewID: more than one result return for a single-kind query")
		}

		out.Seq = stmt.ColumnInt64(0)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: IPFSBlocksNewID: %w", err)
	}

	return out, err
}

func IPLDLinksInsertOrIgnore(conn *sqlite.Conn, ipldLinksChild int64, ipldLinksParent int64, ipldLinksPath string) error {
	const query = `INSERT OR IGNORE INTO ipld_links (child, parent, path)
VALUES (:ipldLinksChild, :ipldLinksParent, :ipldLinksPath)`

	before := func(stmt *sqlite.Stmt) {
		stmt.SetInt64(":ipldLinksChild", ipldLinksChild)
		stmt.SetInt64(":ipldLinksParent", ipldLinksParent)
		stmt.SetText(":ipldLinksPath", ipldLinksPath)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: IPLDLinksInsertOrIgnore: %w", err)
	}

	return err
}

func PermanodesInsertOrIgnore(conn *sqlite.Conn, permanodesType string, permanodesID int64, permanodesCreateTime int64, permanodesAccountID int64) error {
	const query = `INSERT OR IGNORE INTO permanodes (type, id, create_time, account_id)
VALUES (:permanodesType, :permanodesID, :permanodesCreateTime, :permanodesAccountID)`

	before := func(stmt *sqlite.Stmt) {
		stmt.SetText(":permanodesType", permanodesType)
		stmt.SetInt64(":permanodesID", permanodesID)
		stmt.SetInt64(":permanodesCreateTime", permanodesCreateTime)
		stmt.SetInt64(":permanodesAccountID", permanodesAccountID)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: PermanodesInsertOrIgnore: %w", err)
	}

	return err
}

type PermanodeOwnersGetOneResult struct {
	AccountsMultihash []byte
}

func PermanodeOwnersGetOne(conn *sqlite.Conn, permanodesID int64) (PermanodeOwnersGetOneResult, error) {
	const query = `SELECT accounts.multihash
FROM permanodes
JOIN accounts ON permanodes.account_id = accounts.id
WHERE permanodes.id = :permanodesID
LIMIT 1`

	var out PermanodeOwnersGetOneResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetInt64(":permanodesID", permanodesID)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("PermanodeOwnersGetOne: more than one result return for a single-kind query")
		}

		out.AccountsMultihash = stmt.ColumnBytes(0)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: PermanodeOwnersGetOne: %w", err)
	}

	return out, err
}

type PermanodesListByTypeResult struct {
	PermanodesID         int64
	PermanodesAccountID  int64
	AccountsMultihash    []byte
	PermanodeCodec       int64
	PermanodeMultihash   []byte
	PermanodesCreateTime int64
}

func PermanodesListByType(conn *sqlite.Conn, permanodesType string) ([]PermanodesListByTypeResult, error) {
	const query = `SELECT permanodes.id, permanodes.account_id, accounts.multihash, ipfs_blocks.codec AS permanode_codec, ipfs_blocks.multihash AS permanode_multihash, permanodes.create_time
FROM permanodes
JOIN ipfs_blocks ON ipfs_blocks.id = permanodes.id
JOIN accounts ON accounts.id = permanodes.account_id WHERE permanodes.type = :permanodesType`

	var out []PermanodesListByTypeResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetText(":permanodesType", permanodesType)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		out = append(out, PermanodesListByTypeResult{
			PermanodesID:         stmt.ColumnInt64(0),
			PermanodesAccountID:  stmt.ColumnInt64(1),
			AccountsMultihash:    stmt.ColumnBytes(2),
			PermanodeCodec:       stmt.ColumnInt64(3),
			PermanodeMultihash:   stmt.ColumnBytes(4),
			PermanodesCreateTime: stmt.ColumnInt64(5),
		})

		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: PermanodesListByType: %w", err)
	}

	return out, err
}

func ChangesInsertOrIgnore(conn *sqlite.Conn, changesID int64, changesPermanodeID int64, changesAccountID int64, changesDeviceID int64, changesKind string, changesStartTime int64) error {
	const query = `INSERT OR IGNORE INTO changes (id, permanode_id, account_id, device_id, kind, start_time)
VALUES (:changesID, :changesPermanodeID, :changesAccountID, :changesDeviceID, :changesKind, :changesStartTime)`

	before := func(stmt *sqlite.Stmt) {
		stmt.SetInt64(":changesID", changesID)
		stmt.SetInt64(":changesPermanodeID", changesPermanodeID)
		stmt.SetInt64(":changesAccountID", changesAccountID)
		stmt.SetInt64(":changesDeviceID", changesDeviceID)
		stmt.SetText(":changesKind", changesKind)
		stmt.SetInt64(":changesStartTime", changesStartTime)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: ChangesInsertOrIgnore: %w", err)
	}

	return err
}

type ChangesGetOneResult struct {
	ChangesID           int64
	IPFSBlocksCodec     int64
	IPFSBlocksMultihash []byte
	ChangesPermanodeID  int64
	ChangesKind         string
	ChangesStartTime    int64
	AccountsMultihash   []byte
	DevicesMultihash    []byte
	ChangesAccountID    int64
	ChangesDeviceID     int64
}

func ChangesGetOne(conn *sqlite.Conn, changesID int64) (ChangesGetOneResult, error) {
	const query = `SELECT changes.id, ipfs_blocks.codec, ipfs_blocks.multihash, changes.permanode_id, changes.kind, changes.start_time, accounts.multihash, devices.multihash, changes.account_id, changes.device_id
FROM changes
JOIN accounts ON accounts.id = changes.account_id
JOIN devices ON devices.id = changes.device_id
JOIN ipfs_blocks ON ipfs_blocks.id = changes.permanode_id
WHERE changes.id = :changesID
LIMIT 1`

	var out ChangesGetOneResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetInt64(":changesID", changesID)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("ChangesGetOne: more than one result return for a single-kind query")
		}

		out.ChangesID = stmt.ColumnInt64(0)
		out.IPFSBlocksCodec = stmt.ColumnInt64(1)
		out.IPFSBlocksMultihash = stmt.ColumnBytes(2)
		out.ChangesPermanodeID = stmt.ColumnInt64(3)
		out.ChangesKind = stmt.ColumnText(4)
		out.ChangesStartTime = stmt.ColumnInt64(5)
		out.AccountsMultihash = stmt.ColumnBytes(6)
		out.DevicesMultihash = stmt.ColumnBytes(7)
		out.ChangesAccountID = stmt.ColumnInt64(8)
		out.ChangesDeviceID = stmt.ColumnInt64(9)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: ChangesGetOne: %w", err)
	}

	return out, err
}

type ChangesGetParentsResult struct {
	ChangeDepsParent    int64
	ChangeDepsChild     int64
	IPFSBlocksCodec     int64
	IPFSBlocksMultihash []byte
}

func ChangesGetParents(conn *sqlite.Conn, changeDepsChild int64) ([]ChangesGetParentsResult, error) {
	const query = `SELECT change_deps.parent, change_deps.child, ipfs_blocks.codec, ipfs_blocks.multihash
FROM change_deps
LEFT OUTER JOIN ipfs_blocks ON ipfs_blocks.id = change_deps.parent
WHERE change_deps.child = :changeDepsChild
ORDER BY ipfs_blocks.multihash`

	var out []ChangesGetParentsResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetInt64(":changeDepsChild", changeDepsChild)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		out = append(out, ChangesGetParentsResult{
			ChangeDepsParent:    stmt.ColumnInt64(0),
			ChangeDepsChild:     stmt.ColumnInt64(1),
			IPFSBlocksCodec:     stmt.ColumnInt64(2),
			IPFSBlocksMultihash: stmt.ColumnBytes(3),
		})

		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: ChangesGetParents: %w", err)
	}

	return out, err
}

func ChangesInsertParent(conn *sqlite.Conn, changeDepsChild int64, changeDepsParent int64) error {
	const query = `INSERT INTO change_deps (child, parent)
VALUES (:changeDepsChild, :changeDepsParent)`

	before := func(stmt *sqlite.Stmt) {
		stmt.SetInt64(":changeDepsChild", changeDepsChild)
		stmt.SetInt64(":changeDepsParent", changeDepsParent)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: ChangesInsertParent: %w", err)
	}

	return err
}

func ChangesDeleteByID(conn *sqlite.Conn, changesID int64) error {
	const query = `DELETE FROM changes
WHERE changes.id = :changesID`

	before := func(stmt *sqlite.Stmt) {
		stmt.SetInt64(":changesID", changesID)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: ChangesDeleteByID: %w", err)
	}

	return err
}
