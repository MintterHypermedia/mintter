// Code generated by sqlitegen. DO NOT EDIT.

package backend

import (
	"errors"

	"crawshaw.io/sqlite"
	"go.uber.org/multierr"
)

var _ = errors.New

func execStmt(conn *sqlite.Conn, query string, before func(*sqlite.Stmt), onStep func(int, *sqlite.Stmt) error) (err error) {
	stmt, err := conn.Prepare(query)
	if err != nil {
		return err
	}
	defer func() {
		err = multierr.Append(err, stmt.Reset())
	}()

	before(stmt)

	for i := 0; true; i++ {
		hasRow, err := stmt.Step()
		if err != nil {
			return err
		}

		if !hasRow {
			break
		}

		if err := onStep(i, stmt); err != nil {
			return err
		}
	}

	return err
}

func insertDevice(conn *sqlite.Conn, devicesCID []byte, accountsCID []byte) error {
	const query = `INSERT INTO devices (cid, account_id)
VALUES (?, (SELECT accounts.id FROM accounts WHERE accounts.cid = ?))`

	before := func(stmt *sqlite.Stmt) {
		stmt.BindBytes(1, devicesCID)
		stmt.BindBytes(2, accountsCID)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		return nil
	}

	if err := execStmt(conn, query, before, onStep); err != nil {
		return err
	}

	return nil
}
