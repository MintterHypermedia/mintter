// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package contentgraph

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContentGraphClient is the client API for ContentGraph service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContentGraphClient interface {
	// List mentions of a document.
	ListMentions(ctx context.Context, in *ListMentionsRequest, opts ...grpc.CallOption) (*ListMentionsResponse, error)
}

type contentGraphClient struct {
	cc grpc.ClientConnInterface
}

func NewContentGraphClient(cc grpc.ClientConnInterface) ContentGraphClient {
	return &contentGraphClient{cc}
}

func (c *contentGraphClient) ListMentions(ctx context.Context, in *ListMentionsRequest, opts ...grpc.CallOption) (*ListMentionsResponse, error) {
	out := new(ListMentionsResponse)
	err := c.cc.Invoke(ctx, "/com.mintter.contentgraph.v1alpha.ContentGraph/ListMentions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentGraphServer is the server API for ContentGraph service.
// All implementations should embed UnimplementedContentGraphServer
// for forward compatibility
type ContentGraphServer interface {
	// List mentions of a document.
	ListMentions(context.Context, *ListMentionsRequest) (*ListMentionsResponse, error)
}

// UnimplementedContentGraphServer should be embedded to have forward compatible implementations.
type UnimplementedContentGraphServer struct {
}

func (UnimplementedContentGraphServer) ListMentions(context.Context, *ListMentionsRequest) (*ListMentionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMentions not implemented")
}

// UnsafeContentGraphServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentGraphServer will
// result in compilation errors.
type UnsafeContentGraphServer interface {
	mustEmbedUnimplementedContentGraphServer()
}

func RegisterContentGraphServer(s grpc.ServiceRegistrar, srv ContentGraphServer) {
	s.RegisterService(&ContentGraph_ServiceDesc, srv)
}

func _ContentGraph_ListMentions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMentionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentGraphServer).ListMentions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.contentgraph.v1alpha.ContentGraph/ListMentions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentGraphServer).ListMentions(ctx, req.(*ListMentionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContentGraph_ServiceDesc is the grpc.ServiceDesc for ContentGraph service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContentGraph_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.mintter.contentgraph.v1alpha.ContentGraph",
	HandlerType: (*ContentGraphServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListMentions",
			Handler:    _ContentGraph_ListMentions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contentgraph/v1alpha/graph.proto",
}
