
{
  "type": "group",
  "children": [
    {
      "type": "statement",
      "id": "tTtNc3gC",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Una de las partes fundamentales de un lenguaje de programación (en mi opinión, en todos) es la capacidad de comparar dos o más valores entre ellos. Y lo admito, cuando hablamos de \"operaciones de igualdad en JavaScript\" tenemos una percepción negativa sobre ello y lo que automáticamente hacemos es evitarlo o ignorarlo, pero no tiene por qué seguir siendo así."
            }
          ]
        }
      ]
    },
    {
      "type": "statement",
      "id": "QBrH5y3x",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "El objetivo de este artículo es cambiar tu percepción e interpretación sobre lo que muchos le llaman \"lo malo de JavaScript\". Describiremos en detalle qué ocurre cuando comparamos valores para ayudarte a escribir programas que tengan menos errores y sean más legibles. Aprender sobre igualdad cambió como escribo mi código y me dio más confianza en lo que hago."
            }
          ]
        }
      ]
    },
    {
      "type": "statement",
      "id": "KVox-IQi",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "¡Espero que para ti tenga un resultado similar!"
            }
          ]
        }
      ]
    },
    {
      "type": "statement",
      "id": "4uYx8CCn",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Te advierto, lo que leerás en este artículo te va a sonar muy extraño, básicamente porque no es la opinión popular sobre este tema. Hay mucha gente experta en JavaScript que, personalmente, no entienden estos conceptos bien. Juzgo esto por cómo los he visto y escuchado explicarlo; otros simplemente lo ignoran y se quedan con la explicación obvia."
            }
          ]
        }
      ]
    },
    {
      "type": "statement",
      "id": "oZw619jw",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Yo lo único que te puedo pedir es que leas este artículo con mente abierta, y al final intentes construir tu propio criterio."
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "id": "19Rnh1mh",
      "children": [
        {
          "type": "staticParagraph",
          "children": [
            {
              "type": "text",
              "value": "¿Por qué tengo que aprender sobre igualdad?"
            }
          ]
        },
        {
          "type": "group",
          "children": [
            {
              "type": "statement",
              "id": "O7wlUbvj",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "Cuando hablamos de operaciones de igualdad en JavaScript inevitablemente estamos hablando de \"coerción de tipos\" (¡sí, JavaScript tiene tipos de datos!, te los explico en "
                    },
                    {
                      "type": "link",
                      "url": "https://escuelafrontend.com/articulos/los-tipos-primitivos-en-javascript",
                      "children": [
                        {
                          "type": "text",
                          "value": "este"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "value": " artículo). Considero que la coerción es un pilar elemental para tener fundamentos sólidos sobre el lenguaje, me atrevería a decir de cualquier otro lenguaje dinámico, pero no estoy tan seguro de eso."
                    }
                  ]
                }
              ]
            },
            {
              "type": "statement",
              "id": "VtNs094e",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "En cualquier caso, entender como los tipos de los valores y variables que usamos son manipulados, los tipos de conversiones más habituales y cuando aprovecharse o evitar la coerción de tipos es clave para escribir programas bien estructurados y con menos errores. ¿Estás lista o listo?"
                    }
                  ]
                }
              ]
            },
            {
              "type": "statement",
              "id": "-F5cPzJS",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "Si no te has leído el artículo sobre "
                    },
                    {
                      "type": "link",
                      "url": "https://escuelafrontend.com/articulos/los-tipos-primitivos-en-javascript",
                      "children": [
                        {
                          "type": "text",
                          "value": "Tipos Primitivos"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "value": " te recomiendo que lo leas antes para poder tener una visión más clara sobre ellos"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "id": "3dHfYcz0",
      "children": [
        {
          "type": "staticParagraph",
          "children": [
            {
              "type": "text",
              "value": "¿Cómo JavaScript hace la coerción de tipos?"
            }
          ]
        },
        {
          "type": "group",
          "children": [
            {
              "type": "statement",
              "id": "xmRST4w8",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "No podemos hablar de Igualdad sin mencionar Coerción. En JavaScript existen unas funciones llamadas \"funciones abstractas\", que son las que se encargan de hacer conversiones entre tipos siempre que sea necesario. Se les llama \"Abstractas\" porque no son funciones que nosotros no podemos ejecutar o llamar, es la forma de explicar lo que el lenguaje hace internamente (puede que ni siquiera sean funciones per-sé). De momento entendamos que existen, más adelante puedo hacer otro artículo hablando de ellas en detalle. Si quieres saber más sobre ellas, puedes ver sus definiciones en la especificación aquí."
                    }
                  ]
                }
              ]
            },
            {
              "type": "statement",
              "id": "dA0crCNx",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "Si lo piensas bien, no hay manera de comparar nada sin que ambas cosas sean iguales o, más o menos iguales: no podemos comparar mangos con sandías (aunque ambas sean mis frutas preferidas 🍉🥭). JavaScript hace lo mismo, para que pueda aproximar dos valores, siempre los va a intentar convertir a un tipo primitivo, a menos que le digamos lo contrario."
                    }
                  ]
                }
              ]
            },
            {
              "type": "statement",
              "id": "h9AxtWOH",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "Una de las formas más habituales de invocar la coerción de tipos es mediante operaciones de igualdad como == y ===."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "id": "fV__Rj6N",
      "children": [
        {
          "type": "staticParagraph",
          "children": [
            {
              "type": "text",
              "value": "La famosa lucha entre == y ==="
            }
          ]
        },
        {
          "type": "group",
          "children": [
            {
              "type": "statement",
              "id": "xCF8sVOy",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "Si alguna vez has escuchado que la diferencia entre estas dos operaciones es que uno compara los tipos de las variables y el otro no, lamento decirte que no es exactamente así..."
                    }
                  ]
                }
              ]
            },
            {
              "type": "statement",
              "id": "JfYgCcAe",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "Puedes encontrar este "
                    },
                    {
                      "type": "link",
                      "url": "https://twitter.com/hhg2288/status/1422176504734175234?ref_src=twsrc%5Etfw%7Ctwcamp%5Etweetembed&ref_url=https%3A%2F%2Fwww.notion.so%2Fegghead%2FLo-que-Nadie-te-Ense-a-Sobre-la-Igualdad-en-JavaScript-086d9e775880443ab7a56cd41a1ba841",
                      "children": [
                        {
                          "type": "text",
                          "value": "tweet aquí"
                        }
                      ]
                    },
                    {
                      "value": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "statement",
              "id": "_Rjo0cCA",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "value": ""
                    },
                    {
                      "type": "link",
                      "url": "https://twitter.com/hhg2288/status/1422176504734175234?ref_src=twsrc%5Etfw%7Ctwcamp%5Etweetembed&ref_url=https%3A%2F%2Fwww.notion.so%2Fegghead%2FLo-que-Nadie-te-Ense-a-Sobre-la-Igualdad-en-JavaScript-086d9e775880443ab7a56cd41a1ba841",
                      "children": [
                        {
                          "type": "text",
                          "value": ""
                        }
                      ]
                    },
                    {
                      "value": "Cada una de estas comparaciones implementa un algoritmo para determinar su resultado, el doble iguales (==) o \"Loose Equality\" implementa el algoritmo llamado "
                    },
                    {
                      "type": "link",
                      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality",
                      "children": [
                        {
                          "value": "Abstract Equality Comparison",
                          "emphasis": true
                        }
                      ]
                    },
                    {
                      "value": " y el triple iguales (===) implementa el algoritmo llamado "
                    },
                    {
                      "type": "link",
                      "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality",
                      "children": [
                        {
                          "value": "Strict Equality Comparison",
                          "emphasis": true
                        }
                      ]
                    },
                    {
                      "value": "."
                    }
                  ]
                }
              ]
            },
            {
              "type": "statement",
              "id": "HK5-sXB5",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "value": "Si leemos los pasos que ejecuta el primer algoritmo (\"Abstract Equality Comparison\") podemos desmantelar el mito anterior, ya que "
                    },
                    {
                      "value": "lo primero que hace",
                      "strong": true
                    },
                    {
                      "value": " ("
                    },
                    {
                      "value": "Abstract Equality Comparison",
                      "emphasis": true
                    },
                    {
                      "value": ") "
                    },
                    {
                      "value": "es verificar los tipos de los operandos",
                      "strong": true
                    },
                    {
                      "value": ", y lo que es aún más interesante, "
                    },
                    {
                      "value": "si el tipo de ambos operandos es igual, == devuelve el resultado de la comparación con Triple Iguales ",
                      "strong": true
                    },
                    {
                      "value": "😅🤯."
                    }
                  ]
                }
              ]
            },
            {
              "type": "statement",
              "id": "zeWCTb-P",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "value": "Listado de los pasos que sigue el algoritmo \"Abstract Equality Comparison\". Enmarcado en rojo está el primer paso que comenta la ejecución de === si los tipos de ambos valores son iguales. La fuente de esta documentación la encuentras "
                    },
                    {
                      "type": "link",
                      "url": "https://262.ecma-international.org/12.0/#sec-abstract-equality-comparison",
                      "children": [
                        {
                          "value": "aquí"
                        }
                      ]
                    },
                    {
                      "value": "."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "id": "i3s941rg",
      "children": [
        {
          "type": "staticParagraph",
          "children": [
            {
              "value": "Pero si esa no es la diferencia, ¿Cuál es?"
            }
          ]
        },
        {
          "type": "group",
          "children": [
            {
              "type": "statement",
              "id": "PH_FwDJa",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "value": "Para ser más concreto en la diferencia entre ambos algoritmos o operaciones, podemos decir que el doble igual (==) permite la coerción de tipos y el triple igual (===) no lo permite."
                    }
                  ]
                }
              ]
            },
            {
              "type": "statement",
              "id": "izEB7pYU",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "value": "La \"comparación estricta\" lo primero que hace es comparar los tipos de los operandos, y si no son iguales, directamente devuelve false sin importar nada más (puedes comprobarlo aquí). Resumiendo, ambas operaciones verifican los tipos de los operandos a comparar, la diferencia es lo que hacen cuando los tipos son distintos."
                    }
                  ]
                }
              ]
            },
            {
              "type": "statement",
              "id": "-CYzfr6R",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "value": "Una pregunta que te puedes hacer para ayudarte a determinar cuál de los dos usar es: ¿Cuándo compare dos valores, quiero permitir coerción o no? 🤔"
                    }
                  ]
                }
              ]
            },
            {
              "type": "statement",
              "id": "-6OArMLB",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "value": "Ahora bien, es verdad que Coerción es un pilar fundamental en JavaScript, pero esto no quiere decir que permitir cualquier tipo de coerción tenga sentido. Aquí es donde tenemos que procurar conocer lo más que podamos los tipos que estamos comparando. Luego veremos algunos casos en donde deberíamos evitar la coerción de tipos."
                    }
                  ]
                }
              ]
            },
            {
              "type": "statement",
              "id": "dvDVdcQA",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "value": "En pro de respetar tu tiempo y asumir que ya estás convencida/convencido que la coerción no es algo malo en JavaScript, vayamos más al grano y definamos una serie de reglas que te pueden ayudar a usa == sin que te sientas mal:"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "id": "ZbJd047Z",
      "children": [
        {
          "type": "staticParagraph",
          "children": [
            {
              "value": "Reglas para usar == correctamente"
            }
          ]
        },
        {
          "type": "group",
          "children": [
            {
              "type": "heading",
              "id": "wihSQdCe",
              "children": [
                {
                  "type": "staticParagraph",
                  "children": [
                    {
                      "value": "Si los tipos son iguales, == se comporta como ==="
                    }
                  ]
                },
                {
                  "type": "group",
                  "children": [
                    {
                      "type": "statement",
                      "id": "eo_EN1yj",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "Como mencionamos arriba, cuando comparamos dos valores del mismo tipo, el resultado de == y === será siempre igual, básicamente porque el algoritmo de comparación abstracta lo define."
                            }
                          ]
                        },
                        {
                          "type": "group",
                          "children": [
                            {
                              "type": "code",
                              "id": "eO9SIRNp",
                              "children": [
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "2 == 2 // true\n"
                                    },
                                    {
                                      "value": "2 === 2 // true\n"
                                    },
                                    {
                                      "value": "\"42\" == String(42) // true\n"
                                    },
                                    {
                                      "value": "\"42\" === String(42) // true\n"
                                    },
                                    {
                                      "value": "6 == 2 + 3 // false\n"
                                    },
                                    {
                                      "value": "6 === 2 + 3 // false"
                                    }
                                  ]
                                }
                              ],
                              "lang": "javascript",
                              "data": {}
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading",
              "id": "Zr-IWDaL",
              "children": [
                {
                  "type": "staticParagraph",
                  "children": [
                    {
                      "value": "null o undefined se tratan como iguales"
                    }
                  ]
                },
                {
                  "type": "group",
                  "children": [
                    {
                      "type": "statement",
                      "id": "p1oky_IH",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "Veamos un ejemplo:"
                            }
                          ]
                        },
                        {
                          "type": "group",
                          "children": [
                            {
                              "type": "code",
                              "id": "cfX5unng",
                              "children": [
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "var persona1 = { name: 'Horacio' }"
                                    }
                                  ]
                                },
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "var persona2 = {}"
                                    }
                                  ]
                                },
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "function tienenElMismoNombre(persona1, persona2) {"
                                    }
                                  ]
                                },
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "    if ("
                                    }
                                  ]
                                },
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "        (persona1.name !== null || persona1.name !== undefined) &&"
                                    }
                                  ]
                                },
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "        (persona2.name !== null || persona2.name !== undefined)"
                                    }
                                  ]
                                },
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "    ) {"
                                    }
                                  ]
                                },
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "        return persona1.name === persona2.name"
                                    }
                                  ]
                                },
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "    }"
                                    }
                                  ]
                                },
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "    return false"
                                    }
                                  ]
                                },
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "}"
                                    }
                                  ]
                                }
                              ],
                              "lang": "javascript",
                              "data": {}
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "statement",
                      "id": "95j0V1Bd",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "En este ejemplo vemos que estamos usando el === para comparar que ninguno de ambos valores (persona1.name y persona2.name) son valores que están definidos en los objetos que estamos pasando. Como ya aprendimos, no estamos permitiendo ningún tipo de coerción en esta comparación. Te puedo asegurar que la comparación explícita de ambos tipos (null y undefined) no es muy práctica, ya que entre si la variable no tiene valor o nunca fue declarada, no hay una distinción contundente para que la comparación explicita tenga sentido o sea necesaria."
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "statement",
                      "id": "ELgaRJaa",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "Ahora comparemos con la versión que sí permite coerción:"
                            }
                          ]
                        },
                        {
                          "type": "group",
                          "children": [
                            {
                              "type": "code",
                              "id": "1zD2kYZO",
                              "children": [
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "var persona1 = { name: 'Horacio' }"
                                    }
                                  ]
                                },
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "var persona2 = {}"
                                    }
                                  ]
                                },
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "function tienenElMismoNombre(persona1, persona2) {"
                                    }
                                  ]
                                },
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "    if (persona1.name != null && persona2.name != null) {"
                                    }
                                  ]
                                },
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "        return persona1.name == persona2.name"
                                    }
                                  ]
                                },
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "    }"
                                    }
                                  ]
                                },
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "    return false"
                                    }
                                  ]
                                },
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "}"
                                    },
                                    {
                                      "value": ""
                                    }
                                  ]
                                }
                              ],
                              "lang": "javascript",
                              "data": {}
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "statement",
                      "id": "LwtgmW-Q",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "¿Cuál crees que es más legible? Creo que es evidente que la segunda, además de ser más pequeña, expresa un entendimiento más claro sobre cómo JavaScript trata a los tipos null y undefined. Y si esto no es tan obvio para todas las personas de tu equipo, siempre puedes agregar una línea de comentario:"
                            }
                          ]
                        },
                        {
                          "type": "group",
                          "children": [
                            {
                              "type": "code",
                              "id": "AvHi5-Fm",
                              "children": [
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "var persona1 = { name: 'Horacio' }"
                                    }
                                  ]
                                },
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "var persona2 = {}"
                                    }
                                  ]
                                },
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "function tienenElMismoNombre(persona1, persona2) {"
                                    }
                                  ]
                                },
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "    // `null` y `undefined` son coercitivamente iguales: mirar los pasos 2 y 3 en el algoritmo: https://262.ecma-international.org/12.0/#sec-abstract-equality-comparison"
                                    }
                                  ]
                                },
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "    if (persona1.name != null && persona2.name != null) {"
                                    }
                                  ]
                                },
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "        return persona1.name == persona2.name"
                                    }
                                  ]
                                },
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "    }"
                                    }
                                  ]
                                },
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "    return false"
                                    }
                                  ]
                                },
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "}"
                                    },
                                    {
                                      "value": ""
                                    }
                                  ]
                                }
                              ],
                              "lang": "javascript",
                              "data": {}
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "statement",
                      "id": "01Url-GN",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "Este uso de != es el menos controversial de todos y el más aceptado. Y si has usado la primera versión, no te sientas mal, porque bibliotecas de JavaScript que son descargadas millones de veces a la semana "
                            },
                            {
                              "type": "link",
                              "url": "https://github.com/syntax-tree/unist-util-is/blob/main/index.js#L114-L115",
                              "children": [
                                {
                                  "value": "lo siguen usando"
                                }
                              ]
                            },
                            {
                              "value": " 😅"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "statement",
                      "id": "eMkJ7cNE",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "Otro caso en el que puedes usar tranquilamente == es cuando usas el operador typeof:"
                            }
                          ]
                        },
                        {
                          "type": "group",
                          "children": [
                            {
                              "type": "code",
                              "id": "u3yDAiaG",
                              "children": [
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "typeof \"Igualdad\" == 'string' // true"
                                    }
                                  ]
                                },
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "typeof 42 == 'number' // true"
                                    }
                                  ]
                                },
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "typeof true == 'boolean' // true"
                                    }
                                  ]
                                }
                              ],
                              "lang": "javascript",
                              "data": {}
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "statement",
                      "id": "ds8NgbmY",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "El operador typeof SIEMPRE va a devolver un valor de tipo String, así que puedes usar tranquilamente los == en estos casos porque la coerción de tipos nunca pasará."
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading",
              "id": "XQ7PyFcm",
              "children": [
                {
                  "type": "staticParagraph",
                  "children": [
                    {
                      "value": "Prefiere hacer coerción a números"
                    }
                  ]
                },
                {
                  "type": "group",
                  "children": [
                    {
                      "type": "statement",
                      "id": "RT-8qMGO",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "Si vemos los puntos del 4 al 7 en el algoritmo de ==, podemos ver que prefiere convertir los valores a números siempre y cuando estemos hablando de valores de tipo String, Boolean o Number."
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "statement",
                      "id": "y3Uuc-qf",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "Un ejemplo claro en el que nos podemos aprovechar de esta preferencia es cuando trabajamos con datos que vienen de una API o de un campo de formulario (incluso cuando el campo es de tipo \"number\" el valor que te devuelve será de tipo \"string\"). ¡Felicidades! 🎉 Sólo con saber esto, ya sabes más sobre igualdad que el 99% de los programadores de JavaScript que no nos leemos la especificación 😅"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading",
              "id": "RY2g9NRe",
              "children": [
                {
                  "type": "staticParagraph",
                  "children": [
                    {
                      "value": "Si comparamos un valor que no es de tipo primitivo, ToPrimitive"
                    }
                  ]
                },
                {
                  "type": "group",
                  "children": [
                    {
                      "type": "statement",
                      "id": "__orBlph",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "Cuando digo valores \"no primitivos\" me refiero a Objetos. Veamos un ejemplo que puede que lo hayas visto antes, ya que es muy famoso gracias al video "
                            },
                            {
                              "type": "link",
                              "url": "https://www.destroyallsoftware.com/talks/wat",
                              "children": [
                                {
                                  "value": "WAT"
                                }
                              ]
                            },
                            {
                              "value": ""
                            }
                          ]
                        },
                        {
                          "type": "group",
                          "children": [
                            {
                              "type": "code",
                              "id": "vhN8Rni8",
                              "children": [
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": ""
                                    },
                                    {
                                      "type": "link",
                                      "url": "https://www.destroyallsoftware.com/talks/wat",
                                      "children": [
                                        {
                                          "value": ""
                                        }
                                      ]
                                    },
                                    {
                                      "value": ""
                                    },
                                    {
                                      "type": "link",
                                      "url": "https://www.destroyallsoftware.com/talks/wat",
                                      "children": [
                                        {
                                          "value": ""
                                        }
                                      ]
                                    },
                                    {
                                      "value": "[] == ![] // => true 🤔"
                                    }
                                  ]
                                }
                              ],
                              "lang": "javascript",
                              "data": {}
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "statement",
                      "id": "H_pIWKpE",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "Personalmente creo que este es uno de los casos que trae más confusión. pero si nos ponemos a pensar, en qué circunstancia comparar un valor con su negación tiene algún sentido? esto (¡espero!) no debe pasar en ningún programa, ¡nunca!"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "statement",
                      "id": "5b6LBPAi",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "El resultado de hacer este tipo de comparaciones es percibir la coerción como un error o mal diseñada simplemente porque este caso completamente sin lógica alguna tiene un resultado incoherente. De todas formas, veamos lo que realmente está pasando para que entendamos porque el resultado es el que es:"
                            }
                          ]
                        },
                        {
                          "type": "group",
                          "children": [
                            {
                              "type": "code",
                              "id": "gHWpcQAM",
                              "children": [
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "var arr1 = []"
                                    }
                                  ]
                                },
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "var arr2 = []"
                                    }
                                  ]
                                },
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "arr1 == !arr2"
                                    }
                                  ]
                                },
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "arr1 == false // convertimos arr2 a boolean (true) y lo negamos (false)"
                                    }
                                  ]
                                },
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "\"\" == false // convertimos arr1 a primitivo usando ToPrimitive"
                                    }
                                  ]
                                },
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "0 == false // el algoritmo prefiere numeros, asi que convertimos \"\" a 0"
                                    }
                                  ]
                                },
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "0 === 0 // el resultado de ToNumber(false) es 0. ahora ambos tienen el mismo valor, asi que devolvemos el valos de la comparacion estricta."
                                    },
                                    {
                                      "value": ""
                                    },
                                    {
                                      "value": ""
                                    }
                                  ]
                                }
                              ],
                              "lang": "javascript",
                              "data": {}
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "statement",
                      "id": "NA8FTz0g",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "Está claro que el resultado no es el esperado, pero estamos hablando de una comparación completamente ilógica, así que no me parece que sea un argumento válido en contra de permitir la coerción en nuestros programas. Creo que este es uno de los casos en los que puedes preferir el uso del ===, porque ya vemos que al comparar valores no primitivos con valores primitivos podemos tener resultados poco esperados."
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "id": "ESU0yoVx",
      "children": [
        {
          "type": "staticParagraph",
          "children": [
            {
              "value": "¿Cuándo debemos evitar ==?"
            }
          ]
        },
        {
          "type": "group",
          "children": [
            {
              "type": "statement",
              "id": "-ttOKecf",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "value": "En la última regla te puedes dar cuenta que no siempre es favorable usar ==. Hay algunos casos en los que te recomiendo no usarlo:"
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading",
              "id": "rYutz7yg",
              "children": [
                {
                  "type": "staticParagraph",
                  "children": [
                    {
                      "value": "Cuando uno de los valores es 0, \"\" o \" \""
                    }
                  ]
                },
                {
                  "type": "group",
                  "children": [
                    {
                      "type": "statement",
                      "id": "RORUZ93D",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "Si uno de los valores que vas a comparar puede llegar a ser cero (0), una cadena de caracteres vacía (\"\") o una cadena con espacios (\" \") el resultado puede ser impredecible y poco recomendable. Hay demasiados casos especiales cuando uno de los valores que comparamos son estos, que es mejor evitarlo en estos casos."
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading",
              "id": "jehx13d9",
              "children": [
                {
                  "type": "staticParagraph",
                  "children": [
                    {
                      "value": "Cuando comparamos objetos (no primitivos)"
                    }
                  ]
                },
                {
                  "type": "group",
                  "children": [
                    {
                      "type": "statement",
                      "id": "XeQ3JzE0",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "Incluso cuando ambas comparaciones funcionan igual con objetos, usar == con objetos me parece que es más riesgoso y puede llegar a convertirse en un problema, por eso es mejor evitarlo cuando sabemos que estamos tratando con cualquier tipo de objetos"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading",
              "id": "Dqon0-0I",
              "children": [
                {
                  "type": "staticParagraph",
                  "children": [
                    {
                      "value": "Comparando con true o false"
                    }
                  ]
                },
                {
                  "type": "group",
                  "children": [
                    {
                      "type": "statement",
                      "id": "iFiaU0Rc",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "Si analizamos la comparación y ahora después de saber que coerción solo ocurre cuando ambos valores son de tipos distintos, te puedes dar cuenta que comparar directamente cualquier valor a true o false tiene menos utilidad que simplemente comparar si un valor es \"truthy\" o \"falsy\""
                            }
                          ]
                        },
                        {
                          "type": "group",
                          "children": [
                            {
                              "type": "code",
                              "id": "0fgAkj1q",
                              "children": [
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "var persona = []"
                                    }
                                  ]
                                },
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "persona == true // false 🤔"
                                    }
                                  ]
                                },
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "persona == false /"
                                    },
                                    {
                                      "value": ""
                                    }
                                  ]
                                }
                              ],
                              "lang": "javascript",
                              "data": {}
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "statement",
                      "id": "hC0-Oy2l",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "y esto es lo que está pasando en este caso:"
                            }
                          ]
                        },
                        {
                          "type": "group",
                          "children": [
                            {
                              "type": "code",
                              "id": "L2aSo-hF",
                              "children": [
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "var persona = []"
                                    }
                                  ]
                                },
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "persona == true"
                                    }
                                  ]
                                },
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "\"\" == true // convertimos `persona` a un primitivo (\"\")"
                                    }
                                  ]
                                },
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "0 === 1 // convertimos ambos a números, ya son del mismo tipo, invocamos ==="
                                    }
                                  ]
                                },
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "false"
                                    }
                                  ]
                                },
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "persona == false"
                                    }
                                  ]
                                },
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "\"\" == false // convertimos `persona` a un primitivo (\"\")"
                                    }
                                  ]
                                },
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "0 === 0 // convertimos ambos a números, ya son del mismo tipo, invocamos ==="
                                    }
                                  ]
                                },
                                {
                                  "type": "paragraph",
                                  "children": [
                                    {
                                      "value": "true"
                                    },
                                    {
                                      "value": ""
                                    }
                                  ]
                                }
                              ],
                              "lang": "javascript",
                              "data": {}
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "statement",
              "id": "h4CSJVO9",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "value": "Recuerda que == permite la coerción siempre que ambos valores no sean del mismo tipo. Si son del mismo tipo, el resultado es igual a si usas ===. Personalmente creo que esta manera de interpretar la coerción y entender lo que realmente pasa cuando comparamos objetos es sencilla para que cualquier desarrollador de cualquier nivel pueda entenderla. O si quieres todavía un resumen en una frase: "
                    },
                    {
                      "value": "Utiliza == para permitir la coerción entre tipos primitivos y no entre objetos",
                      "strong": true
                    },
                    {
                      "value": "."
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "id": "PeShKcaa",
      "children": [
        {
          "type": "staticParagraph",
          "children": [
            {
              "value": "Desafió"
            }
          ]
        },
        {
          "type": "group",
          "children": [
            {
              "type": "statement",
              "id": "KtZW7chZ",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "value": "Ahora que ya hemos visto todo lo que necesitamos saber sobre igualdad y coerción, ¡pongámoslo en práctica!"
                    }
                  ]
                }
              ]
            },
            {
              "type": "statement",
              "id": "VbIoYyfG",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "value": "Miremos el siguiente código, el resultado en la consola debería ser true para todos los casos:"
                    }
                  ]
                },
                {
                  "type": "group",
                  "children": [
                    {
                      "type": "code",
                      "id": "sGQRVdqt",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "function sum(a, b) {"
                            }
                          ]
                        },
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "    return a + b"
                            }
                          ]
                        },
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "}"
                            }
                          ]
                        },
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "console.log(sum(2, 1) === 3)"
                            }
                          ]
                        },
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "console.log(sum(\"2\", 1) === 3)"
                            }
                          ]
                        },
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "console.log(sum(2, \"1\") === 3)"
                            }
                          ]
                        },
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "console.log(sum(\"2\", \"1\") === 3)"
                            }
                          ]
                        },
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "console.log(sum(null, 1) === 'invalid')"
                            }
                          ]
                        },
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "console.log(sum(2) === 'invalid')"
                            }
                          ]
                        },
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "console.log(sum(\"2\", []) == 'invalid')"
                            }
                          ]
                        },
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "console.log(sum([], {}) == 'invalid')"
                            },
                            {
                              "value": ""
                            }
                          ]
                        }
                      ],
                      "lang": "javascript",
                      "data": {}
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "id": "Dxnjo_eV",
      "children": [
        {
          "type": "staticParagraph",
          "children": [
            {
              "value": "Crédito extra"
            }
          ]
        },
        {
          "type": "group",
          "children": [
            {
              "type": "statement",
              "id": "Y5TXN7nR",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "value": "Refactoriza la función para que puedas contemplar el siguiente \"caso extraño\" también devuelva true:"
                    }
                  ]
                },
                {
                  "type": "group",
                  "children": [
                    {
                      "type": "code",
                      "id": "3s2LY7Yy",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "console.log(sum(2, NaN) == 'invalid')"
                            }
                          ]
                        }
                      ],
                      "lang": "javascript",
                      "data": {}
                    }
                  ]
                }
              ]
            },
            {
              "type": "statement",
              "id": "v4wrgMix",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "value": "¡La respuesta está al final del post!"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "id": "blDW-LjW",
      "children": [
        {
          "type": "staticParagraph",
          "children": [
            {
              "value": "Conclusión"
            }
          ]
        },
        {
          "type": "group",
          "children": [
            {
              "type": "statement",
              "id": "vvHG-kbJ",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "value": "Antes de cerrar, quiero hacer unas aclaraciones finales para poder cerrar el caso de si usar == es peor o menos recomendable que ===."
                    }
                  ]
                }
              ]
            },
            {
              "type": "statement",
              "id": "4ytNiSBK",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "value": "Creo que llevamos ya muchos años adoptando unas prácticas que espero te haya demostrado no son del todo correctas:"
                    }
                  ]
                },
                {
                  "type": "unorderedList",
                  "children": [
                    {
                      "type": "statement",
                      "id": "vUN24MK3",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "Recuerda que == permite la coerción siempre que ambos valores no sean del mismo tipo. Si son del mismo tipo, el resultado es igual a si usas ===."
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "statement",
                      "id": "2qHJ-Ksf",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "Conocer con los tipos de variables con los que trabajas es mejor que no saber los tipos."
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "statement",
                      "id": "IYWn6Fcy",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "El tipado estático no es la única forma de saber los tipos de una variable."
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "statement",
                      "id": "tBhPfhqt",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "Usar == no se trata de hacer comparaciones sin conocer los tipos, en realidad es el caso contrario. Se trata de comparar valores cuando sabemos los tipos y opcionalmente permitir coerción si lo vemos necesario"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "statement",
                      "id": "TZMYl--J",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "=== es innecesario cuando los tipos de los valores que estamos comparando son iguales"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "statement",
                      "id": "66y8sQAg",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "Cuando sabes los tipos de datos",
                              "strong": true
                            },
                            {
                              "value": ", == siempre será la solución más correcta. Si no sabes los tipos, quizás tengas que reestructurar el código para que sean más obvios, puede ser indicativo que no entiendes muy bien lo que tu programa debe hacer."
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "id": "7hGcnQui",
      "children": [
        {
          "type": "staticParagraph",
          "children": [
            {
              "value": "Notas y Referencias"
            }
          ]
        },
        {
          "type": "group",
          "children": [
            {
              "type": "statement",
              "id": "-gsSPsy8",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "value": "No puedo recomendar más el curso de "
                    },
                    {
                      "type": "link",
                      "url": "https://github.com/getify",
                      "children": [
                        {
                          "value": "Kyle Simpson"
                        }
                      ]
                    },
                    {
                      "value": " sobre \""
                    },
                    {
                      "type": "link",
                      "url": "https://frontendmasters.com/courses/deep-javascript-v3",
                      "children": [
                        {
                          "value": "Deep JavaScript Foundations"
                        }
                      ]
                    },
                    {
                      "value": "\" que está disponible en FrontendMasters. Si no te lo puedes permitir, te recomiendo ver sus libros que son totalmente "
                    },
                    {
                      "type": "link",
                      "url": "https://github.com/getify/You-Dont-Know-JS",
                      "children": [
                        {
                          "value": "GRATIS",
                          "strong": true
                        }
                      ]
                    },
                    {
                      "value": " en github (está trabajando en la segunda versión, esto no invalida la primer versión que es de donde saqué la mayoría de información). El capítulo sobre coerción es "
                    },
                    {
                      "type": "link",
                      "url": "https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/types",
                      "children": [
                        {
                          "value": "ORO PURO",
                          "strong": true
                        }
                      ]
                    },
                    {
                      "value": "."
                    }
                  ]
                }
              ]
            },
            {
              "type": "statement",
              "id": "MWc2ERfw",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "value": "He aprendido muchísimo con estas fuentes, no solo por el contenido, sino a también ser más crítico y confirmar las fuentes donde consumo información. Ahora cada vez que escucho alguno de los \"gurus de JavaScript\" presto mucha más atención a lo que dicen y me doy cuenta si de verdad entienden lo que están haciendo o no 😉"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "id": "3x_cLKSj",
      "children": [
        {
          "type": "staticParagraph",
          "children": [
            {
              "value": "Respuesta al Desafió"
            }
          ]
        },
        {
          "type": "group",
          "children": [
            {
              "type": "statement",
              "id": "utohNi1c",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "value": "¡Aquí tienes una manera de solucionar el desafío!"
                    }
                  ]
                }
              ]
            },
            {
              "type": "statement",
              "id": "JwT1dNxk",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "value": "¡Escríbeme tu respuesta vía "
                    },
                    {
                      "type": "link",
                      "url": "https://twitter.com/hhg2288",
                      "children": [
                        {
                          "value": "twitter"
                        }
                      ]
                    },
                    {
                      "value": "!"
                    }
                  ]
                }
              ]
            },
            {
              "type": "statement",
              "id": "HbCfhc5K",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "value": "¡Seguro alguno de ustedes consigue solucionarlo de una mejor manera!"
                    }
                  ]
                },
                {
                  "type": "group",
                  "children": [
                    {
                      "type": "code",
                      "id": "8VRlD55x",
                      "children": [
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "function sum(a, b) {"
                            }
                          ]
                        },
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "    // si ambos valores son o `number` o `string`"
                            }
                          ]
                        },
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "  if ((typeof a == 'string' || typeof a == 'number') && "
                            }
                          ]
                        },
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "      (typeof b == 'string' || typeof b == 'number')) {"
                            }
                          ]
                        },
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "            // verificar el caso especial de si uno de los valores es `NaN`, porque `typeof NaN == \"number\"`  "
                            }
                          ]
                        },
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "      if (Object.is(a, NaN) || Object.is(b, NaN)) {"
                            }
                          ]
                        },
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "        return 'invalid'      "
                            }
                          ]
                        },
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "      }"
                            }
                          ]
                        },
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "      return Number(a) + Number(b)"
                            }
                          ]
                        },
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "  }"
                            }
                          ]
                        },
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "  return 'invalid'  "
                            }
                          ]
                        },
                        {
                          "type": "paragraph",
                          "children": [
                            {
                              "value": "}"
                            },
                            {
                              "value": ""
                            }
                          ]
                        }
                      ],
                      "lang": "javascript",
                      "data": {}
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "statement",
      "id": "oIY9iIjn",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "value": "El objetivo de este artículo es cambiar tu percepción e interpretación sobre lo que muchos le llaman \"lo malo de JavaScript\". Describiremos en detalle qué ocurre cuando comparamos valores para ayudarte a escribir programas que tengan menos errores y sean más legibles. Aprender sobre igualdad cambió como escribo mi código y me dio más confianza en lo que hago."
            }
          ]
        }
      ]
    },
    {
      "type": "statement",
      "id": "8sqI5Myq",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "value": "¡Espero que para ti tenga un resultado similar!",
              "strong": true
            }
          ]
        }
      ]
    }
  ]
}
