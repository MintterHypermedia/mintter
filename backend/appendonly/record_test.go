package appendonly

import (
	"encoding/base64"
	"testing"
	"time"

	crypto "github.com/libp2p/go-libp2p-crypto"
	"github.com/stretchr/testify/require"
)

func TestRecordSign(t *testing.T) {
	want := struct {
		Signature []byte
		Hash      string
	}{
		Signature: []byte{0x73, 0x76, 0xeb, 0xc8, 0xc0, 0x3c, 0xf0, 0x62, 0x9, 0x3a, 0x4b, 0xc8, 0xf5, 0x7b, 0xd9, 0xab, 0x60, 0x76, 0x89, 0x56, 0x7f, 0xe4, 0x5a, 0x33, 0xe3, 0xbd, 0x58, 0xf5, 0xe7, 0x43, 0x6d, 0xe6, 0x8f, 0xca, 0x26, 0xa9, 0x41, 0x5f, 0xdf, 0x21, 0x8, 0x41, 0x3a, 0x1f, 0xdc, 0x4f, 0xa0, 0x7e, 0xdc, 0x8e, 0x4a, 0xf3, 0xc0, 0xa7, 0xa7, 0x7a, 0x83, 0x35, 0xc4, 0x9, 0x97, 0x7e, 0xc6, 0x93, 0x96, 0xc8, 0x30, 0x93, 0xf0, 0x5a, 0x9f, 0x86, 0x47, 0xb, 0xc5, 0x6f, 0x94, 0xc6, 0x8c, 0xa6, 0xf3, 0x7e, 0x5b, 0x37, 0x72, 0x3, 0x1e, 0x8d, 0xe8, 0xe6, 0xef, 0x16, 0xc3, 0x94, 0x0, 0xe2, 0xc0, 0x54, 0x16, 0x78, 0x78, 0xb9, 0xd3, 0xe3, 0xf8, 0xac, 0xcb, 0xad, 0xf, 0x5d, 0xf5, 0x8d, 0xb4, 0xf1, 0x65, 0xaf, 0x6e, 0xb4, 0xd3, 0xd, 0x99, 0x31, 0xd6, 0x4c, 0x56, 0x6, 0x35, 0xff, 0x81, 0x2d, 0x2d, 0xa2, 0xa, 0x55, 0x15, 0xb0, 0xab, 0x5c, 0x5f, 0xfb, 0x94, 0x3b, 0x89, 0x12, 0x8c, 0xec, 0xbf, 0x30, 0x1b, 0xd0, 0x18, 0x8e, 0x95, 0x25, 0xb, 0x6d, 0xbf, 0xc5, 0x2c, 0x7d, 0xba, 0xf0, 0xd4, 0x5, 0x7f, 0xf, 0x6e, 0x69, 0x9, 0x44, 0x60, 0xfd, 0xba, 0x14, 0xec, 0xda, 0xce, 0x5d, 0xc5, 0xdb, 0xd7, 0x12, 0xff, 0x85, 0x54, 0x8f, 0x48, 0xaf, 0x3b, 0xbf, 0x33, 0xa6, 0xfe, 0xe8, 0x67, 0x72, 0x18, 0x22, 0x7e, 0x87, 0xa9, 0xb2, 0x2a, 0x94, 0xea, 0x56, 0xd, 0x91, 0xb2, 0xa8, 0x34, 0xa3, 0xec, 0xd6, 0xe9, 0x53, 0x23, 0x76, 0xb1, 0xf0, 0x46, 0x94, 0xec, 0xf2, 0x15, 0x58, 0x33, 0x8f, 0x36, 0x67, 0x84, 0x51, 0x43, 0x58, 0x3, 0x7c, 0xba, 0x3a, 0x69, 0x70, 0xaf, 0x71, 0xf2, 0xd, 0x7f, 0x7c, 0x89, 0x39, 0xef, 0x55, 0x99, 0x75, 0xc0, 0xe7, 0xca, 0xe1},
		Hash:      "12201ed13a5b8b18e78dad9985a75090c6dc8a56c2b218befff8cc6de06ff7972796",
	}

	rec := Record{
		Author:        "author",
		MultihashCode: defaultMultihashCode,
		Previous:      "",
		AppendTime:    time.Date(2020, 1, 1, 0, 0, 0, 0, time.UTC),
	}

	key := testPrivKey(t)

	signed, err := rec.Sign(key)
	require.NoError(t, err)

	require.Equal(t, want.Signature, signed.Signature, "signature doesn't match")
	require.Equal(t, want.Hash, signed.Hash(), "signed record must have hash")
	err = signed.Verify(key.GetPublic())
	require.NoError(t, err, "signature verification failed")

	// === Test Marshaling ===

	raw, err := signed.Marshal()
	require.NoError(t, err)

	var read SignedRecord
	err = read.Unmarshal(raw)
	require.NoError(t, err)

	require.Equal(t, want.Signature, read.Signature, "read signature doesn't match")
	require.Equal(t, want.Hash, read.Hash(), "read hash doesn't match")
	err = read.Verify(key.GetPublic())
	require.NoError(t, err, "read signature verification failed")
}

func testPrivKey(t *testing.T) crypto.PrivKey {
	t.Helper()
	testPk := `CAASpgkwggSiAgEAAoIBAQC/7Q7fILQ8hc9g07a4HAiDKE4FahzL2eO8OlB1K99Ad4L1zc2dCg+gDVuGwdbOC29IngMA7O3UXijycckOSChgFyW3PafXoBF8Zg9MRBDIBo0lXRhW4TrVytm4Etzp4pQMyTeRYyWR8e2hGXeHArXM1R/A/SjzZUbjJYHhgvEE4OZy7WpcYcW6K3qqBGOU5GDMPuCcJWac2NgXzw6JeNsZuTimfVCJHupqG/dLPMnBOypR22dO7yJIaQ3d0PFLxiDG84X9YupF914RzJlopfdcuipI+6gFAgBw3vi6gbECEzcohjKf/4nqBOEvCDD6SXfl5F/MxoHurbGBYB2CJp+FAgMBAAECggEAaVOxe6Y5A5XzrxHBDtzjlwcBels3nm/fWScvjH4dMQXlavwcwPgKhy2NczDhr4X69oEw6Msd4hQiqJrlWd8juUg6vIsrl1wS/JAOCS65fuyJfV3Pw64rWbTPMwO3FOvxj+rFghZFQgjg/i45uHA2UUkM+h504M5Nzs6Arr/rgV7uPGR5e5OBw3lfiS9ZaA7QZiOq7sMy1L0qD49YO1ojqWu3b7UaMaBQx1Dty7b5IVOSYG+Y3U/dLjhTj4Hg1VtCHWRm3nMOE9cVpMJRhRzKhkq6gnZmni8obz2BBDF02X34oQLcHC/Wn8F3E8RiBjZDI66g+iZeCCUXvYz0vxWAQQKBgQDEJu6flyHPvyBPAC4EOxZAw0zh6SF/r8VgjbKO3n/8d+kZJeVmYnbsLodIEEyXQnr35o2CLqhCvR2kstsRSfRz79nMIt6aPWuwYkXNHQGE8rnCxxyJmxV4S63GczLk7SIn4KmqPlCI08AU0TXJS3zwh7O6e6kBljjPt1mnMgvr3QKBgQD6fAkdI0FRZSXwzygx4uSg47Co6X6ESZ9FDf6ph63lvSK5/eue/ugX6p/olMYq5CHXbLpgM4EJYdRfrH6pwqtBwUJhlh1xI6C48nonnw+oh8YPlFCDLxNG4tq6JVo071qH6CFXCIank3ThZeW5a3ZSe5pBZ8h4bUZ9H8pJL4C7yQKBgFb8SN/+/qCJSoOeOcnohhLMSSD56MAeK7KIxAF1jF5isr1TP+rqiYBtldKQX9bIRY3/8QslM7r88NNj+aAuIrjzSausXvkZedMrkXbHgS/7EAPflrkzTA8fyH10AsLgoj/68mKr5bz34nuY13hgAJUOKNbvFeC9RI5g6eIqYH0FAoGAVqFTXZp12rrK1nAvDKHWRLa6wJCQyxvTU8S1UNi2EgDJ492oAgNTLgJdb8kUiH0CH0lhZCgr9py5IKW94OSM6l72oF2UrS6PRafHC7D9b2IV5Al9lwFO/3MyBrMocapeeyaTcVBnkclz4Qim3OwHrhtFjF1ifhP9DwVRpuIg+dECgYANwlHxLe//tr6BM31PUUrOxP5Y/cj+ydxqM/z6papZFkK6Mvi/vMQQNQkh95GH9zqyC5Z/yLxur4ry1eNYty/9FnuZRAkEmlUSZ/DobhU0Pmj8Hep6JsTuMutref6vCk2n02jc9qYmJuD7iXkdXDSawbEG6f5C4MUkJ38z1t1OjA==`
	data, err := base64.StdEncoding.DecodeString(testPk)
	require.NoError(t, err)

	pk, err := crypto.UnmarshalPrivateKey(data)
	require.NoError(t, err)

	return pk
}
