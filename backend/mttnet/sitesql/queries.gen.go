// Code generated by sqlitegen. DO NOT EDIT.

package sitesql

import (
	"errors"
	"fmt"

	"crawshaw.io/sqlite"
	"mintter/backend/db/sqlitegen"
)

var _ = errors.New

func AddSite(conn *sqlite.Conn, publicKeysPrincipal []byte, sitesAddresses string, sitesHostname string, sitesRole int64) error {
	const query = `INSERT OR REPLACE INTO sites (account_id, addresses, hostname, role)
VALUES ((SELECT public_keys.id FROM public_keys WHERE public_keys.principal = :publicKeysPrincipal), :sitesAddresses, :sitesHostname, :sitesRole)`

	before := func(stmt *sqlite.Stmt) {
		stmt.SetBytes(":publicKeysPrincipal", publicKeysPrincipal)
		stmt.SetText(":sitesAddresses", sitesAddresses)
		stmt.SetText(":sitesHostname", sitesHostname)
		stmt.SetInt64(":sitesRole", sitesRole)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: AddSite: %w", err)
	}

	return err
}

func RemoveSite(conn *sqlite.Conn, sitesHostname string) error {
	const query = `DELETE FROM sites WHERE sites.hostname = :sitesHostname`

	before := func(stmt *sqlite.Stmt) {
		stmt.SetText(":sitesHostname", sitesHostname)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: RemoveSite: %w", err)
	}

	return err
}

type GetSiteResult struct {
	SitesAddresses      string
	SitesHostname       string
	SitesRole           int64
	PublicKeysPrincipal []byte
}

func GetSite(conn *sqlite.Conn, sitesHostname string) (GetSiteResult, error) {
	const query = `SELECT sites.addresses, sites.hostname, sites.role, public_keys.principal
FROM sites
JOIN public_keys ON public_keys.id = sites.account_id
WHERE sites.hostname = :sitesHostname`

	var out GetSiteResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetText(":sitesHostname", sitesHostname)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("GetSite: more than one result return for a single-kind query")
		}

		out.SitesAddresses = stmt.ColumnText(0)
		out.SitesHostname = stmt.ColumnText(1)
		out.SitesRole = stmt.ColumnInt64(2)
		out.PublicKeysPrincipal = stmt.ColumnBytes(3)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: GetSite: %w", err)
	}

	return out, err
}

type ListSitesResult struct {
	SitesAddresses      string
	SitesHostname       string
	SitesRole           int64
	PublicKeysPrincipal []byte
}

func ListSites(conn *sqlite.Conn) ([]ListSitesResult, error) {
	const query = `SELECT sites.addresses, sites.hostname, sites.role, public_keys.principal
FROM sites
JOIN public_keys ON public_keys.id = sites.account_id`

	var out []ListSitesResult

	before := func(stmt *sqlite.Stmt) {
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		out = append(out, ListSitesResult{
			SitesAddresses:      stmt.ColumnText(0),
			SitesHostname:       stmt.ColumnText(1),
			SitesRole:           stmt.ColumnInt64(2),
			PublicKeysPrincipal: stmt.ColumnBytes(3),
		})

		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: ListSites: %w", err)
	}

	return out, err
}

func SetSiteTitle(conn *sqlite.Conn, title string) error {
	const query = `INSERT OR REPLACE INTO global_meta (key, value)
VALUES ('site_title', :title)`

	before := func(stmt *sqlite.Stmt) {
		stmt.SetText(":title", title)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: SetSiteTitle: %w", err)
	}

	return err
}

type GetSiteTitleResult struct {
	GlobalMetaValue string
}

func GetSiteTitle(conn *sqlite.Conn) (GetSiteTitleResult, error) {
	const query = `SELECT global_meta.value FROM global_meta WHERE global_meta.key ='site_title'`

	var out GetSiteTitleResult

	before := func(stmt *sqlite.Stmt) {
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("GetSiteTitle: more than one result return for a single-kind query")
		}

		out.GlobalMetaValue = stmt.ColumnText(0)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: GetSiteTitle: %w", err)
	}

	return out, err
}

func SetSiteDescription(conn *sqlite.Conn, description string) error {
	const query = `INSERT OR REPLACE INTO global_meta (key, value)
VALUES ('site_description', :description)`

	before := func(stmt *sqlite.Stmt) {
		stmt.SetText(":description", description)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: SetSiteDescription: %w", err)
	}

	return err
}

type GetSiteDescriptionResult struct {
	GlobalMetaValue string
}

func GetSiteDescription(conn *sqlite.Conn) (GetSiteDescriptionResult, error) {
	const query = `SELECT global_meta.value FROM global_meta WHERE global_meta.key ='site_description'`

	var out GetSiteDescriptionResult

	before := func(stmt *sqlite.Stmt) {
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("GetSiteDescription: more than one result return for a single-kind query")
		}

		out.GlobalMetaValue = stmt.ColumnText(0)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: GetSiteDescription: %w", err)
	}

	return out, err
}

func AddToken(conn *sqlite.Conn, inviteTokensToken string, inviteTokensExpirationTime int64, inviteTokensRole int64) error {
	const query = `INSERT INTO invite_tokens (token, expiration_time, role)
VALUES (:inviteTokensToken, :inviteTokensExpirationTime, :inviteTokensRole)`

	before := func(stmt *sqlite.Stmt) {
		stmt.SetText(":inviteTokensToken", inviteTokensToken)
		stmt.SetInt64(":inviteTokensExpirationTime", inviteTokensExpirationTime)
		stmt.SetInt64(":inviteTokensRole", inviteTokensRole)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: AddToken: %w", err)
	}

	return err
}

type GetTokenResult struct {
	InviteTokensRole           int64
	InviteTokensExpirationTime int64
}

func GetToken(conn *sqlite.Conn, inviteTokensToken string) (GetTokenResult, error) {
	const query = `SELECT invite_tokens.role, invite_tokens.expiration_time
FROM invite_tokens WHERE invite_tokens.token = :inviteTokensToken`

	var out GetTokenResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetText(":inviteTokensToken", inviteTokensToken)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("GetToken: more than one result return for a single-kind query")
		}

		out.InviteTokensRole = stmt.ColumnInt64(0)
		out.InviteTokensExpirationTime = stmt.ColumnInt64(1)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: GetToken: %w", err)
	}

	return out, err
}

func RemoveToken(conn *sqlite.Conn, inviteTokensToken string) error {
	const query = `DELETE FROM invite_tokens WHERE invite_tokens.token = :inviteTokensToken`

	before := func(stmt *sqlite.Stmt) {
		stmt.SetText(":inviteTokensToken", inviteTokensToken)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: RemoveToken: %w", err)
	}

	return err
}

func RemoveExpiredTokens(conn *sqlite.Conn) error {
	const query = `DELETE FROM invite_tokens WHERE invite_tokens.expiration_time < strftime('%s', 'now')`

	before := func(stmt *sqlite.Stmt) {
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: RemoveExpiredTokens: %w", err)
	}

	return err
}

type AddMemberResult struct {
	SiteMembersRole int64
}

func AddMember(conn *sqlite.Conn, publicKeysPrincipal []byte, siteMembersRole int64) (AddMemberResult, error) {
	const query = `INSERT OR REPLACE INTO site_members (account_id, role)
VALUES ((SELECT public_keys.id FROM public_keys WHERE public_keys.principal = :publicKeysPrincipal), :siteMembersRole)
RETURNING site_members.role`

	var out AddMemberResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetBytes(":publicKeysPrincipal", publicKeysPrincipal)
		stmt.SetInt64(":siteMembersRole", siteMembersRole)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("AddMember: more than one result return for a single-kind query")
		}

		out.SiteMembersRole = stmt.ColumnInt64(0)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: AddMember: %w", err)
	}

	return out, err
}

func RemoveMember(conn *sqlite.Conn, publicKeysPrincipal []byte) error {
	const query = `DELETE FROM site_members WHERE site_members.account_id = (SELECT public_keys.id FROM public_keys WHERE public_keys.principal = :publicKeysPrincipal)`

	before := func(stmt *sqlite.Stmt) {
		stmt.SetBytes(":publicKeysPrincipal", publicKeysPrincipal)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: RemoveMember: %w", err)
	}

	return err
}

type GetMemberResult struct {
	SiteMembersRole int64
}

func GetMember(conn *sqlite.Conn, publicKeysPrincipal []byte) (GetMemberResult, error) {
	const query = `SELECT site_members.role
FROM site_members
WHERE site_members.account_id = (SELECT public_keys.id FROM public_keys WHERE public_keys.principal = :publicKeysPrincipal)`

	var out GetMemberResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetBytes(":publicKeysPrincipal", publicKeysPrincipal)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("GetMember: more than one result return for a single-kind query")
		}

		out.SiteMembersRole = stmt.ColumnInt64(0)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: GetMember: %w", err)
	}

	return out, err
}

type ListMembersResult struct {
	SiteMembersRole     int64
	PublicKeysPrincipal []byte
}

func ListMembers(conn *sqlite.Conn) ([]ListMembersResult, error) {
	const query = `SELECT site_members.role, public_keys.principal
FROM site_members
JOIN public_keys ON public_keys.id = site_members.account_id`

	var out []ListMembersResult

	before := func(stmt *sqlite.Stmt) {
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		out = append(out, ListMembersResult{
			SiteMembersRole:     stmt.ColumnInt64(0),
			PublicKeysPrincipal: stmt.ColumnBytes(1),
		})

		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: ListMembers: %w", err)
	}

	return out, err
}

func AddWebPublicationRecord(conn *sqlite.Conn, hyperEntitiesEID string, webPublicationRecordsDocumentVersion string, webPublicationRecordsPath string) error {
	const query = `INSERT INTO web_publication_records (entity, document_version, path)
VALUES ((SELECT hyper_entities.id FROM hyper_entities WHERE hyper_entities.eid = :hyperEntitiesEID), :webPublicationRecordsDocumentVersion, :webPublicationRecordsPath)`

	before := func(stmt *sqlite.Stmt) {
		stmt.SetText(":hyperEntitiesEID", hyperEntitiesEID)
		stmt.SetText(":webPublicationRecordsDocumentVersion", webPublicationRecordsDocumentVersion)
		stmt.SetText(":webPublicationRecordsPath", webPublicationRecordsPath)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: AddWebPublicationRecord: %w", err)
	}

	return err
}

func RemoveWebPublicationRecord(conn *sqlite.Conn, hyperEntitiesEID string, webPublicationRecordsDocumentVersion string) error {
	const query = `DELETE FROM web_publication_records WHERE web_publication_records.entity = (SELECT hyper_entities.id FROM hyper_entities WHERE hyper_entities.eid = :hyperEntitiesEID) AND web_publication_records.document_version = :webPublicationRecordsDocumentVersion`

	before := func(stmt *sqlite.Stmt) {
		stmt.SetText(":hyperEntitiesEID", hyperEntitiesEID)
		stmt.SetText(":webPublicationRecordsDocumentVersion", webPublicationRecordsDocumentVersion)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: RemoveWebPublicationRecord: %w", err)
	}

	return err
}

type ListWebPublicationRecordsResult struct {
	HyperEntitiesID                      int64
	HyperEntitiesEID                     string
	WebPublicationRecordsDocumentVersion string
	WebPublicationRecordsPath            string
}

func ListWebPublicationRecords(conn *sqlite.Conn) ([]ListWebPublicationRecordsResult, error) {
	const query = `SELECT hyper_entities.id, hyper_entities.eid, web_publication_records.document_version, web_publication_records.path
FROM web_publication_records
JOIN hyper_entities ON web_publication_records.entity = hyper_entities.id`

	var out []ListWebPublicationRecordsResult

	before := func(stmt *sqlite.Stmt) {
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		out = append(out, ListWebPublicationRecordsResult{
			HyperEntitiesID:                      stmt.ColumnInt64(0),
			HyperEntitiesEID:                     stmt.ColumnText(1),
			WebPublicationRecordsDocumentVersion: stmt.ColumnText(2),
			WebPublicationRecordsPath:            stmt.ColumnText(3),
		})

		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: ListWebPublicationRecords: %w", err)
	}

	return out, err
}

type GetWebPublicationRecordByPathResult struct {
	HyperEntitiesID                      int64
	HyperEntitiesEID                     string
	WebPublicationRecordsDocumentVersion string
	WebPublicationRecordsPath            string
}

func GetWebPublicationRecordByPath(conn *sqlite.Conn, webPublicationRecordsPath string) (GetWebPublicationRecordByPathResult, error) {
	const query = `SELECT hyper_entities.id, hyper_entities.eid, web_publication_records.document_version, web_publication_records.path
FROM web_publication_records
JOIN hyper_entities ON web_publication_records.entity = hyper_entities.id WHERE web_publication_records.path = :webPublicationRecordsPath`

	var out GetWebPublicationRecordByPathResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetText(":webPublicationRecordsPath", webPublicationRecordsPath)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("GetWebPublicationRecordByPath: more than one result return for a single-kind query")
		}

		out.HyperEntitiesID = stmt.ColumnInt64(0)
		out.HyperEntitiesEID = stmt.ColumnText(1)
		out.WebPublicationRecordsDocumentVersion = stmt.ColumnText(2)
		out.WebPublicationRecordsPath = stmt.ColumnText(3)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: GetWebPublicationRecordByPath: %w", err)
	}

	return out, err
}

type GetWebPublicationRecordsByIDResult struct {
	HyperEntitiesID                      int64
	HyperEntitiesEID                     string
	WebPublicationRecordsDocumentVersion string
	WebPublicationRecordsPath            string
}

func GetWebPublicationRecordsByID(conn *sqlite.Conn, hyperEntitiesEID string) ([]GetWebPublicationRecordsByIDResult, error) {
	const query = `SELECT hyper_entities.id, hyper_entities.eid, web_publication_records.document_version, web_publication_records.path
FROM web_publication_records
JOIN hyper_entities ON web_publication_records.entity = hyper_entities.id WHERE hyper_entities.eid = :hyperEntitiesEID`

	var out []GetWebPublicationRecordsByIDResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetText(":hyperEntitiesEID", hyperEntitiesEID)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		out = append(out, GetWebPublicationRecordsByIDResult{
			HyperEntitiesID:                      stmt.ColumnInt64(0),
			HyperEntitiesEID:                     stmt.ColumnText(1),
			WebPublicationRecordsDocumentVersion: stmt.ColumnText(2),
			WebPublicationRecordsPath:            stmt.ColumnText(3),
		})

		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: GetWebPublicationRecordsByID: %w", err)
	}

	return out, err
}
