// Code generated by sqlitegen. DO NOT EDIT.

package hypersql

import (
	"errors"
	"fmt"

	"crawshaw.io/sqlite"
	"mintter/backend/pkg/sqlitegen"
)

var _ = errors.New

type BlobsHaveResult struct {
	Have int64
}

func BlobsHave(conn *sqlite.Conn, blobsMultihash []byte) (BlobsHaveResult, error) {
	const query = `SELECT 1 AS have
FROM blobs
WHERE blobs.multihash = :blobsMultihash
AND blobs.size >= 0`

	var out BlobsHaveResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetBytes(":blobsMultihash", blobsMultihash)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("BlobsHave: more than one result return for a single-kind query")
		}

		out.Have = stmt.ColumnInt64(0)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: BlobsHave: %w", err)
	}

	return out, err
}

type BlobsGetResult struct {
	BlobsID        int64
	BlobsMultihash []byte
	BlobsCodec     int64
	BlobsData      []byte
	BlobsSize      int64
}

func BlobsGet(conn *sqlite.Conn, blobsMultihash []byte) (BlobsGetResult, error) {
	const query = `SELECT blobs.id, blobs.multihash, blobs.codec, blobs.data, blobs.size
FROM blobs
WHERE blobs.multihash = :blobsMultihash AND blobs.size >= 0`

	var out BlobsGetResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetBytes(":blobsMultihash", blobsMultihash)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("BlobsGet: more than one result return for a single-kind query")
		}

		out.BlobsID = stmt.ColumnInt64(0)
		out.BlobsMultihash = stmt.ColumnBytes(1)
		out.BlobsCodec = stmt.ColumnInt64(2)
		out.BlobsData = stmt.ColumnBytes(3)
		out.BlobsSize = stmt.ColumnInt64(4)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: BlobsGet: %w", err)
	}

	return out, err
}

type BlobsGetSizeResult struct {
	BlobsID   int64
	BlobsSize int64
}

func BlobsGetSize(conn *sqlite.Conn, blobsMultihash []byte) (BlobsGetSizeResult, error) {
	const query = `SELECT blobs.id, blobs.size
FROM blobs
WHERE blobs.multihash = :blobsMultihash`

	var out BlobsGetSizeResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetBytes(":blobsMultihash", blobsMultihash)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("BlobsGetSize: more than one result return for a single-kind query")
		}

		out.BlobsID = stmt.ColumnInt64(0)
		out.BlobsSize = stmt.ColumnInt64(1)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: BlobsGetSize: %w", err)
	}

	return out, err
}

func BlobsUpdate(conn *sqlite.Conn, blobsData []byte, blobsSize int64, blobsID int64) error {
	const query = `UPDATE blobs
SET (data, size) = (:blobsData, :blobsSize)
WHERE blobs.id = :blobsID`

	before := func(stmt *sqlite.Stmt) {
		stmt.SetBytes(":blobsData", blobsData)
		stmt.SetInt64(":blobsSize", blobsSize)
		stmt.SetInt64(":blobsID", blobsID)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: BlobsUpdate: %w", err)
	}

	return err
}

type BlobsInsertResult struct {
	BlobsID int64
}

func BlobsInsert(conn *sqlite.Conn, blobsID int64, blobsMultihash []byte, blobsCodec int64, blobsData []byte, blobsSize int64) (BlobsInsertResult, error) {
	const query = `INSERT INTO blobs (id, multihash, codec, data, size)
VALUES (NULLIF(:blobsID, 0), :blobsMultihash, :blobsCodec, :blobsData, :blobsSize)
RETURNING blobs.id`

	var out BlobsInsertResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetInt64(":blobsID", blobsID)
		stmt.SetBytes(":blobsMultihash", blobsMultihash)
		stmt.SetInt64(":blobsCodec", blobsCodec)
		stmt.SetBytes(":blobsData", blobsData)
		stmt.SetInt64(":blobsSize", blobsSize)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("BlobsInsert: more than one result return for a single-kind query")
		}

		out.BlobsID = stmt.ColumnInt64(0)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: BlobsInsert: %w", err)
	}

	return out, err
}

type BlobsDeleteResult struct {
	BlobsID int64
}

func BlobsDelete(conn *sqlite.Conn, blobsMultihash []byte) (BlobsDeleteResult, error) {
	const query = `DELETE FROM blobs
WHERE blobs.multihash = :blobsMultihash
RETURNING blobs.id`

	var out BlobsDeleteResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetBytes(":blobsMultihash", blobsMultihash)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("BlobsDelete: more than one result return for a single-kind query")
		}

		out.BlobsID = stmt.ColumnInt64(0)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: BlobsDelete: %w", err)
	}

	return out, err
}

type BlobsListKnownResult struct {
	BlobsID        int64
	BlobsMultihash []byte
	BlobsCodec     int64
}

func BlobsListKnown(conn *sqlite.Conn) ([]BlobsListKnownResult, error) {
	const query = `SELECT blobs.id, blobs.multihash, blobs.codec
FROM blobs
WHERE blobs.size >= 0`

	var out []BlobsListKnownResult

	before := func(stmt *sqlite.Stmt) {
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		out = append(out, BlobsListKnownResult{
			BlobsID:        stmt.ColumnInt64(0),
			BlobsMultihash: stmt.ColumnBytes(1),
			BlobsCodec:     stmt.ColumnInt64(2),
		})

		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: BlobsListKnown: %w", err)
	}

	return out, err
}

func BlobLinksInsertOrIgnore(conn *sqlite.Conn, blobLinksSource int64, blobLinksRel string, blobLinksTarget int64) error {
	const query = `INSERT OR IGNORE INTO blob_links (source, rel, target)
VALUES (:blobLinksSource, :blobLinksRel, :blobLinksTarget)`

	before := func(stmt *sqlite.Stmt) {
		stmt.SetInt64(":blobLinksSource", blobLinksSource)
		stmt.SetText(":blobLinksRel", blobLinksRel)
		stmt.SetInt64(":blobLinksTarget", blobLinksTarget)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: BlobLinksInsertOrIgnore: %w", err)
	}

	return err
}

type PublicKeysLookupIDResult struct {
	PublicKeysID int64
}

func PublicKeysLookupID(conn *sqlite.Conn, publicKeysPrincipal []byte) (PublicKeysLookupIDResult, error) {
	const query = `SELECT public_keys.id
FROM public_keys
WHERE public_keys.principal = :publicKeysPrincipal
LIMIT 1`

	var out PublicKeysLookupIDResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetBytes(":publicKeysPrincipal", publicKeysPrincipal)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("PublicKeysLookupID: more than one result return for a single-kind query")
		}

		out.PublicKeysID = stmt.ColumnInt64(0)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: PublicKeysLookupID: %w", err)
	}

	return out, err
}

type PublicKeysLookupPrincipalResult struct {
	PublicKeysPrincipal []byte
}

func PublicKeysLookupPrincipal(conn *sqlite.Conn, publicKeysID int64) (PublicKeysLookupPrincipalResult, error) {
	const query = `SELECT public_keys.principal
FROM public_keys
WHERE public_keys.id = :publicKeysID
LIMIT 1`

	var out PublicKeysLookupPrincipalResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetInt64(":publicKeysID", publicKeysID)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("PublicKeysLookupPrincipal: more than one result return for a single-kind query")
		}

		out.PublicKeysPrincipal = stmt.ColumnBytes(0)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: PublicKeysLookupPrincipal: %w", err)
	}

	return out, err
}

type PublicKeysInsertResult struct {
	PublicKeysID int64
}

func PublicKeysInsert(conn *sqlite.Conn, principal []byte) (PublicKeysInsertResult, error) {
	const query = `INSERT INTO lookup (type, value)
VALUES (112, :principal)
RETURNING lookup.id AS public_keys_id`

	var out PublicKeysInsertResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetBytes(":principal", principal)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("PublicKeysInsert: more than one result return for a single-kind query")
		}

		out.PublicKeysID = stmt.ColumnInt64(0)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: PublicKeysInsert: %w", err)
	}

	return out, err
}

func SetAccountTrust(conn *sqlite.Conn, publicKeysPrincipal []byte) error {
	const query = `INSERT OR REPLACE INTO trusted_accounts (id)
VALUES ((SELECT public_keys.id FROM public_keys WHERE public_keys.principal = :publicKeysPrincipal))`

	before := func(stmt *sqlite.Stmt) {
		stmt.SetBytes(":publicKeysPrincipal", publicKeysPrincipal)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: SetAccountTrust: %w", err)
	}

	return err
}

func UnsetAccountTrust(conn *sqlite.Conn, publicKeysPrincipal []byte) error {
	const query = `DELETE FROM trusted_accounts
WHERE trusted_accounts.id IN (SELECT public_keys.id FROM public_keys WHERE public_keys.principal = :publicKeysPrincipal)`

	before := func(stmt *sqlite.Stmt) {
		stmt.SetBytes(":publicKeysPrincipal", publicKeysPrincipal)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: UnsetAccountTrust: %w", err)
	}

	return err
}

type IsTrustedAccountResult struct {
	TrustedAccountsID int64
}

func IsTrustedAccount(conn *sqlite.Conn, principal []byte) (IsTrustedAccountResult, error) {
	const query = `SELECT trusted_accounts.id
FROM trusted_accounts
WHERE trusted_accounts.id IN (SELECT public_keys.id FROM public_keys WHERE public_keys.principal = :principal)`

	var out IsTrustedAccountResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetBytes(":principal", principal)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("IsTrustedAccount: more than one result return for a single-kind query")
		}

		out.TrustedAccountsID = stmt.ColumnInt64(0)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: IsTrustedAccount: %w", err)
	}

	return out, err
}

type KeyDelegationsListResult struct {
	KeyDelegationsViewBlob          int64
	KeyDelegationsViewBlobCodec     int64
	KeyDelegationsViewBlobMultihash []byte
	KeyDelegationsViewIssuer        []byte
	KeyDelegationsViewDelegate      []byte
}

func KeyDelegationsList(conn *sqlite.Conn, keyDelegationsViewIssuer []byte) ([]KeyDelegationsListResult, error) {
	const query = `SELECT key_delegations_view.blob, key_delegations_view.blob_codec, key_delegations_view.blob_multihash, key_delegations_view.issuer, key_delegations_view.delegate
FROM key_delegations_view
WHERE key_delegations_view.issuer = :keyDelegationsViewIssuer`

	var out []KeyDelegationsListResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetBytes(":keyDelegationsViewIssuer", keyDelegationsViewIssuer)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		out = append(out, KeyDelegationsListResult{
			KeyDelegationsViewBlob:          stmt.ColumnInt64(0),
			KeyDelegationsViewBlobCodec:     stmt.ColumnInt64(1),
			KeyDelegationsViewBlobMultihash: stmt.ColumnBytes(2),
			KeyDelegationsViewIssuer:        stmt.ColumnBytes(3),
			KeyDelegationsViewDelegate:      stmt.ColumnBytes(4),
		})

		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: KeyDelegationsList: %w", err)
	}

	return out, err
}

type KeyDelegationsListAllResult struct {
	KeyDelegationsViewBlob          int64
	KeyDelegationsViewBlobCodec     int64
	KeyDelegationsViewBlobMultihash []byte
	KeyDelegationsViewIssuer        []byte
	KeyDelegationsViewDelegate      []byte
}

func KeyDelegationsListAll(conn *sqlite.Conn) ([]KeyDelegationsListAllResult, error) {
	const query = `SELECT key_delegations_view.blob, key_delegations_view.blob_codec, key_delegations_view.blob_multihash, key_delegations_view.issuer, key_delegations_view.delegate
FROM key_delegations_view`

	var out []KeyDelegationsListAllResult

	before := func(stmt *sqlite.Stmt) {
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		out = append(out, KeyDelegationsListAllResult{
			KeyDelegationsViewBlob:          stmt.ColumnInt64(0),
			KeyDelegationsViewBlobCodec:     stmt.ColumnInt64(1),
			KeyDelegationsViewBlobMultihash: stmt.ColumnBytes(2),
			KeyDelegationsViewIssuer:        stmt.ColumnBytes(3),
			KeyDelegationsViewDelegate:      stmt.ColumnBytes(4),
		})

		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: KeyDelegationsListAll: %w", err)
	}

	return out, err
}

type KeyDelegationsListByDelegateResult struct {
	KeyDelegationsViewBlob          int64
	KeyDelegationsViewBlobCodec     int64
	KeyDelegationsViewBlobMultihash []byte
	KeyDelegationsViewIssuer        []byte
	KeyDelegationsViewDelegate      []byte
}

func KeyDelegationsListByDelegate(conn *sqlite.Conn, keyDelegationsViewDelegate []byte) ([]KeyDelegationsListByDelegateResult, error) {
	const query = `SELECT key_delegations_view.blob, key_delegations_view.blob_codec, key_delegations_view.blob_multihash, key_delegations_view.issuer, key_delegations_view.delegate
FROM key_delegations_view
WHERE key_delegations_view.delegate = :keyDelegationsViewDelegate`

	var out []KeyDelegationsListByDelegateResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetBytes(":keyDelegationsViewDelegate", keyDelegationsViewDelegate)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		out = append(out, KeyDelegationsListByDelegateResult{
			KeyDelegationsViewBlob:          stmt.ColumnInt64(0),
			KeyDelegationsViewBlobCodec:     stmt.ColumnInt64(1),
			KeyDelegationsViewBlobMultihash: stmt.ColumnBytes(2),
			KeyDelegationsViewIssuer:        stmt.ColumnBytes(3),
			KeyDelegationsViewDelegate:      stmt.ColumnBytes(4),
		})

		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: KeyDelegationsListByDelegate: %w", err)
	}

	return out, err
}

type KeyDelegationsGetIssuerResult struct {
	KeyDelegationsIssuer int64
}

func KeyDelegationsGetIssuer(conn *sqlite.Conn, blobsMultihash []byte) (KeyDelegationsGetIssuerResult, error) {
	const query = `SELECT key_delegations.issuer
FROM key_delegations
JOIN blobs ON blobs.id = key_delegations.blob
WHERE blobs.multihash = :blobsMultihash
LIMIT 1`

	var out KeyDelegationsGetIssuerResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetBytes(":blobsMultihash", blobsMultihash)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("KeyDelegationsGetIssuer: more than one result return for a single-kind query")
		}

		out.KeyDelegationsIssuer = stmt.ColumnInt64(0)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: KeyDelegationsGetIssuer: %w", err)
	}

	return out, err
}

type EntitiesInsertOrIgnoreResult struct {
	EntitiesID int64
}

func EntitiesInsertOrIgnore(conn *sqlite.Conn, entity_id string) (EntitiesInsertOrIgnoreResult, error) {
	const query = `INSERT OR IGNORE INTO lookup (type, value)
VALUES (114, :entity_id)
RETURNING lookup.id AS entities_id`

	var out EntitiesInsertOrIgnoreResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetText(":entity_id", entity_id)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("EntitiesInsertOrIgnore: more than one result return for a single-kind query")
		}

		out.EntitiesID = stmt.ColumnInt64(0)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: EntitiesInsertOrIgnore: %w", err)
	}

	return out, err
}

type EntitiesLookupIDResult struct {
	EntitiesID int64
}

func EntitiesLookupID(conn *sqlite.Conn, entities_eid string) (EntitiesLookupIDResult, error) {
	const query = `SELECT entities.id
FROM entities
WHERE entities.eid = :entities_eid
LIMIT 1`

	var out EntitiesLookupIDResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetText(":entities_eid", entities_eid)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("EntitiesLookupID: more than one result return for a single-kind query")
		}

		out.EntitiesID = stmt.ColumnInt64(0)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: EntitiesLookupID: %w", err)
	}

	return out, err
}

type EntitiesListByPrefixResult struct {
	EntitiesID  int64
	EntitiesEID string
}

func EntitiesListByPrefix(conn *sqlite.Conn, prefix string) ([]EntitiesListByPrefixResult, error) {
	const query = `SELECT entities.id, entities.eid
FROM entities
WHERE entities.eid GLOB :prefix
ORDER BY entities.id`

	var out []EntitiesListByPrefixResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetText(":prefix", prefix)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		out = append(out, EntitiesListByPrefixResult{
			EntitiesID:  stmt.ColumnInt64(0),
			EntitiesEID: stmt.ColumnText(1),
		})

		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: EntitiesListByPrefix: %w", err)
	}

	return out, err
}

func EntitiesDelete(conn *sqlite.Conn, entities_eid string) error {
	const query = `DELETE FROM lookup
WHERE lookup.type = 114
AND lookup.value = :entities_eid`

	before := func(stmt *sqlite.Stmt) {
		stmt.SetText(":entities_eid", entities_eid)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: EntitiesDelete: %w", err)
	}

	return err
}

func ChangesInsertOrIgnore(conn *sqlite.Conn, changesBlob int64, changesEntity int64, changesHLCTime int64, changesAuthor int64) error {
	const query = `INSERT OR IGNORE INTO changes (blob, entity, hlc_time, author)
VALUES (:changesBlob, :changesEntity, :changesHLCTime, :changesAuthor)`

	before := func(stmt *sqlite.Stmt) {
		stmt.SetInt64(":changesBlob", changesBlob)
		stmt.SetInt64(":changesEntity", changesEntity)
		stmt.SetInt64(":changesHLCTime", changesHLCTime)
		stmt.SetInt64(":changesAuthor", changesAuthor)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: ChangesInsertOrIgnore: %w", err)
	}

	return err
}

type ChangesListFromChangeSetResult struct {
	ChangesViewBlobID    int64
	ChangesViewCodec     int64
	ChangesViewData      []byte
	ChangesViewEntityID  int64
	ChangesViewHLCTime   int64
	ChangesViewMultihash []byte
	ChangesViewSize      int64
}

func ChangesListFromChangeSet(conn *sqlite.Conn, cset []byte, changesViewEntity string) ([]ChangesListFromChangeSetResult, error) {
	const query = `SELECT changes_view.blob_id, changes_view.codec, changes_view.data, changes_view.entity_id, changes_view.hlc_time, changes_view.multihash, changes_view.size
FROM changes_view, json_each(:cset) AS cset
WHERE changes_view.entity = :changesViewEntity
AND changes_view.blob_id = cset.value
ORDER BY changes_view.hlc_time`

	var out []ChangesListFromChangeSetResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetBytes(":cset", cset)
		stmt.SetText(":changesViewEntity", changesViewEntity)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		out = append(out, ChangesListFromChangeSetResult{
			ChangesViewBlobID:    stmt.ColumnInt64(0),
			ChangesViewCodec:     stmt.ColumnInt64(1),
			ChangesViewData:      stmt.ColumnBytes(2),
			ChangesViewEntityID:  stmt.ColumnInt64(3),
			ChangesViewHLCTime:   stmt.ColumnInt64(4),
			ChangesViewMultihash: stmt.ColumnBytes(5),
			ChangesViewSize:      stmt.ColumnInt64(6),
		})

		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: ChangesListFromChangeSet: %w", err)
	}

	return out, err
}

type ChangesListForEntityResult struct {
	ChangesViewBlobID    int64
	ChangesViewCodec     int64
	ChangesViewData      []byte
	ChangesViewEntityID  int64
	ChangesViewHLCTime   int64
	ChangesViewMultihash []byte
	ChangesViewSize      int64
}

func ChangesListForEntity(conn *sqlite.Conn, changesViewEntity string) ([]ChangesListForEntityResult, error) {
	const query = `SELECT changes_view.blob_id, changes_view.codec, changes_view.data, changes_view.entity_id, changes_view.hlc_time, changes_view.multihash, changes_view.size
FROM changes_view
WHERE changes_view.entity = :changesViewEntity
ORDER BY changes_view.hlc_time`

	var out []ChangesListForEntityResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetText(":changesViewEntity", changesViewEntity)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		out = append(out, ChangesListForEntityResult{
			ChangesViewBlobID:    stmt.ColumnInt64(0),
			ChangesViewCodec:     stmt.ColumnInt64(1),
			ChangesViewData:      stmt.ColumnBytes(2),
			ChangesViewEntityID:  stmt.ColumnInt64(3),
			ChangesViewHLCTime:   stmt.ColumnInt64(4),
			ChangesViewMultihash: stmt.ColumnBytes(5),
			ChangesViewSize:      stmt.ColumnInt64(6),
		})

		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: ChangesListForEntity: %w", err)
	}

	return out, err
}

type ChangesListPublicNoDataResult struct {
	ChangesViewBlobID    int64
	ChangesViewCodec     int64
	ChangesViewEntityID  int64
	ChangesViewHLCTime   int64
	ChangesViewMultihash []byte
	ChangesViewSize      int64
	ChangesViewEntity    []byte
	DraftsBlob           int64
}

func ChangesListPublicNoData(conn *sqlite.Conn) ([]ChangesListPublicNoDataResult, error) {
	const query = `SELECT changes_view.blob_id, changes_view.codec, changes_view.entity_id, changes_view.hlc_time, changes_view.multihash, changes_view.size, changes_view.entity, drafts.blob
FROM changes_view
LEFT JOIN drafts ON drafts.entity = changes_view.entity_id
WHERE drafts.blob IS NULL
ORDER BY changes_view.entity, changes_view.hlc_time`

	var out []ChangesListPublicNoDataResult

	before := func(stmt *sqlite.Stmt) {
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		out = append(out, ChangesListPublicNoDataResult{
			ChangesViewBlobID:    stmt.ColumnInt64(0),
			ChangesViewCodec:     stmt.ColumnInt64(1),
			ChangesViewEntityID:  stmt.ColumnInt64(2),
			ChangesViewHLCTime:   stmt.ColumnInt64(3),
			ChangesViewMultihash: stmt.ColumnBytes(4),
			ChangesViewSize:      stmt.ColumnInt64(5),
			ChangesViewEntity:    stmt.ColumnBytes(6),
			DraftsBlob:           stmt.ColumnInt64(7),
		})

		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: ChangesListPublicNoData: %w", err)
	}

	return out, err
}

type ChangesResolveHeadsResult struct {
	ResolvedJSON []byte
}

func ChangesResolveHeads(conn *sqlite.Conn, heads []byte) (ChangesResolveHeadsResult, error) {
	const query = `WITH RECURSIVE changeset (change) AS (SELECT value FROM json_each(:heads) UNION SELECT change_deps.parent FROM change_deps JOIN changeset ON changeset.change = change_deps.child)
SELECT json_group_array(change) AS resolved_json
FROM changeset
LIMIT 1`

	var out ChangesResolveHeadsResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetBytes(":heads", heads)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("ChangesResolveHeads: more than one result return for a single-kind query")
		}

		out.ResolvedJSON = stmt.ColumnBytes(0)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: ChangesResolveHeads: %w", err)
	}

	return out, err
}

type ChangesGetPublicHeadsJSONResult struct {
	Heads []byte
}

func ChangesGetPublicHeadsJSON(conn *sqlite.Conn, entity int64) (ChangesGetPublicHeadsJSONResult, error) {
	const query = `WITH
non_drafts (blob) AS (
	SELECT changes.blob
	FROM changes
	LEFT JOIN drafts ON drafts.entity = changes.entity AND changes.blob = drafts.blob
	WHERE changes.entity = :entity
	AND drafts.blob IS NULL
),
deps (blob) AS (
	SELECT DISTINCT change_deps.parent
	FROM change_deps
	JOIN non_drafts ON non_drafts.blob = change_deps.child
)
SELECT json_group_array(blob) AS heads
FROM non_drafts
WHERE blob NOT IN deps`

	var out ChangesGetPublicHeadsJSONResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetInt64(":entity", entity)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("ChangesGetPublicHeadsJSON: more than one result return for a single-kind query")
		}

		out.Heads = stmt.ColumnBytes(0)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: ChangesGetPublicHeadsJSON: %w", err)
	}

	return out, err
}

type ChangesGetTrustedHeadsJSONResult struct {
	Heads []byte
}

func ChangesGetTrustedHeadsJSON(conn *sqlite.Conn, entity int64) (ChangesGetTrustedHeadsJSONResult, error) {
	const query = `SELECT json_group_array(changes.blob) AS heads
FROM changes
JOIN trusted_accounts ON trusted_accounts.id = changes.author
WHERE changes.entity = :entity`

	var out ChangesGetTrustedHeadsJSONResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetInt64(":entity", entity)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("ChangesGetTrustedHeadsJSON: more than one result return for a single-kind query")
		}

		out.Heads = stmt.ColumnBytes(0)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: ChangesGetTrustedHeadsJSON: %w", err)
	}

	return out, err
}

func ChangesDeleteForEntity(conn *sqlite.Conn, changesEntity int64) error {
	const query = `DELETE FROM blobs
WHERE blobs.id IN (SELECT changes.blob FROM changes WHERE changes.entity = :changesEntity)`

	before := func(stmt *sqlite.Stmt) {
		stmt.SetInt64(":changesEntity", changesEntity)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: ChangesDeleteForEntity: %w", err)
	}

	return err
}

type ChangesGetInfoResult struct {
	ChangesBlob         int64
	ChangesHLCTime      int64
	PublicKeysPrincipal []byte
	IsTrusted           int64
}

func ChangesGetInfo(conn *sqlite.Conn, changesBlob int64) (ChangesGetInfoResult, error) {
	const query = `SELECT changes.blob, changes.hlc_time, public_keys.principal, trusted_accounts.id > 0 AS is_trusted
FROM changes
JOIN public_keys ON public_keys.id = changes.author
LEFT JOIN trusted_accounts ON trusted_accounts.id = changes.author
WHERE changes.blob = :changesBlob
LIMIT 1`

	var out ChangesGetInfoResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetInt64(":changesBlob", changesBlob)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("ChangesGetInfo: more than one result return for a single-kind query")
		}

		out.ChangesBlob = stmt.ColumnInt64(0)
		out.ChangesHLCTime = stmt.ColumnInt64(1)
		out.PublicKeysPrincipal = stmt.ColumnBytes(2)
		out.IsTrusted = stmt.ColumnInt64(3)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: ChangesGetInfo: %w", err)
	}

	return out, err
}

type ChangesGetDepsResult struct {
	BlobsCodec     int64
	BlobsMultihash []byte
}

func ChangesGetDeps(conn *sqlite.Conn, changeDepsChild int64) ([]ChangesGetDepsResult, error) {
	const query = `SELECT blobs.codec, blobs.multihash
FROM change_deps
JOIN blobs ON blobs.id = change_deps.parent
WHERE change_deps.child = :changeDepsChild`

	var out []ChangesGetDepsResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetInt64(":changeDepsChild", changeDepsChild)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		out = append(out, ChangesGetDepsResult{
			BlobsCodec:     stmt.ColumnInt64(0),
			BlobsMultihash: stmt.ColumnBytes(1),
		})

		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: ChangesGetDeps: %w", err)
	}

	return out, err
}

type ChangesInfoForEntityResult struct {
	BlobsCodec          int64
	BlobsMultihash      []byte
	ChangesBlob         int64
	ChangesHLCTime      int64
	PublicKeysPrincipal []byte
	IsTrusted           int64
}

func ChangesInfoForEntity(conn *sqlite.Conn, changesEntity int64) ([]ChangesInfoForEntityResult, error) {
	const query = `SELECT blobs.codec, blobs.multihash, changes.blob, changes.hlc_time, public_keys.principal, trusted_accounts.id > 0 AS is_trusted
FROM changes
JOIN blobs ON blobs.id = changes.blob
JOIN public_keys ON public_keys.id = changes.author
LEFT JOIN trusted_accounts ON trusted_accounts.id = changes.author
WHERE changes.entity = :changesEntity`

	var out []ChangesInfoForEntityResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetInt64(":changesEntity", changesEntity)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		out = append(out, ChangesInfoForEntityResult{
			BlobsCodec:          stmt.ColumnInt64(0),
			BlobsMultihash:      stmt.ColumnBytes(1),
			ChangesBlob:         stmt.ColumnInt64(2),
			ChangesHLCTime:      stmt.ColumnInt64(3),
			PublicKeysPrincipal: stmt.ColumnBytes(4),
			IsTrusted:           stmt.ColumnInt64(5),
		})

		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: ChangesInfoForEntity: %w", err)
	}

	return out, err
}

type BacklinksForEntityResult struct {
	EntitiesID      int64
	EntitiesEID     string
	BlobsCodec      int64
	BlobsMultihash  []byte
	BlobAttrsBlob   int64
	BlobAttrsKey    string
	BlobAttrsAnchor string
	BlobAttrsExtra  []byte
}

func BacklinksForEntity(conn *sqlite.Conn, blobAttrsValuePtr int64) ([]BacklinksForEntityResult, error) {
	const query = `SELECT entities.id, entities.eid, blobs.codec, blobs.multihash, blob_attrs.blob, blob_attrs.key, blob_attrs.anchor, blob_attrs.extra
FROM blob_attrs
JOIN changes ON changes.blob = blob_attrs.blob
JOIN entities ON entities.id = changes.entity
JOIN blobs ON blobs.id = blob_attrs.blob
WHERE blob_attrs.key GLOB 'href/*'
AND blob_attrs.value_ptr IS NOT NULL
AND blob_attrs.value_ptr = :blobAttrsValuePtr`

	var out []BacklinksForEntityResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetInt64(":blobAttrsValuePtr", blobAttrsValuePtr)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		out = append(out, BacklinksForEntityResult{
			EntitiesID:      stmt.ColumnInt64(0),
			EntitiesEID:     stmt.ColumnText(1),
			BlobsCodec:      stmt.ColumnInt64(2),
			BlobsMultihash:  stmt.ColumnBytes(3),
			BlobAttrsBlob:   stmt.ColumnInt64(4),
			BlobAttrsKey:    stmt.ColumnText(5),
			BlobAttrsAnchor: stmt.ColumnText(6),
			BlobAttrsExtra:  stmt.ColumnBytes(7),
		})

		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: BacklinksForEntity: %w", err)
	}

	return out, err
}

func DraftsInsert(conn *sqlite.Conn, draftsEntity int64, draftsBlob int64) error {
	const query = `INSERT INTO drafts (entity, blob)
VALUES (:draftsEntity, :draftsBlob)`

	before := func(stmt *sqlite.Stmt) {
		stmt.SetInt64(":draftsEntity", draftsEntity)
		stmt.SetInt64(":draftsBlob", draftsBlob)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: DraftsInsert: %w", err)
	}

	return err
}

type DraftsGetResult struct {
	DraftsViewBlobID    int64
	DraftsViewCodec     int64
	DraftsViewEntity    []byte
	DraftsViewEntityID  int64
	DraftsViewMultihash []byte
}

func DraftsGet(conn *sqlite.Conn, draftsViewEntity string) (DraftsGetResult, error) {
	const query = `SELECT drafts_view.blob_id, drafts_view.codec, drafts_view.entity, drafts_view.entity_id, drafts_view.multihash
FROM drafts_view
WHERE drafts_view.entity = :draftsViewEntity
LIMIT 1`

	var out DraftsGetResult

	before := func(stmt *sqlite.Stmt) {
		stmt.SetText(":draftsViewEntity", draftsViewEntity)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("DraftsGet: more than one result return for a single-kind query")
		}

		out.DraftsViewBlobID = stmt.ColumnInt64(0)
		out.DraftsViewCodec = stmt.ColumnInt64(1)
		out.DraftsViewEntity = stmt.ColumnBytes(2)
		out.DraftsViewEntityID = stmt.ColumnInt64(3)
		out.DraftsViewMultihash = stmt.ColumnBytes(4)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: DraftsGet: %w", err)
	}

	return out, err
}

func DraftsDelete(conn *sqlite.Conn, draftsBlob int64) error {
	const query = `DELETE FROM drafts
WHERE drafts.blob = :draftsBlob`

	before := func(stmt *sqlite.Stmt) {
		stmt.SetInt64(":draftsBlob", draftsBlob)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: DraftsDelete: %w", err)
	}

	return err
}

func SetReindexTime(conn *sqlite.Conn, kvValue string) error {
	const query = `INSERT OR REPLACE INTO kv (key, value)
VALUES ('last_reindex_time', :kvValue)
`

	before := func(stmt *sqlite.Stmt) {
		stmt.SetText(":kvValue", kvValue)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: SetReindexTime: %w", err)
	}

	return err
}

type GetReindexTimeResult struct {
	KVValue string
}

func GetReindexTime(conn *sqlite.Conn) (GetReindexTimeResult, error) {
	const query = `SELECT kv.value
FROM kv
WHERE kv.key = 'last_reindex_time'
LIMIT 1`

	var out GetReindexTimeResult

	before := func(stmt *sqlite.Stmt) {
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("GetReindexTime: more than one result return for a single-kind query")
		}

		out.KVValue = stmt.ColumnText(0)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: GetReindexTime: %w", err)
	}

	return out, err
}
