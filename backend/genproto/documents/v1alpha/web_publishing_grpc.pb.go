// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: documents/v1alpha/web_publishing.proto

package documents

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WebPublishingClient is the client API for WebPublishing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebPublishingClient interface {
	// Adds a site configuration to the local app backend.
	AddSite(ctx context.Context, in *AddSiteRequest, opts ...grpc.CallOption) (*SiteConfig, error)
	// Removes site configuration from the local app backend.
	RemoveSite(ctx context.Context, in *RemoveSiteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Lists configured sites.
	ListSites(ctx context.Context, in *ListSitesRequest, opts ...grpc.CallOption) (*ListSitesResponse, error)
	// Lists web publication records for a given document among the configured web sites.
	ListWebPublicationRecords(ctx context.Context, in *ListWebPublicationRecordsRequest, opts ...grpc.CallOption) (*ListWebPublicationRecordsResponse, error)
}

type webPublishingClient struct {
	cc grpc.ClientConnInterface
}

func NewWebPublishingClient(cc grpc.ClientConnInterface) WebPublishingClient {
	return &webPublishingClient{cc}
}

func (c *webPublishingClient) AddSite(ctx context.Context, in *AddSiteRequest, opts ...grpc.CallOption) (*SiteConfig, error) {
	out := new(SiteConfig)
	err := c.cc.Invoke(ctx, "/com.mintter.documents.v1alpha.WebPublishing/AddSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webPublishingClient) RemoveSite(ctx context.Context, in *RemoveSiteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/com.mintter.documents.v1alpha.WebPublishing/RemoveSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webPublishingClient) ListSites(ctx context.Context, in *ListSitesRequest, opts ...grpc.CallOption) (*ListSitesResponse, error) {
	out := new(ListSitesResponse)
	err := c.cc.Invoke(ctx, "/com.mintter.documents.v1alpha.WebPublishing/ListSites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webPublishingClient) ListWebPublicationRecords(ctx context.Context, in *ListWebPublicationRecordsRequest, opts ...grpc.CallOption) (*ListWebPublicationRecordsResponse, error) {
	out := new(ListWebPublicationRecordsResponse)
	err := c.cc.Invoke(ctx, "/com.mintter.documents.v1alpha.WebPublishing/ListWebPublicationRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebPublishingServer is the server API for WebPublishing service.
// All implementations should embed UnimplementedWebPublishingServer
// for forward compatibility
type WebPublishingServer interface {
	// Adds a site configuration to the local app backend.
	AddSite(context.Context, *AddSiteRequest) (*SiteConfig, error)
	// Removes site configuration from the local app backend.
	RemoveSite(context.Context, *RemoveSiteRequest) (*emptypb.Empty, error)
	// Lists configured sites.
	ListSites(context.Context, *ListSitesRequest) (*ListSitesResponse, error)
	// Lists web publication records for a given document among the configured web sites.
	ListWebPublicationRecords(context.Context, *ListWebPublicationRecordsRequest) (*ListWebPublicationRecordsResponse, error)
}

// UnimplementedWebPublishingServer should be embedded to have forward compatible implementations.
type UnimplementedWebPublishingServer struct {
}

func (UnimplementedWebPublishingServer) AddSite(context.Context, *AddSiteRequest) (*SiteConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSite not implemented")
}
func (UnimplementedWebPublishingServer) RemoveSite(context.Context, *RemoveSiteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSite not implemented")
}
func (UnimplementedWebPublishingServer) ListSites(context.Context, *ListSitesRequest) (*ListSitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSites not implemented")
}
func (UnimplementedWebPublishingServer) ListWebPublicationRecords(context.Context, *ListWebPublicationRecordsRequest) (*ListWebPublicationRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWebPublicationRecords not implemented")
}

// UnsafeWebPublishingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebPublishingServer will
// result in compilation errors.
type UnsafeWebPublishingServer interface {
	mustEmbedUnimplementedWebPublishingServer()
}

func RegisterWebPublishingServer(s grpc.ServiceRegistrar, srv WebPublishingServer) {
	s.RegisterService(&WebPublishing_ServiceDesc, srv)
}

func _WebPublishing_AddSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebPublishingServer).AddSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.documents.v1alpha.WebPublishing/AddSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebPublishingServer).AddSite(ctx, req.(*AddSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebPublishing_RemoveSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebPublishingServer).RemoveSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.documents.v1alpha.WebPublishing/RemoveSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebPublishingServer).RemoveSite(ctx, req.(*RemoveSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebPublishing_ListSites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebPublishingServer).ListSites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.documents.v1alpha.WebPublishing/ListSites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebPublishingServer).ListSites(ctx, req.(*ListSitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebPublishing_ListWebPublicationRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWebPublicationRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebPublishingServer).ListWebPublicationRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.documents.v1alpha.WebPublishing/ListWebPublicationRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebPublishingServer).ListWebPublicationRecords(ctx, req.(*ListWebPublicationRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebPublishing_ServiceDesc is the grpc.ServiceDesc for WebPublishing service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebPublishing_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.mintter.documents.v1alpha.WebPublishing",
	HandlerType: (*WebPublishingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSite",
			Handler:    _WebPublishing_AddSite_Handler,
		},
		{
			MethodName: "RemoveSite",
			Handler:    _WebPublishing_RemoveSite_Handler,
		},
		{
			MethodName: "ListSites",
			Handler:    _WebPublishing_ListSites_Handler,
		},
		{
			MethodName: "ListWebPublicationRecords",
			Handler:    _WebPublishing_ListWebPublicationRecords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "documents/v1alpha/web_publishing.proto",
}

// WebSiteClient is the client API for WebSite service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebSiteClient interface {
	// Creates a new invite token for registering a new member.
	// Protected. Must require authentication.
	CreateInviteToken(ctx context.Context, in *CreateInviteTokenRequest, opts ...grpc.CallOption) (*InviteToken, error)
	// Redeems a previously created invite token to register a new member.
	RedeemInviteToken(ctx context.Context, in *RedeemInviteTokenRequest, opts ...grpc.CallOption) (*RedeemInviteTokenResponse, error)
	// Gets public-facing site information.
	GetSiteInfo(ctx context.Context, in *GetSiteInfoRequest, opts ...grpc.CallOption) (*SiteInfo, error)
	// Updates public-facing site information. Doesn't support partial updates,
	// hence all the fields must be provided.
	// Protected. Must require authentication.
	UpdateSiteInfo(ctx context.Context, in *UpdateSiteInfoRequest, opts ...grpc.CallOption) (*SiteInfo, error)
	// Lists registered members on the site.
	// May be protected or public depending on the privacy policies of the web site.
	ListMembers(ctx context.Context, in *ListMembersRequest, opts ...grpc.CallOption) (*ListMembersResponse, error)
	// Gets information about a specific member.
	// May be protected or public depending on the privacy policies of the web site.
	GetMember(ctx context.Context, in *GetMemberRequest, opts ...grpc.CallOption) (*Member, error)
	// Deletes an existing member.
	// Protected. Must require authentication.
	DeleteMember(ctx context.Context, in *DeleteMemberRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Publishes a Mintter Document on the remote web server along with any supporting materials.
	PublishDocument(ctx context.Context, in *PublishDocumentRequest, opts ...grpc.CallOption) (*PublishDocumentResponse, error)
	// Unpublishes a previously published Document.
	UnpublishDocument(ctx context.Context, in *UnpublishDocumentRequest, opts ...grpc.CallOption) (*UnpublishDocumentResponse, error)
	// list all the published documents
	ListWebPublications(ctx context.Context, in *ListWebPublicationsRequest, opts ...grpc.CallOption) (*ListWebPublicationsResponse, error)
	// Get the document published at a given path.
	GetPath(ctx context.Context, in *GetPathRequest, opts ...grpc.CallOption) (*GetPathResponse, error)
}

type webSiteClient struct {
	cc grpc.ClientConnInterface
}

func NewWebSiteClient(cc grpc.ClientConnInterface) WebSiteClient {
	return &webSiteClient{cc}
}

func (c *webSiteClient) CreateInviteToken(ctx context.Context, in *CreateInviteTokenRequest, opts ...grpc.CallOption) (*InviteToken, error) {
	out := new(InviteToken)
	err := c.cc.Invoke(ctx, "/com.mintter.documents.v1alpha.WebSite/CreateInviteToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webSiteClient) RedeemInviteToken(ctx context.Context, in *RedeemInviteTokenRequest, opts ...grpc.CallOption) (*RedeemInviteTokenResponse, error) {
	out := new(RedeemInviteTokenResponse)
	err := c.cc.Invoke(ctx, "/com.mintter.documents.v1alpha.WebSite/RedeemInviteToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webSiteClient) GetSiteInfo(ctx context.Context, in *GetSiteInfoRequest, opts ...grpc.CallOption) (*SiteInfo, error) {
	out := new(SiteInfo)
	err := c.cc.Invoke(ctx, "/com.mintter.documents.v1alpha.WebSite/GetSiteInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webSiteClient) UpdateSiteInfo(ctx context.Context, in *UpdateSiteInfoRequest, opts ...grpc.CallOption) (*SiteInfo, error) {
	out := new(SiteInfo)
	err := c.cc.Invoke(ctx, "/com.mintter.documents.v1alpha.WebSite/UpdateSiteInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webSiteClient) ListMembers(ctx context.Context, in *ListMembersRequest, opts ...grpc.CallOption) (*ListMembersResponse, error) {
	out := new(ListMembersResponse)
	err := c.cc.Invoke(ctx, "/com.mintter.documents.v1alpha.WebSite/ListMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webSiteClient) GetMember(ctx context.Context, in *GetMemberRequest, opts ...grpc.CallOption) (*Member, error) {
	out := new(Member)
	err := c.cc.Invoke(ctx, "/com.mintter.documents.v1alpha.WebSite/GetMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webSiteClient) DeleteMember(ctx context.Context, in *DeleteMemberRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/com.mintter.documents.v1alpha.WebSite/DeleteMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webSiteClient) PublishDocument(ctx context.Context, in *PublishDocumentRequest, opts ...grpc.CallOption) (*PublishDocumentResponse, error) {
	out := new(PublishDocumentResponse)
	err := c.cc.Invoke(ctx, "/com.mintter.documents.v1alpha.WebSite/PublishDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webSiteClient) UnpublishDocument(ctx context.Context, in *UnpublishDocumentRequest, opts ...grpc.CallOption) (*UnpublishDocumentResponse, error) {
	out := new(UnpublishDocumentResponse)
	err := c.cc.Invoke(ctx, "/com.mintter.documents.v1alpha.WebSite/UnpublishDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webSiteClient) ListWebPublications(ctx context.Context, in *ListWebPublicationsRequest, opts ...grpc.CallOption) (*ListWebPublicationsResponse, error) {
	out := new(ListWebPublicationsResponse)
	err := c.cc.Invoke(ctx, "/com.mintter.documents.v1alpha.WebSite/ListWebPublications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webSiteClient) GetPath(ctx context.Context, in *GetPathRequest, opts ...grpc.CallOption) (*GetPathResponse, error) {
	out := new(GetPathResponse)
	err := c.cc.Invoke(ctx, "/com.mintter.documents.v1alpha.WebSite/GetPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebSiteServer is the server API for WebSite service.
// All implementations should embed UnimplementedWebSiteServer
// for forward compatibility
type WebSiteServer interface {
	// Creates a new invite token for registering a new member.
	// Protected. Must require authentication.
	CreateInviteToken(context.Context, *CreateInviteTokenRequest) (*InviteToken, error)
	// Redeems a previously created invite token to register a new member.
	RedeemInviteToken(context.Context, *RedeemInviteTokenRequest) (*RedeemInviteTokenResponse, error)
	// Gets public-facing site information.
	GetSiteInfo(context.Context, *GetSiteInfoRequest) (*SiteInfo, error)
	// Updates public-facing site information. Doesn't support partial updates,
	// hence all the fields must be provided.
	// Protected. Must require authentication.
	UpdateSiteInfo(context.Context, *UpdateSiteInfoRequest) (*SiteInfo, error)
	// Lists registered members on the site.
	// May be protected or public depending on the privacy policies of the web site.
	ListMembers(context.Context, *ListMembersRequest) (*ListMembersResponse, error)
	// Gets information about a specific member.
	// May be protected or public depending on the privacy policies of the web site.
	GetMember(context.Context, *GetMemberRequest) (*Member, error)
	// Deletes an existing member.
	// Protected. Must require authentication.
	DeleteMember(context.Context, *DeleteMemberRequest) (*emptypb.Empty, error)
	// Publishes a Mintter Document on the remote web server along with any supporting materials.
	PublishDocument(context.Context, *PublishDocumentRequest) (*PublishDocumentResponse, error)
	// Unpublishes a previously published Document.
	UnpublishDocument(context.Context, *UnpublishDocumentRequest) (*UnpublishDocumentResponse, error)
	// list all the published documents
	ListWebPublications(context.Context, *ListWebPublicationsRequest) (*ListWebPublicationsResponse, error)
	// Get the document published at a given path.
	GetPath(context.Context, *GetPathRequest) (*GetPathResponse, error)
}

// UnimplementedWebSiteServer should be embedded to have forward compatible implementations.
type UnimplementedWebSiteServer struct {
}

func (UnimplementedWebSiteServer) CreateInviteToken(context.Context, *CreateInviteTokenRequest) (*InviteToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInviteToken not implemented")
}
func (UnimplementedWebSiteServer) RedeemInviteToken(context.Context, *RedeemInviteTokenRequest) (*RedeemInviteTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedeemInviteToken not implemented")
}
func (UnimplementedWebSiteServer) GetSiteInfo(context.Context, *GetSiteInfoRequest) (*SiteInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSiteInfo not implemented")
}
func (UnimplementedWebSiteServer) UpdateSiteInfo(context.Context, *UpdateSiteInfoRequest) (*SiteInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSiteInfo not implemented")
}
func (UnimplementedWebSiteServer) ListMembers(context.Context, *ListMembersRequest) (*ListMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMembers not implemented")
}
func (UnimplementedWebSiteServer) GetMember(context.Context, *GetMemberRequest) (*Member, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMember not implemented")
}
func (UnimplementedWebSiteServer) DeleteMember(context.Context, *DeleteMemberRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMember not implemented")
}
func (UnimplementedWebSiteServer) PublishDocument(context.Context, *PublishDocumentRequest) (*PublishDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishDocument not implemented")
}
func (UnimplementedWebSiteServer) UnpublishDocument(context.Context, *UnpublishDocumentRequest) (*UnpublishDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpublishDocument not implemented")
}
func (UnimplementedWebSiteServer) ListWebPublications(context.Context, *ListWebPublicationsRequest) (*ListWebPublicationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWebPublications not implemented")
}
func (UnimplementedWebSiteServer) GetPath(context.Context, *GetPathRequest) (*GetPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPath not implemented")
}

// UnsafeWebSiteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebSiteServer will
// result in compilation errors.
type UnsafeWebSiteServer interface {
	mustEmbedUnimplementedWebSiteServer()
}

func RegisterWebSiteServer(s grpc.ServiceRegistrar, srv WebSiteServer) {
	s.RegisterService(&WebSite_ServiceDesc, srv)
}

func _WebSite_CreateInviteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInviteTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebSiteServer).CreateInviteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.documents.v1alpha.WebSite/CreateInviteToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebSiteServer).CreateInviteToken(ctx, req.(*CreateInviteTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebSite_RedeemInviteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedeemInviteTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebSiteServer).RedeemInviteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.documents.v1alpha.WebSite/RedeemInviteToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebSiteServer).RedeemInviteToken(ctx, req.(*RedeemInviteTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebSite_GetSiteInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSiteInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebSiteServer).GetSiteInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.documents.v1alpha.WebSite/GetSiteInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebSiteServer).GetSiteInfo(ctx, req.(*GetSiteInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebSite_UpdateSiteInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSiteInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebSiteServer).UpdateSiteInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.documents.v1alpha.WebSite/UpdateSiteInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebSiteServer).UpdateSiteInfo(ctx, req.(*UpdateSiteInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebSite_ListMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebSiteServer).ListMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.documents.v1alpha.WebSite/ListMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebSiteServer).ListMembers(ctx, req.(*ListMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebSite_GetMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebSiteServer).GetMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.documents.v1alpha.WebSite/GetMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebSiteServer).GetMember(ctx, req.(*GetMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebSite_DeleteMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebSiteServer).DeleteMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.documents.v1alpha.WebSite/DeleteMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebSiteServer).DeleteMember(ctx, req.(*DeleteMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebSite_PublishDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebSiteServer).PublishDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.documents.v1alpha.WebSite/PublishDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebSiteServer).PublishDocument(ctx, req.(*PublishDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebSite_UnpublishDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnpublishDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebSiteServer).UnpublishDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.documents.v1alpha.WebSite/UnpublishDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebSiteServer).UnpublishDocument(ctx, req.(*UnpublishDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebSite_ListWebPublications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWebPublicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebSiteServer).ListWebPublications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.documents.v1alpha.WebSite/ListWebPublications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebSiteServer).ListWebPublications(ctx, req.(*ListWebPublicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebSite_GetPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebSiteServer).GetPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.documents.v1alpha.WebSite/GetPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebSiteServer).GetPath(ctx, req.(*GetPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebSite_ServiceDesc is the grpc.ServiceDesc for WebSite service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebSite_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.mintter.documents.v1alpha.WebSite",
	HandlerType: (*WebSiteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInviteToken",
			Handler:    _WebSite_CreateInviteToken_Handler,
		},
		{
			MethodName: "RedeemInviteToken",
			Handler:    _WebSite_RedeemInviteToken_Handler,
		},
		{
			MethodName: "GetSiteInfo",
			Handler:    _WebSite_GetSiteInfo_Handler,
		},
		{
			MethodName: "UpdateSiteInfo",
			Handler:    _WebSite_UpdateSiteInfo_Handler,
		},
		{
			MethodName: "ListMembers",
			Handler:    _WebSite_ListMembers_Handler,
		},
		{
			MethodName: "GetMember",
			Handler:    _WebSite_GetMember_Handler,
		},
		{
			MethodName: "DeleteMember",
			Handler:    _WebSite_DeleteMember_Handler,
		},
		{
			MethodName: "PublishDocument",
			Handler:    _WebSite_PublishDocument_Handler,
		},
		{
			MethodName: "UnpublishDocument",
			Handler:    _WebSite_UnpublishDocument_Handler,
		},
		{
			MethodName: "ListWebPublications",
			Handler:    _WebSite_ListWebPublications_Handler,
		},
		{
			MethodName: "GetPath",
			Handler:    _WebSite_GetPath_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "documents/v1alpha/web_publishing.proto",
}
