// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: site/v1alpha/site.proto

package site

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SiteClient is the client API for Site service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SiteClient interface {
	// Creates a new invite token for registering a new member.
	CreateInviteToken(ctx context.Context, in *CreateInviteTokenRequest, opts ...grpc.CallOption) (*InviteToken, error)
	// Redeem a previously created invite token to register a new member.
	RedeemInviteToken(ctx context.Context, in *RedeemInviteTokenRequest, opts ...grpc.CallOption) (*RedeemInviteTokenResponse, error)
	// Gets public-facing site information.
	GetSiteInfo(ctx context.Context, in *GetSiteInfoRequest, opts ...grpc.CallOption) (*SiteInfo, error)
	// Updates public-facing site information. Doesn't support partial updates,
	// hence all the fields must be provided.
	UpdateSiteInfo(ctx context.Context, in *UpdateSiteInfoRequest, opts ...grpc.CallOption) (*SiteInfo, error)
	// Lists registered members on the site.
	ListMembers(ctx context.Context, in *ListMembersRequest, opts ...grpc.CallOption) (*ListMembersResponse, error)
	// Gets information about a specific member.
	GetMember(ctx context.Context, in *GetMemberRequest, opts ...grpc.CallOption) (*Member, error)
	// Deletes an existing member.
	DeleteMember(ctx context.Context, in *DeleteMemberRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Lists currently blocked Mintter Accounts.
	ListBlockedAccounts(ctx context.Context, in *ListBlockedAccountsRequest, opts ...grpc.CallOption) (*ListBlockedAccountsResponse, error)
	// pin and publish the document to the public web site
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	// un-pin the document
	Unpublish(ctx context.Context, in *UnpublishRequest, opts ...grpc.CallOption) (*UnpublishResponse, error)
	// list all the published documents
	ListPublications(ctx context.Context, in *ListPublicationsRequest, opts ...grpc.CallOption) (*ListPublicationsResponse, error)
}

type siteClient struct {
	cc grpc.ClientConnInterface
}

func NewSiteClient(cc grpc.ClientConnInterface) SiteClient {
	return &siteClient{cc}
}

func (c *siteClient) CreateInviteToken(ctx context.Context, in *CreateInviteTokenRequest, opts ...grpc.CallOption) (*InviteToken, error) {
	out := new(InviteToken)
	err := c.cc.Invoke(ctx, "/com.mintter.site.v1alpha.Site/CreateInviteToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteClient) RedeemInviteToken(ctx context.Context, in *RedeemInviteTokenRequest, opts ...grpc.CallOption) (*RedeemInviteTokenResponse, error) {
	out := new(RedeemInviteTokenResponse)
	err := c.cc.Invoke(ctx, "/com.mintter.site.v1alpha.Site/RedeemInviteToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteClient) GetSiteInfo(ctx context.Context, in *GetSiteInfoRequest, opts ...grpc.CallOption) (*SiteInfo, error) {
	out := new(SiteInfo)
	err := c.cc.Invoke(ctx, "/com.mintter.site.v1alpha.Site/GetSiteInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteClient) UpdateSiteInfo(ctx context.Context, in *UpdateSiteInfoRequest, opts ...grpc.CallOption) (*SiteInfo, error) {
	out := new(SiteInfo)
	err := c.cc.Invoke(ctx, "/com.mintter.site.v1alpha.Site/UpdateSiteInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteClient) ListMembers(ctx context.Context, in *ListMembersRequest, opts ...grpc.CallOption) (*ListMembersResponse, error) {
	out := new(ListMembersResponse)
	err := c.cc.Invoke(ctx, "/com.mintter.site.v1alpha.Site/ListMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteClient) GetMember(ctx context.Context, in *GetMemberRequest, opts ...grpc.CallOption) (*Member, error) {
	out := new(Member)
	err := c.cc.Invoke(ctx, "/com.mintter.site.v1alpha.Site/GetMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteClient) DeleteMember(ctx context.Context, in *DeleteMemberRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/com.mintter.site.v1alpha.Site/DeleteMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteClient) ListBlockedAccounts(ctx context.Context, in *ListBlockedAccountsRequest, opts ...grpc.CallOption) (*ListBlockedAccountsResponse, error) {
	out := new(ListBlockedAccountsResponse)
	err := c.cc.Invoke(ctx, "/com.mintter.site.v1alpha.Site/ListBlockedAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, "/com.mintter.site.v1alpha.Site/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteClient) Unpublish(ctx context.Context, in *UnpublishRequest, opts ...grpc.CallOption) (*UnpublishResponse, error) {
	out := new(UnpublishResponse)
	err := c.cc.Invoke(ctx, "/com.mintter.site.v1alpha.Site/Unpublish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteClient) ListPublications(ctx context.Context, in *ListPublicationsRequest, opts ...grpc.CallOption) (*ListPublicationsResponse, error) {
	out := new(ListPublicationsResponse)
	err := c.cc.Invoke(ctx, "/com.mintter.site.v1alpha.Site/ListPublications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SiteServer is the server API for Site service.
// All implementations should embed UnimplementedSiteServer
// for forward compatibility
type SiteServer interface {
	// Creates a new invite token for registering a new member.
	CreateInviteToken(context.Context, *CreateInviteTokenRequest) (*InviteToken, error)
	// Redeem a previously created invite token to register a new member.
	RedeemInviteToken(context.Context, *RedeemInviteTokenRequest) (*RedeemInviteTokenResponse, error)
	// Gets public-facing site information.
	GetSiteInfo(context.Context, *GetSiteInfoRequest) (*SiteInfo, error)
	// Updates public-facing site information. Doesn't support partial updates,
	// hence all the fields must be provided.
	UpdateSiteInfo(context.Context, *UpdateSiteInfoRequest) (*SiteInfo, error)
	// Lists registered members on the site.
	ListMembers(context.Context, *ListMembersRequest) (*ListMembersResponse, error)
	// Gets information about a specific member.
	GetMember(context.Context, *GetMemberRequest) (*Member, error)
	// Deletes an existing member.
	DeleteMember(context.Context, *DeleteMemberRequest) (*emptypb.Empty, error)
	// Lists currently blocked Mintter Accounts.
	ListBlockedAccounts(context.Context, *ListBlockedAccountsRequest) (*ListBlockedAccountsResponse, error)
	// pin and publish the document to the public web site
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
	// un-pin the document
	Unpublish(context.Context, *UnpublishRequest) (*UnpublishResponse, error)
	// list all the published documents
	ListPublications(context.Context, *ListPublicationsRequest) (*ListPublicationsResponse, error)
}

// UnimplementedSiteServer should be embedded to have forward compatible implementations.
type UnimplementedSiteServer struct {
}

func (UnimplementedSiteServer) CreateInviteToken(context.Context, *CreateInviteTokenRequest) (*InviteToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInviteToken not implemented")
}
func (UnimplementedSiteServer) RedeemInviteToken(context.Context, *RedeemInviteTokenRequest) (*RedeemInviteTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedeemInviteToken not implemented")
}
func (UnimplementedSiteServer) GetSiteInfo(context.Context, *GetSiteInfoRequest) (*SiteInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSiteInfo not implemented")
}
func (UnimplementedSiteServer) UpdateSiteInfo(context.Context, *UpdateSiteInfoRequest) (*SiteInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSiteInfo not implemented")
}
func (UnimplementedSiteServer) ListMembers(context.Context, *ListMembersRequest) (*ListMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMembers not implemented")
}
func (UnimplementedSiteServer) GetMember(context.Context, *GetMemberRequest) (*Member, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMember not implemented")
}
func (UnimplementedSiteServer) DeleteMember(context.Context, *DeleteMemberRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMember not implemented")
}
func (UnimplementedSiteServer) ListBlockedAccounts(context.Context, *ListBlockedAccountsRequest) (*ListBlockedAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlockedAccounts not implemented")
}
func (UnimplementedSiteServer) Publish(context.Context, *PublishRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedSiteServer) Unpublish(context.Context, *UnpublishRequest) (*UnpublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unpublish not implemented")
}
func (UnimplementedSiteServer) ListPublications(context.Context, *ListPublicationsRequest) (*ListPublicationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPublications not implemented")
}

// UnsafeSiteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SiteServer will
// result in compilation errors.
type UnsafeSiteServer interface {
	mustEmbedUnimplementedSiteServer()
}

func RegisterSiteServer(s grpc.ServiceRegistrar, srv SiteServer) {
	s.RegisterService(&Site_ServiceDesc, srv)
}

func _Site_CreateInviteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInviteTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServer).CreateInviteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.site.v1alpha.Site/CreateInviteToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServer).CreateInviteToken(ctx, req.(*CreateInviteTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Site_RedeemInviteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedeemInviteTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServer).RedeemInviteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.site.v1alpha.Site/RedeemInviteToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServer).RedeemInviteToken(ctx, req.(*RedeemInviteTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Site_GetSiteInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSiteInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServer).GetSiteInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.site.v1alpha.Site/GetSiteInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServer).GetSiteInfo(ctx, req.(*GetSiteInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Site_UpdateSiteInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSiteInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServer).UpdateSiteInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.site.v1alpha.Site/UpdateSiteInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServer).UpdateSiteInfo(ctx, req.(*UpdateSiteInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Site_ListMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServer).ListMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.site.v1alpha.Site/ListMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServer).ListMembers(ctx, req.(*ListMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Site_GetMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServer).GetMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.site.v1alpha.Site/GetMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServer).GetMember(ctx, req.(*GetMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Site_DeleteMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServer).DeleteMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.site.v1alpha.Site/DeleteMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServer).DeleteMember(ctx, req.(*DeleteMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Site_ListBlockedAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBlockedAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServer).ListBlockedAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.site.v1alpha.Site/ListBlockedAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServer).ListBlockedAccounts(ctx, req.(*ListBlockedAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Site_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.site.v1alpha.Site/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Site_Unpublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnpublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServer).Unpublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.site.v1alpha.Site/Unpublish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServer).Unpublish(ctx, req.(*UnpublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Site_ListPublications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPublicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServer).ListPublications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.site.v1alpha.Site/ListPublications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServer).ListPublications(ctx, req.(*ListPublicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Site_ServiceDesc is the grpc.ServiceDesc for Site service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Site_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.mintter.site.v1alpha.Site",
	HandlerType: (*SiteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInviteToken",
			Handler:    _Site_CreateInviteToken_Handler,
		},
		{
			MethodName: "RedeemInviteToken",
			Handler:    _Site_RedeemInviteToken_Handler,
		},
		{
			MethodName: "GetSiteInfo",
			Handler:    _Site_GetSiteInfo_Handler,
		},
		{
			MethodName: "UpdateSiteInfo",
			Handler:    _Site_UpdateSiteInfo_Handler,
		},
		{
			MethodName: "ListMembers",
			Handler:    _Site_ListMembers_Handler,
		},
		{
			MethodName: "GetMember",
			Handler:    _Site_GetMember_Handler,
		},
		{
			MethodName: "DeleteMember",
			Handler:    _Site_DeleteMember_Handler,
		},
		{
			MethodName: "ListBlockedAccounts",
			Handler:    _Site_ListBlockedAccounts_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _Site_Publish_Handler,
		},
		{
			MethodName: "Unpublish",
			Handler:    _Site_Unpublish_Handler,
		},
		{
			MethodName: "ListPublications",
			Handler:    _Site_ListPublications_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "site/v1alpha/site.proto",
}
