// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: daemon/v1alpha/sites.proto

package daemon

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SitesClient is the client API for Sites service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SitesClient interface {
	// Adds a site configuration to the local app.
	AddSite(ctx context.Context, in *AddSiteRequest, opts ...grpc.CallOption) (*SiteConfig, error)
	// Adds a site configuration to the local app.
	RemoveSite(ctx context.Context, in *RemoveSiteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Lists configured sites.
	ListSites(ctx context.Context, in *ListSitesRequest, opts ...grpc.CallOption) (*ListSitesResponse, error)
}

type sitesClient struct {
	cc grpc.ClientConnInterface
}

func NewSitesClient(cc grpc.ClientConnInterface) SitesClient {
	return &sitesClient{cc}
}

func (c *sitesClient) AddSite(ctx context.Context, in *AddSiteRequest, opts ...grpc.CallOption) (*SiteConfig, error) {
	out := new(SiteConfig)
	err := c.cc.Invoke(ctx, "/com.mintter.daemon.v1alpha.Sites/AddSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitesClient) RemoveSite(ctx context.Context, in *RemoveSiteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/com.mintter.daemon.v1alpha.Sites/RemoveSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitesClient) ListSites(ctx context.Context, in *ListSitesRequest, opts ...grpc.CallOption) (*ListSitesResponse, error) {
	out := new(ListSitesResponse)
	err := c.cc.Invoke(ctx, "/com.mintter.daemon.v1alpha.Sites/ListSites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SitesServer is the server API for Sites service.
// All implementations should embed UnimplementedSitesServer
// for forward compatibility
type SitesServer interface {
	// Adds a site configuration to the local app.
	AddSite(context.Context, *AddSiteRequest) (*SiteConfig, error)
	// Adds a site configuration to the local app.
	RemoveSite(context.Context, *RemoveSiteRequest) (*emptypb.Empty, error)
	// Lists configured sites.
	ListSites(context.Context, *ListSitesRequest) (*ListSitesResponse, error)
}

// UnimplementedSitesServer should be embedded to have forward compatible implementations.
type UnimplementedSitesServer struct {
}

func (UnimplementedSitesServer) AddSite(context.Context, *AddSiteRequest) (*SiteConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSite not implemented")
}
func (UnimplementedSitesServer) RemoveSite(context.Context, *RemoveSiteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSite not implemented")
}
func (UnimplementedSitesServer) ListSites(context.Context, *ListSitesRequest) (*ListSitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSites not implemented")
}

// UnsafeSitesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SitesServer will
// result in compilation errors.
type UnsafeSitesServer interface {
	mustEmbedUnimplementedSitesServer()
}

func RegisterSitesServer(s grpc.ServiceRegistrar, srv SitesServer) {
	s.RegisterService(&Sites_ServiceDesc, srv)
}

func _Sites_AddSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServer).AddSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.daemon.v1alpha.Sites/AddSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServer).AddSite(ctx, req.(*AddSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sites_RemoveSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServer).RemoveSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.daemon.v1alpha.Sites/RemoveSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServer).RemoveSite(ctx, req.(*RemoveSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sites_ListSites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServer).ListSites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mintter.daemon.v1alpha.Sites/ListSites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServer).ListSites(ctx, req.(*ListSitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Sites_ServiceDesc is the grpc.ServiceDesc for Sites service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sites_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.mintter.daemon.v1alpha.Sites",
	HandlerType: (*SitesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSite",
			Handler:    _Sites_AddSite_Handler,
		},
		{
			MethodName: "RemoveSite",
			Handler:    _Sites_RemoveSite_Handler,
		},
		{
			MethodName: "ListSites",
			Handler:    _Sites_ListSites_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "daemon/v1alpha/sites.proto",
}
