// Code generated by sqlitegen. DO NOT EDIT.

package testqueries

import (
	"errors"
	"fmt"

	"crawshaw.io/sqlite"
	"mintter/backend/db/sqlitegen"
)

var _ = errors.New

type getWalletResult struct {
	WalletID   int
	WalletName string
}

func getWallet(conn *sqlite.Conn, walletID int) (getWalletResult, error) {
	const query = `SELECT wallets.id, wallets.name
FROM wallets
WHERE wallets.id = ?`

	var out getWalletResult

	before := func(stmt *sqlite.Stmt) {
		stmt.BindInt(1, walletID)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		if i > 1 {
			return errors.New("getWallet: more than one result return for a single-kind query")
		}

		out.WalletID = stmt.ColumnInt(0)
		out.WalletName = stmt.ColumnText(1)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: getWallet: %w", err)
	}

	return out, err
}

type listWalletsResult struct {
	WalletID   int
	WalletName string
}

func listWallets(conn *sqlite.Conn, cursor string, limit int) ([]listWalletsResult, error) {
	const query = `SELECT wallets.id, wallets.name
FROM wallets
WHERE wallets.id > ? LIMIT ?`

	var out []listWalletsResult

	before := func(stmt *sqlite.Stmt) {
		stmt.BindText(1, cursor)
		stmt.BindInt(2, limit)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		out = append(out, listWalletsResult{})
		out[i].WalletID = stmt.ColumnInt(0)
		out[i].WalletName = stmt.ColumnText(1)
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: listWallets: %w", err)
	}

	return out, err
}

func insertWallet(conn *sqlite.Conn, id int, name string) error {
	const query = `INSERT INTO wallets (id, name) VALUES (?, ?)`

	before := func(stmt *sqlite.Stmt) {
		stmt.BindInt(1, id)
		stmt.BindText(2, name)
	}

	onStep := func(i int, stmt *sqlite.Stmt) error {
		return nil
	}

	err := sqlitegen.ExecStmt(conn, query, before, onStep)
	if err != nil {
		err = fmt.Errorf("failed query: insertWallet: %w", err)
	}

	return err
}
